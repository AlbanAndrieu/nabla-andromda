##
##  This macro renders the backing list support for the form implementation
##
#macro(renderBackingListImplSupport $field $ownerParameter)
#if ($field.labelListName)
#set ($labelListName = $field.labelListName)
#set ($valueListName = $field.valueListName)
#set ($backingListName = $field.backingListName)
#else
#set ($labelListName = $field.getLabelListName($ownerParameter))
#set ($valueListName = $field.getValueListName($ownerParameter))
#set ($backingListName = $field.getBackingListName($ownerParameter))
#end

    /**
     * Stores the values.
     */
    private Object[] $valueListName;

    /**
     * Stores the labels
     */
    private Object[] $labelListName;
#set ($listType = "Object[]")
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListMethod = $stringUtils.capitalize($labelListName))

    /**
     * @return backingList $listType
     */
    public $listType get${backingListMethod}()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        javax.faces.model.SelectItem[] backingList = new javax.faces.model.SelectItem[length];

        for (int ctr = 0; ctr < length; ctr++)
        {
            backingList[ctr] = new javax.faces.model.SelectItem(
                values[ctr] != null ? values[ctr] : "", labels[ctr] != null ? java.lang.String.valueOf(labels[ctr]) : "");
        }
        return backingList;
    }

    /**
     * @return $valueListName
     */
    public $listType get${valueListMethod}()
    {
        return this.$valueListName;
    }

    /**
     * @param ${valueListName}In
     */
    public void set${valueListMethod}($listType ${valueListName}In)
    {
        this.$valueListName = ${valueListName}In;
    }

    /**
     * @return $labelListName $listType
     */
    public $listType get${labelListMethod}()
    {
        return this.$labelListName;
    }

    /**
     * @param ${labelListName}In
     */
    public void set${labelListMethod}($listType ${labelListName}In)
    {
        this.$labelListName = ${labelListName}In;
    }

#set ($setBackingListMethodSignature = "set${backingListMethod}(java.util.Collection<? extends Object> items, String valueProperty, String labelProperty)")
    /**
     * @param items
     * @param valueProperty
     * @param labelProperty
     */
    public void $setBackingListMethodSignature
    {
        this.${valueListName} = null;
        this.${labelListName} = null;
        if (items != null)
        {
            this.${valueListName} = new Object[items.size()];
            this.${labelListName} = new Object[items.size()];

            try
            {
                final java.util.List<String> labelProperties =
                    labelProperty == null ? null : new java.util.ArrayList<String>(java.util.Arrays.asList(labelProperty.split("[\\W&&[^\\.]]+")));
                final java.util.List<String> labelDelimiters =
                    labelProperty == null ? null : new java.util.ArrayList<String>(java.util.Arrays.asList(labelProperty.split("[\\w\\.]+")));
                int ctr = 0;
                for (final java.util.Iterator<? extends Object> iterator = items.iterator(); iterator.hasNext(); ctr++)
                {
                    final Object item = iterator.next();
                    if (item != null)
                    {
                        this.${valueListName}[ctr] = valueProperty == null ? item :
                            org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty.trim());
                        if (labelProperties == null)
                        {
                            this.${labelListName}[ctr] = item;
                        }
                        else
                        {
                            final StringBuilder labelText = new StringBuilder();
                            int ctr2 = 0;
                            do
                            {
                                if (!labelDelimiters.isEmpty())
                                {
                                    labelText.append(labelDelimiters.get(ctr2));
                                }
                                String property = null;
                                if (ctr2 < labelProperties.size())
                                {
                                    property = labelProperties.get(ctr2);
                                }
                                if (property != null && property.length() > 0)
                                {
                                    if (org.apache.commons.beanutils.PropertyUtils.isReadable(item, property))
                                    {
                                        Object value = org.apache.commons.beanutils.PropertyUtils.getProperty(item, property);
                                        if (value != null)
                                        {
                                            if (value instanceof String)
                                            {
                                                if (((String)value).trim().length() == 0)
                                                {
                                                    value = null;
                                                }
                                            }
                                            if (value != null)
                                            {
                                                labelText.append(value);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        labelText.append(property);
                                    }
                                }
                                ctr2++;
                            }
                            while (ctr2 < labelDelimiters.size());
                            this.${labelListName}[ctr] = labelText.toString().replaceAll("\\s+", " ").trim();
                        }
                    }
                }
            }
            catch (final Throwable throwable)
            {
                throw new java.lang.RuntimeException(throwable);
            }
        }
    }
#if ($field.type.arrayType || $field.type.collectionType)
#if ($field.backingListName)
#set ($backingValueName = $field.backingValueName)
#else
#set ($backingValueName = $field.getBackingValueName($ownerParameter))
#end
#set ($backingValueMethod = $stringUtils.capitalize($backingValueName))
    private $field.type.fullyQualifiedName $backingValueName;

    /**
     * @param ${backingValueName}In
     */
    public void set${backingValueMethod}($field.type.fullyQualifiedName ${backingValueName}In)
    {
        this.$backingValueName = ${backingValueName}In;
    }

    /**
     * @return ${backingValueName}
     */
    public $field.type.fullyQualifiedName get${backingValueMethod}()
    {
        return this.$backingValueName;
    }
#end
#end
##
## This macro renders the the date/time formatters within the form implementation
##
#macro(renderDateTimeFormatters $field $ownerParameter)
#if ($field.backingListName)
#set ($dateFormatter = $field.dateFormatter)
#set ($timeFormatter = $field.timeFormatter)
#set ($fieldName = $field.name)
#else
#set ($dateFormatter = $field.getDateFormatter($ownerParameter))
#set ($timeFormatter = $field.getTimeFormatter($ownerParameter))
#set ($fieldName = $field.getFormPropertyName($ownerParameter))
#end
#set ($lenient = !$field.strictDateFormat)
#if ($field.type.dateType)
        final java.text.DateFormat $dateFormatter = new java.text.SimpleDateFormat("$field.format");
        ${dateFormatter}.setLenient($lenient);
        this.dateTimeFormatters.put("$fieldName", $dateFormatter);
#elseif ($field.type.timeType)
        this.dateTimeFormatters.put("$fieldName", new java.text.SimpleDateFormat("$field.format"));
#end
#end
