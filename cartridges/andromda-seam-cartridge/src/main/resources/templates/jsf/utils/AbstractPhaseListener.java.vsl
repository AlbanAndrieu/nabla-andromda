// license-header java merge-point
// Generated by andromda-jsf cartridge (utils\AbstractPhaseListener.java.vsl) DO NOT EDIT!
#set ($className = "AbstractPhaseListener")
#if ($stringUtils.isNotBlank($managedBeansPackage))
package $managedBeansPackage;
#end

/**
 * An abstract phase listener that can be extended, provides some basic functionality (like
 * the prevention of the phase listener being used more than once if it happens to be
 * registered more than once by the container, like seems to happen with myfaces used with liferay).
 *
 * @author Chad Brandon
 */
public abstract class $className
    implements javax.faces.event.PhaseListener
{
    private static final long serialVersionUID = 1L;

    private static java.util.Map<Class<? extends AbstractPhaseListener>, Object> firstInstances
        = new java.util.HashMap<Class<? extends AbstractPhaseListener>, Object>();

    private boolean isFirstInstance()
    {
        return firstInstances.get(this.getClass()).equals(this);
    }

    /**
     *
     */
    public AbstractPhaseListener()
    {
        if (!firstInstances.containsKey(this.getClass()))
        {
            firstInstances.put(this.getClass(), this);
        }
    }

    /**
     * @see javax.faces.event.PhaseListener#hash()beforePhase(javax.faces.event.PhaseEvent)
     */
    @Override
    public void beforePhase(javax.faces.event.PhaseEvent event)
    {
        if (this.isFirstInstance())
        {
            this.handleBeforePhase(event);
        }
    }

    /**
     * @param event
     */
    protected abstract void handleBeforePhase(javax.faces.event.PhaseEvent event);

    /**
     * @see javax.faces.event.PhaseListener#hash()afterPhase(javax.faces.event.PhaseEvent)
     */
    @Override
    public void afterPhase(javax.faces.event.PhaseEvent event)
    {
        if (this.isFirstInstance())
        {
            this.handleAfterPhase(event);
        }
    }

    /**
     * @param event
     */
    protected abstract void handleAfterPhase(javax.faces.event.PhaseEvent event);

    /**
     * @see javax.faces.event.PhaseListener#hash()getPhaseId()
     */
    @Override
    public javax.faces.event.PhaseId getPhaseId()
    {
        return javax.faces.event.PhaseId.ANY_PHASE;
    }
}