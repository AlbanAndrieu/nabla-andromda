// license-header java merge-point
// Generated by andromda-jsf cartridge (flow\crud\ViewPopulator.java.vsl) DO NOT EDIT!
#set ($generatedFile = "${manageable.populatorFullPath}.java")
package $manageable.manageablePackageName;

import java.io.IOException;

import javax.faces.FactoryFinder;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextFactory;
import javax.faces.lifecycle.Lifecycle;
import javax.faces.lifecycle.LifecycleFactory;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * This filter handles the population of forms for the <em>$manageable.name</code>
 * view.
 */
public class $manageable.populatorName
    implements Filter
{
    private FilterConfig config;

    /**
     * Initialize the filter
     *
     * @param configIn the configuration
     * @see javax.servlet.Filter#hash()init(FilterConfig)
     */
    @Override
    public void init(FilterConfig configIn)
    {
        this.config = configIn;
    }

    /**
     * @see javax.servlet.Filter#hash()doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    @Override
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        this.populateFormAndViewVariables(request, response, null);
        chain.doFilter(request, response);
    }

    private void populateFormAndViewVariables(final ServletRequest request, final ServletResponse response, Object form)
        throws ServletException
    {
        // - we need to retrieve the faces context differently since we're outside of the
        //   faces servlet
        final LifecycleFactory lifecycleFactory =
            (LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);
        final Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);
        final FacesContextFactory facesContextFactory =
            (FacesContextFactory)FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
        final FacesContext facesContext =
            facesContextFactory.getFacesContext(
                this.config.getServletContext(),
                request,
                response,
                lifecycle);

        org.apache.myfaces.trinidad.context.RequestContext adfContext = org.apache.myfaces.trinidad.context.RequestContext.getCurrentInstance();
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();

        form = adfContext.getPageFlowScope().get("$actionFormKey");

#if ($formSerialization)
        @SuppressWarnings("unused")
        final javax.servlet.http.HttpSession session = ((javax.servlet.http.HttpServletRequest)request).getSession();

        // - if the form is still null, see if we can get it from a serialized state
        if (form == null)
        {
            form = ${managedBeansPackage}.JsfUtils.getSerializedForm(facesContext);
        }
#end
        try
        {
            //Keep this code out of the 'if' below to force the form creation in case it does not exist.
            //This way the direct URL access works fine.
            ${manageable.formBeanType} ${manageable.formBeanName} =
                            ((${manageable.controllerName})variableResolver.resolveVariable(
                            facesContext,
                            "${manageable.controllerBeanName}")).getForm();
            // - populate the forms
            if (form != null && form instanceof $manageable.formBeanType)
            {
                // - populate the $manageable.formBeanName with any parameters from the previous form
                ${manageable.formBeanName}.copyFrom((${manageable.formBeanType})form);
            }
#if ($formSerialization)
            // - serialize the form
            if (form != null)
            {
                ${managedBeansPackage}.JsfUtils.serializeForm(facesContext, form);
            }
#end
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
    }

    /**
     * @see javax.servlet.Filter#hash()destroy()
     */
    @Override
    public void destroy()
    {
        this.config = null;
    }
}