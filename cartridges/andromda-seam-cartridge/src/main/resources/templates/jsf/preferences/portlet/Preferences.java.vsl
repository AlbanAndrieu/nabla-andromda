// license-header java merge-point
// Generated by andromda-jsf cartridge (preferences\portlet\Preferences.java.vsl) DO NOT EDIT!
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#end

/**
 * Provides access to portlet preferences for: $class.useCase.name.
$class.getDocumentation(" * ")
 */
public class $class.name
{
    /**
     * The shared instance of this class.
     */
    private static $class.name instance;

    /**
     * Gets the shared instance of this class.
     */
    public static $class.name getInstance()
    {
        if (instance == null)
        {
            instance = new ${class.name}();
        }
        return instance;
    }

    private ${class.name}()
    {
    }

    protected javax.portlet.PortletPreferences getPreferences()
    {
        return ((javax.portlet.PortletRequest)javax.faces.context.FacesContext.getCurrentInstance().getExternalContext().getRequest()).getPreferences();
    }
#foreach ($attribute in $class.getAttributes(true))

    /**
$attribute.getDocumentation("     * ")
     */
    public $attribute.getterSetterTypeName ${attribute.getterName}()
    {
#if (!$attribute.type.arrayType)
#if (!$attribute.type.stringType)
        final String value = this.getPreferences().getValue("$attribute.name", null);
#* *##if ($attribute.type.primitive)
#set($preferenceTypeName = $attribute.type.wrapperName)
#* *##else
#set($preferenceTypeName = $fullyQualifiedName)
#* *##end
        final $preferenceTypeName wrappedValue = value != null ? ${preferenceTypeName}.valueOf(value) : null;
#* *##if ($attribute.type.primitive)
        return wrappedValue != null ? wrappedValue.${attribute.getterSetterTypeName}Value() : #if ($attribute.defaultValue)${attribute.defaultValue}#else${attribute.type.javaNullString}#end;
#* *##else
        return wrappedValue == null ?#if ($attribute.defaultValue) ${attribute.defaultValue}#else null#end : null;
#* *##end
#else
        return this.getPreferences().getValue("$attribute.name",#if ($attribute.defaultValue) ${attribute.defaultValue}#else null#end);
#end
#else
        final String[] stringValues = this.getPreferences().getValues("$attribute.name", null);
#set ($arrayType = $attribute.type.nonArray)
#if ($arrayType.wrapperName)
#set ($typeName = $arrayType.wrapperName)
#else
#set ($typeName = $arrayType.fullyQualifiedName)
#end
#if (!$arrayType.stringType)
        final java.util.Collection<${typeName}> values = new java.util.ArrayList<${typeName}>();
        if (stringValues != null)
        {
            for (final String stringValue : stringValues)
            {
                values.add(${typeName}.valueOf(stringValue));
            }
        }
        return values.toArray(new ${typeName}[0]);
#else
        return stringValues;
#end
#end
    }

    /**
     * Associates the value of the specified <code>${attribute.name}</code>
     * with the '${attribute.name}' preference and persists the change if <code>store</code>
     * is specified as <code>true</code>.
     *
     * @param $attribute.name the value to give the $attribute.name preference.
     */
    public void ${attribute.setterName}(final $attribute.getterSetterTypeName $attribute.name, final boolean store)
        throws Exception
    {
#if (!$attribute.type.arrayType)
#if ($attribute.type.primitive)
        final String value = String.valueOf($attribute.name);
#else
        String value = null;
        if ($attribute.name != null)
        {
            value = String.valueOf($attribute.name);
        }
#end
        this.getPreferences().setValue("$attribute.name", value);
#else
#set ($valuesVariable = "$attribute.name")
#set ($arrayType = $attribute.type.nonArray)
#if (!$arrayType.stringType)
        String[] values = null;
        if (includeCommunicationMediums != null)
        {
            final java.util.Collection<String> valuesCollection = new java.util.ArrayList<String>();
            for (Integer value : includeCommunicationMediums)
            {
                valuesCollection.add(String.valueOf(value));
            }
            values = valuesCollection.toArray(new String[0]);
        }
#set ($valuesVariable = "values")
#end
        this.getPreferences().setValues("$attribute.name", $valuesVariable);
#end
        if (store)
        {
            this.store();
        }
    }

    /**
     * Associates the value of the specified <code>${attribute.name}</code>
     * with the '${attribute.name}' preference and persists the change.
     *
     * @param $attribute.name the value to give the $attribute.name preference.
     */
    public void ${attribute.setterName}(final $attribute.getterSetterTypeName $attribute.name)
        throws Exception
    {
        this.${attribute.setterName}($attribute.name, true);
    }

#end
    /**
     * Commits any pending portlet preference changes.
     */
    public void store() throws Exception
    {
        this.getPreferences().store();
    }

    // ${class.fullyQualifiedName} portlet-preferences merge-point
}