<?xml version="1.0" encoding="$xmlEncoding"?>
<!-- Generated by andromda-seam-cartridge (jsf\configuration\web.xml.vsl) DO NOT EDIT! -->

#if($jsfUtils.servletversion3)
<web-app xmlns="http://java.sun.com/xml/ns/javaee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
#else
<web-app version="2.5"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
#end

    <display-name>${application.display.name}</display-name>

#if ($distributable.equalsIgnoreCase("true"))
    <!-- For cluster, add distributable as the first child element, seam_reference-35.1.2 -->
    <distributable/>

#end
#if ($useSeam)

    <context-param>
          <param-name>org.ajax4jsf.VIEW_HANDLERS</param-name>
          <param-value>com.sun.facelets.FaceletViewHandler</param-value>
    </context-param>
    
    <!-- ************************ Seam Listener **************************** -->
    <listener>
        <listener-class>org.jboss.seam.servlet.SeamListener</listener-class>
    </listener>
    
    <!-- ************************ Ajax4jsf Filter **************************** -->
    <!--
    <filter>
        <display-name>Ajax4jsf Filter</display-name>
        <filter-name>ajax4jsf</filter-name>
        <filter-class>org.ajax4jsf.FastFilter</filter-class>
        <init-param>
            <param-name>enable-cache</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceparser</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    
    <filter-mapping>
        <filter-name>ajax4jsf</filter-name>
        <servlet-name>Faces Servlet</servlet-name>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>
    -->
    
    <!-- ************************ Ajax4JSF Config **************************** -->
    <!--
    <context-param>
        <param-name>org.ajax4jsf.SKIN</param-name>
        <param-value>DEFAULT</param-value>
    </context-param>
    -->

    <!-- ************************ Seam Filter **************************** -->
    <!--
    <filter>
        <filter-name>Seam Filter</filter-name>
        <filter-class>org.jboss.seam.web.SeamFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>Seam Filter</filter-name>
        <servlet-name>Faces Servlet</servlet-name>
    </filter-mapping>
    -->
    <filter>
    	<filter-name>Seam Filter</filter-name>
    	<filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
    </filter>  
    
    <filter-mapping>
    	<filter-name>Seam Filter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>     
    
    <!-- ************************ SEAM Config **************************** -->
    <!-- 300 second conversation timeout -->
    <!--
    <context-param>
        <param-name>org.jboss.seam.core.manager.conversationTimeout</param-name>
        <param-value>300000</param-value>
    </context-param>
    <context-param>
        <param-name>org.jboss.seam.core.init.debug</param-name>
        <param-value>true</param-value>
    </context-param>
    -->
           
    <!-- ************************ Seam Servlet Mapping ************************ -->
    <servlet>
    	<servlet-name>Seam Resource Servlet</servlet-name>
    	<servlet-class>org.jboss.seam.servlet.SeamResourceServlet</servlet-class>
    </servlet> 
    <!--        
    <servlet>
        <servlet-name>Seam Resource Servlet</servlet-name>
        <servlet-class>org.jboss.seam.servlet.ResourceServlet</servlet-class>
    </servlet>
    -->
    
    <servlet-mapping>
        <servlet-name>Seam Resource Servlet</servlet-name>
        <url-pattern>/seam/resource/*</url-pattern>
    </servlet-mapping>
#end          
        
#if ($viewTypeIsFacelets)
    <!-- ********************* Facelets Config ************************** -->
    <context-param>
        <description>Prevents HTML-Comments from beeing rendered</description>
        <param-name>facelets.SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>facelets.VIEW_MAPPINGS</param-name>
        <param-value>*.xhtml</param-value>
    </context-param>

#if (!$useSeam)
    <context-param>
        <param-name>facelets.LIBRARIES</param-name>
        <param-value>
        <!-- facelets-libraries merge-point -->
            /WEB-INF/ajsfc.taglib.xml;
        </param-value>
    </context-param>
    <context-param>
        <param-name>facelets.RECREATE_VALUE_EXPRESSION_ON_BUILD_BEFORE_RESTORE</param-name>
        <param-value>false</param-value>
    </context-param>    
#end

#if ($faceletsDevelopmentSupportEnabled)
    <context-param>
        <param-name>facelets.REFRESH_PERIOD</param-name>
        <param-value>2</param-value>
    </context-param>

    <context-param>
        <param-name>facelets.DEVELOPMENT</param-name>
        <param-value>true</param-value>
    </context-param>

#else
    <context-param>
        <param-name>facelets.REFRESH_PERIOD</param-name>
        <param-value>-1</param-value>
    </context-param>

    <context-param>
        <param-name>facelets.DEVELOPMENT</param-name>
        <param-value>false</param-value>
    </context-param>

#end
#end
#if ($stringUtils.isNotBlank($facesConfigFiles))
    <context-param>
        <description>
            Comma separated list of URIs of (additional) faces config files.
            (e.g. /WEB-INF/jsf-config.xml)
            See JSF 1.0 PRD2, 10.3.2
        </description>
        <param-name>javax.faces.CONFIG_FILES</param-name>
        <param-value>
            $facesConfigFiles
        </param-value>
    </context-param>

#end

    <!-- ************************ JSF Config **************************** -->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>
    <context-param>
        <description>Project stage for the application (new in 2.0). Expects one of
          the following values: Development, Production, SystemTest, UnitTest
        </description>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Development</param-value>
    </context-param>
      
#if ($mojarra)    
<!-- Options JSF avec utilisation de SUN RI
    <context-param>
    	<param-name>com.sun.faces.validateXml</param-name>
    	<param-value>true</param-value>
    </context-param>
    <context-param>
    	<param-name>com.sun.faces.verifyObjects</param-name>
    	<param-value>true</param-value>
    </context-param>
-->
#end

#if ($trinidad || $adf)        
    <context-param>
        <description>
            State saving method: "client" or "server" (= default)
            See JSF Specification 2.5.2. In Trinidad and ADF Faces, it is an
            optimized, token-based mechanism that is almost always a
            better choice than the standard JSF server-side state saving.
        </description>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
#if ($standalone)
        <param-value>$stateSavingMethod</param-value>
#else
        <param-value>server</param-value>
#end
    </context-param>
#end       
   
#if ($richfaces)    
    <!-- ************************ RichFaces Config **************************** -->
    <context-param>
    	<param-name>org.richfaces.SKIN</param-name>
    	<param-value>glassX</param-value>
    	<!--<param-value>ruby</param-value>-->
    </context-param>
    
    <!-- Suppress spurious stylesheets -->
    <context-param>
    	<param-name>org.richfaces.CONTROL_SKINNING</param-name>
    	<param-value>disable</param-value>
    </context-param>
    
    <context-param>
    	<param-name>org.richfaces.CONTROL_SKINNING_CLASSES</param-name>
    	<param-value>disable</param-value>
    </context-param>
    
    <!-- Change load strategy to DEFAULT to disable sending scripts/styles as packs -->
    <context-param>
    	<param-name>org.richfaces.LoadStyleStrategy</param-name>
    	<param-value>ALL</param-value>
    </context-param>
    
    <context-param>
    	<param-name>org.richfaces.LoadScriptStrategy</param-name>
    	<param-value>ALL</param-value>
    </context-param>
#end
      
#if ($myfaces)      
    <!-- ************************ MyFaces Listener **************************** -->
    <!-- Listener, that does all the startup work (configuration, init). -->
    <listener>
        <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
    </listener>

#if ($liferayPortlet)
    <listener>
        <listener-class>com.liferay.portal.kernel.servlet.PortletContextListener</listener-class>
    </listener>
#end
    
    <!-- ************************ MyFaces Config **************************** -->
    <context-param>
         <param-name>org.jboss.jbossfaces.WAR_BUNDLES_JSF_IMPL</param-name>
         <param-value>true</param-value>
    </context-param>
        
#if ($portlet)
    <context-param>
        <description>
            Set the custom AddResource class that allows the myfaces resources to be written into portlet pages without
            requiring the head tag, etc.
        </description>
        <param-name>org.apache.myfaces.ADD_RESOURCE_CLASS</param-name>
        <param-value>org.andromda.cartridges.jsf.portlet.myfaces.tomahawk.AddResource</param-value>
    </context-param>
#end
    <context-param>
        <description>
            This parameter tells MyFaces if javascript code should be allowed in the
            rendered HTML output.
            If javascript is allowed, command_link anchors will have javascript code
            that submits the corresponding form.
            If javascript is not allowed, the state saving info and nested parameters
            will be added as url parameters.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
        <param-value>true</param-value>
    </context-param>

#if($enableMyFacesDevelopmentSupport)
    <context-param>
        <description>
            If true, rendered HTML code will be formatted, so that it is "human readable".
            i.e. additional line separators and whitespace will be written, that do not
            influence the HTML code.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
        <param-value>${enableMyFacesDevelopmentSupport}</param-value>
    </context-param>
#end
#if(!$enableMyFacesDevelopmentSupport)
    <context-param>
        <description>
            Time (in seconds) the faces configuration is re-read.
            Default: "2"
        </description>
        <param-name>org.apache.myfaces.CONFIG_REFRESH_PERIOD</param-name>
        <param-value>0</param-value>
    </context-param>
#end
    <context-param>
        <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            If true, a javascript function will be rendered that is able to restore the
            former vertical scroll on every request. Convenient feature if you have pages
            with long lists and you do not want the browser page to always jump to the top
            if you trigger a link or button action that stays on the same page.
            Default: "false"
        </description>
        <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
        <param-value>true</param-value>
    </context-param>
#end

#if ($standalone)

#if ($trinidad)
    <!-- ************************ Trinidad Filter **************************** -->
    <filter>
        <display-name>Trinidad Filter</display-name>
        <filter-name>trinidad</filter-name>
        <filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>trinidad</filter-name>
        <servlet-name>Faces Servlet</servlet-name>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>    
    
    <!-- ************************ Trinidad Resources Servlet **************************** -->
    <servlet>
        <servlet-name>Trinidad Resources Servlet</servlet-name>
        <servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Trinidad Resources Servlet</servlet-name>
	<url-pattern>/adf/*</url-pattern>
    </servlet-mapping>
    
    <!-- Trinidad Filter -->
    <filter>
        <filter-name>Trinidad Filter</filter-name>
        <filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Trinidad Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>       
#if ($enableOds)
    <filter-mapping>
        <filter-name>Trinidad Filter</filter-name>
        <url-pattern>*.${odsExportExtension}</url-pattern>
    </filter-mapping>
#end     
    <!-- Trinidad patch filter -->
    <!-- for calendar bug https://issues.apache.org/jira/browse/TRINIDAD-119 -->
    <filter>
        <filter-name>TrinidadDialogFilter</filter-name>
        <filter-class>${managedBeansPackage}.TrinidadDialogFilter</filter-class>
    </filter>    
    <filter-mapping>
        <filter-name>TrinidadDialogFilter</filter-name>
        <url-pattern>/__ADFv__</url-pattern>
    </filter-mapping>

    <!-- ************************ Trinidad Config **************************** -->
    <!-- Trinidad has its own ViewHandler, which is a "decorating"
         view handler - for example, it needs to wrap methods like renderView()
         to perform some extra pre- and post-handling.  Facelets, on the other
         hand, is more of a true ViewHandler - it actually implements
         renderView() (yeah, it decorates too, but forget about that
         for a second).  As a result, the world is a better place if
         the Trinidad ViewHandler runs around the Facelets ViewHandler.
         But since Facelets is registered in WEB-INF/faces-config.xml,
         and Trinidad's is registered from META-INF/faces-config.xml in its
         JAR, exactly the opposite happens as per the JSF spec.

         Hence, the following config parameter, which Trinidad
         exposes (as of EA19) to allow pushing a ViewHandler inside
         of ours.  FWIW, you retain the entire delegation stack -
         just flipped around a bit - so that Facelets still decorates
         the standard ViewHandler, and therefore you've still got
         JSP support.
      -->
    <context-param>
        <!-- Maximum memory per request (in bytes) -->
        <param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_MEMORY</param-name>
        <param-value>$fileUploadMaxMemoryPerRequest</param-value>
    </context-param>
    <context-param>
        <!-- Maximum disk space per request (in bytes) -->
        <param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_DISK_SPACE</param-name>
        <param-value>$fileUploadMaxDiskSpacePerRequest</param-value>
    </context-param>

#if($enableMyFacesDevelopmentSupport)
## to be reviewed, see https://issues.apache.org/jira/browse/TRINIDAD-1487
##    <context-param>
##        <description>
##            Enables an optimized strategy for caching some view state at an application level
##        </description>
##       <param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
##        <param-value>#if($enableMyFacesDevelopmentSupport) false#else true#end</param-value>
##    </context-param>
##
#end

#if($enableMyFacesDevelopmentSupport)
    <context-param>
        <description>
            Turn off the javascript obfuscation
        </description>
        <param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
        <param-value>${enableMyFacesDevelopmentSupport}</param-value>
    </context-param>

    <context-param>
        <description>
            If this parameter is enabled by setting to "true", Apache Trinidad will turn off
            automatic compression of style class names
        </description>
        <param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION</param-name>
        <param-value>${enableMyFacesDevelopmentSupport}</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.trinidadinternal.DISABLE_CONTENT_COMPRESSION</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <description>
            If this parameter is enabled by setting to "true", Apache Trinidad will automatically
            check the modification date of your JSPs and skinning CSS files, and discard saved
             state when they change;  this makes development easier,
             but adds overhead that should be avoided when your application
             is deployed
        </description>
        <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
        <param-value>${enableMyFacesDevelopmentSupport}</param-value>
    </context-param>
  
    <context-param>
        <param-name>org.apache.myfaces.trinidad.resource.DEBUG</param-name>
        <param-value>true</param-value>
    </context-param>
#end
    
#if ($useSeam)
    <context-param>
        <param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
        <param-value>org.jboss.seam.ui.facelet.SeamFaceletViewHandler</param-value>
        <!--param-value>com.sun.facelets.FaceletViewHandler</param-value-->
    </context-param>
#else
    <context-param>
        <param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
        <param-value>com.sun.facelets.FaceletViewHandler</param-value>
    </context-param>
#end
    <context-param>
        <param-name>org.apache.myfaces.trinidad.CACHE_VIEW_ROOT</param-name>
        <param-value>false</param-value>
    </context-param>
#end
#end

#if ($icefaces)

    <!-- ************************ ICEFaces Config **************************** -->

    <context-param>
        <param-name>com.icesoft.faces.compressResources</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>com.icesoft.faces.concurrentDOMViews</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>com.icesoft.faces.delegateNonIface</param-name>
        <param-value>true</param-value>
    </context-param>
    <!-- This  is used to pass parameters from the currrent portal request to the icefaces portlet
        (hopefully this won't be required at some point in the future) -->
    <context-param>
        <param-name>com.icesoft.faces.hiddenPortletAttributes</param-name>
        <param-value>CURRENT_URL THEME_DISPLAY COMPANY_ID LAYOUT RENDER_PORTLET USER_ID</param-value>
    </context-param>

    <context-param>
        <param-name>com.icesoft.faces.synchronousUpdate</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <param-name>com.icesoft.faces.uploadDirectoryAbsolute</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <param-name>com.icesoft.faces.uploadMaxFileSize</param-name>
        <param-value>10485760</param-value>
    </context-param>
    <context-param>
        <param-name>com.icesoft.faces.connectionTimeout</param-name>
        <param-value>$jsfUtils.calculateIcefacesTimeout($sessionTimeout)</param-value>
    </context-param>
#end

#if ($liferayPortlet)
    <context-param>
        <param-name>portlet_properties</param-name>
        <param-value>portlet-config.properties</param-value>
    </context-param>

#end  

#if ($enableOds)
    <!-- ODS export filter -->
    <filter>
        <filter-name>ODSFilter</filter-name>
        <filter-class>${managedBeansPackage}.ODSFilter</filter-class>
    </filter>    
    <filter-mapping>
        <filter-name>ODSFilter</filter-name>
        <url-pattern>*.${odsExportExtension}</url-pattern>
    </filter-mapping>    
#end
  
    <!-- ************************ Faces Servlet Mapping **************************** -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </servlet-mapping>
        
#if ($enableOds)
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.${odsExportExtension}</url-pattern>
    </servlet-mapping>
#end    
        
    <!--
    <servlet>
        <servlet-name>File Download Servlet</servlet-name>
        <servlet-class>${managedBeansPackage}.FileDownloadServlet</servlet-class>
        <load-on-startup>3</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>File Download Servlet</servlet-name>
        <url-pattern>/fileDownload/*</url-pattern>
    </servlet-mapping>
    -->
#if ($standalone)
    <!-- resource loader servlet -->
    <!-- 
    <servlet>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <servlet-class>org.andromda.cartridges.jsf.JSFServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <url-pattern>/jsf/*</url-pattern>
    </servlet-mapping>  
    -->  

#if ($icefaces)
    <servlet>
        <servlet-name>Blocking Servlet</servlet-name>
        <servlet-class>com.icesoft.faces.webapp.xmlhttp.BlockingServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet>
        <servlet-name>File Upload Servlet</servlet-name>
        <servlet-class>com.icesoft.faces.component.inputfile.FileUploadServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--
    <servlet>
        <servlet-name>Persistent Faces Servlet</servlet-name>
        <servlet-class>com.icesoft.faces.webapp.xmlhttp.PersistentFacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    -->
    
    <!-- ************************ ICEFaces Resources Servlet **************************** -->
 
    <servlet-mapping>
        <servlet-name>Blocking Servlet</servlet-name>
        <url-pattern>/block/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>File Upload Servlet</servlet-name>
        <url-pattern>/uploadHtml</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.faces</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>/faces/*</url-pattern>
    </servlet-mapping>
    <!--
    <servlet-mapping>
        <servlet-name>Persistent Faces Servlet</servlet-name>
        <url-pattern>*.iface</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Persistent Faces Servlet</servlet-name>
        <url-pattern>/xmlhttp/*</url-pattern>
    </servlet-mapping>
    -->
#end

    <!-- ************************ Manual Servlets **************************** -->
    <!-- precompilation merge-point -->
    <!-- servlet merge-point -->  
    <!-- servlet-mapping merge-point -->
    <!-- listener merge-point -->
    
    <!-- ************************ Manual Filters **************************** -->
    <!-- filter merge-point -->
    <!-- filter-mapping merge-point -->
    
    <!-- ************************ Manual Merged Config **************************** -->
    <!-- context-param merge-point -->
    
    <!-- pretty-faces filter -->
    <!--
    <filter>
       <filter-name>Pretty Filter</filter-name>
       <filter-class>com.ocpsoft.pretty.PrettyFilter</filter-class>
    </filter>    
    <filter-mapping> 
        <filter-name>Pretty Filter</filter-name> 
        <url-pattern>/*</url-pattern> 
        <dispatcher>FORWARD</dispatcher> 
        <dispatcher>REQUEST</dispatcher> 
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    -->  
        
#if ($extension) 
    <!-- Extensions Filter -->
    <filter>
        <filter-name>MyFaces Extensions Filter</filter-name>
        <filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class> <!-- use by tomahawk -->
        <init-param>
            <description>
                Set the size limit for uploaded files.

                Format: 10 - 10 bytes
                        10k - 10 KB
                        10m - 10 MB
                        1g - 1 GB
            </description>
            <param-name>uploadMaxFileSize</param-name>
            <param-value>100m</param-value>
        </init-param>
        <init-param>
            <description>
                Set the threshold size - files
                below this limit are stored in memory, files above
                this limit are stored on disk.

                Format: 10 - 10 bytes
                        10k - 10 KB
                        10m - 10 MB
                        1g - 1 GB
            </description>
            <param-name>uploadThresholdSize</param-name>
            <param-value>100k</param-value>
        </init-param>
        <!--
        <init-param>
            <param-name>uploadRepositoryPath</param-name>
            <param-value>/temp</param-value>
            <description>Set the path where the intermediary files will be stored.</description>
        </init-param>
        -->
    </filter>

    <filter-mapping>
        <filter-name>MyFaces Extensions Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>MyFaces Extensions Filter</filter-name>
        <url-pattern>/faces/*</url-pattern>
    </filter-mapping>
        
    <!-- upload -->
    <context-param>
        <param-name>org.apache.myfaces.CHECK_EXTENSIONS_FILTER</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.DISABLE_TOMAHAWK_FACES_CONTEXT_WRAPPER</param-name>
        <param-value>true</param-value>
    </context-param>    
#end


#if ($standalone)
    <!--
#foreach ($useCase in $useCases)
#foreach ($view in $useCase.views)
#if ($view.populatorRequired)
    <filter>
        <filter-name>$view.fullyQualifiedPopulator</filter-name>
        <filter-class>$view.fullyQualifiedPopulator</filter-class>
    </filter>
#end
#end
#end

#foreach ($manageable in $manageables)
    <filter>
        <filter-name>$manageable.populatorType</filter-name>
        <filter-class>$manageable.populatorType</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>$manageable.populatorType</filter-name>
        <url-pattern>${manageable.viewFullPath}.${facesServletExtension}</url-pattern>
    </filter-mapping>
#end

#foreach ($useCase in $useCases)
#foreach ($view in $useCase.views)
#if ($view.populatorRequired)
    <filter-mapping>
        <filter-name>$view.fullyQualifiedPopulator</filter-name>
        <url-pattern>${view.path}.${facesServletExtension}</url-pattern>
    </filter-mapping>
#end
#end
#end
    -->
#if ($securityEnabled && !$roles.empty)
    <filter>
        <filter-name>User Role Filter</filter-name>
        <filter-class>${managedBeansPackage}.UserRoleFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>User Role Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>
#end        
#if ($securityEnabled)
#set ($logOutServlet = "${managedBeansPackage}.LogOutServlet")
    <servlet>
        <servlet-name>$logOutServlet</servlet-name>
        <servlet-class>$logOutServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>$logOutServlet</servlet-name>
        <url-pattern>/${logoutFileName}.${facesServletExtension}</url-pattern>
    </servlet-mapping>    
#end
#foreach ($useCase in $useCases)
    <!--
    <servlet>
        <servlet-name>$useCase.fullyQualifiedActionClassName</servlet-name>
        <servlet-class>$useCase.fullyQualifiedActionClassName</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>$useCase.fullyQualifiedActionClassName</servlet-name>
        <url-pattern>${useCase.path}#if($standalone).${facesServletExtension}#else.xhtml#end</url-pattern>
    </servlet-mapping>    
    -->
#end
#end
    <session-config>
        <session-timeout>$sessionTimeout</session-timeout>
        <!-- session-config merge-point -->
    </session-config>
    <!-- mime-type merge-point -->

    <!-- Welcome files -->
    <welcome-file-list>
        <!-- welcome-file-list merge-point -->
        <welcome-file>$welcomeFileName</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>408</error-code>
        <location>/index.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/403.jsp</location>
    </error-page>
    <error-page>
    	<error-code>404</error-code>
    	<location>/404.xhtml</location>
    </error-page>    
    <!-- error-page merge-point -->
    <!-- taglib merge-point -->
    <!-- resource-ref merge-point -->

#if ($standalone && !$applicationUseCases.empty)
#set($applicationUseCase = $applicationUseCases.iterator().next())
#end
#set ($useCases = $applicationUseCase.allUseCases)
    <security-constraint>
        <display-name>Restrict raw XHTML Documents</display-name>
        <web-resource-collection>
            <web-resource-name>Raw-JSF-Pages</web-resource-name>
            <description>
                Prevent access to raw pages that are for JSF pages.
                (No roles, so no direct access)
            </description>
            <url-pattern>*.${jsfUtils.viewExtension}</url-pattern>
###foreach ($useCase in $useCases)
###foreach ($view in $useCase.views)
##            <url-pattern>${view.path}.${jsfUtils.viewExtension}</url-pattern>
###end
###end
###foreach ($manageable in $manageables)
##            <url-pattern>${manageable.viewFullPath}.${jsfUtils.viewExtension}</url-pattern>
###end
        </web-resource-collection>
        <auth-constraint>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
#if ($securityEnabled)
##foreach ($useCase in $useCases)
#foreach ($applicationUseCase in $applicationUseCases)
#foreach ($useCase in $applicationUseCase.allUseCases)
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>$useCase.name resources</web-resource-name>
            <description>
                This collection secures all views and resources
                as well as the actions called in the "$useCase.name" use-case
            </description>
            <url-pattern>${useCase.pathRoot}/*</url-pattern>
        </web-resource-collection>
#if ($useCase.secured || ($stringUtils.isNotBlank($defaultRole) && !$useCase.registrationUseCase))
        <auth-constraint>
#if ($stringUtils.isNotBlank($defaultRole))
            <role-name>${defaultRole}</role-name>
#end
#foreach ($user in $useCase.roles)
            <role-name>$user.name</role-name>
#end
        </auth-constraint>
#end
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

#end
#end
#foreach ($manageable in $manageables)
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Manage ${manageable.name} resources</web-resource-name>
            <description>
                This collection secures all views and resources
                as well as the actions called in the "Manage ${manageable.name}" use-case
            </description>
            <url-pattern>${manageable.viewFullPath}.${facesServletExtension}</url-pattern>
        </web-resource-collection>
#if (!$manageable.roles.empty || $stringUtils.isNotBlank($defaultRole))
        <auth-constraint>
#if ($stringUtils.isNotBlank($defaultRole))
            <role-name>${defaultRole}</role-name>
#end
#foreach ($role in $manageable.roles)
            <role-name>${role.name}</role-name>
#end
        </auth-constraint>
#end
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

#end
    <login-config>
        <auth-method>$loginConfigAuthMethod</auth-method>
        <realm-name>$securityRealm</realm-name>
#if ($loginConfigAuthMethod == 'FORM')
        <form-login-config>
            <form-login-page>/${loginFileName}.${facesServletExtension}</form-login-page>
            <form-error-page>/${loginFileName}.${facesServletExtension}?action=error</form-error-page>
        </form-login-config>
#end
    </login-config>

#foreach ($user in $roles)
    <security-role>
        <role-name>$user.name</role-name>
    </security-role>
#end
#if ($stringUtils.isNotBlank($defaultRole))
    <security-role>
        <role-name>${defaultRole}</role-name>
    </security-role>
#end

    <!-- security-constraint merge-point -->
    <!-- security-role merge-point -->

#end
#end
</web-app>
