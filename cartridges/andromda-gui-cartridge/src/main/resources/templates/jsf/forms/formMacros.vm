##
##  This macro renders the backing list support for the form interface
##
#macro (renderBackingListSupport $field $ownerParameter)
#if ($field.labelListName)
#set ($getterField = $field.getterName)
#set ($labelListName = $field.labelListName)
#set ($valueListName = $field.valueListName)
#set ($backingListName = $field.backingListName)
#else
#set ($getterField = "${ownerParameter.getterName}().${field.getterName}")
#set ($labelListName = $field.getLabelListName($ownerParameter))
#set ($valueListName = $field.getValueListName($ownerParameter))
#set ($backingListName = $field.getBackingListName($ownerParameter))
#end
#set ($listType = "Object[]")
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListMethod = $stringUtils.capitalize($labelListName))

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @return $listType
     * @see #${getterField}()
     * @see #get${valueListMethod}()
     * @see #get${labelListMethod}()
     * @see #set${labelListMethod}(java.util.Collection,String,String)
     */
    public $listType get${backingListMethod}();

    /**
     * Convenient method to quickly set the value and label backing list for the
     * $field.name property. This method takes a collection of objects, as well as
     * the property names to query these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the $field.name backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>set${backingListMethod}(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #${getterField}()
     * @see #get${valueListMethod}()
     * @see #get${labelListMethod}()
     * @see #get${labelListMethod}()
     */
    public void set${backingListMethod}(java.util.Collection<? extends Object> items, String valueProperty, String labelProperty);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @return $listType
     * @see #${getterField}()
     * @see #get${backingListMethod}()
     */
    public $listType get${valueListMethod}();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @param $valueListName
     * @see #${getterField}()
     * @see #get${backingListMethod}()
     */
    public void set${valueListMethod}($listType $valueListName);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @return $listType
     * @see #${getterField}()
     * @see #get${backingListMethod}()
     */
    public $listType get${labelListMethod}();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @param $labelListName
     * @see #${getterField}()
     * @see #get${backingListMethod}()
     */
    public void set${labelListMethod}($listType $labelListName);
#end
##
##  This macro renders the backing value support for the form interface
##
#macro (renderBackingValueSupport $field $ownerParameter)
#if ($field.type.arrayType || $field.type.collectionType)
#if ($field.backingListName)
#set ($backingValueName = $field.backingValueName)
#else
#set ($backingValueName = $field.getBackingValueName($ownerParameter))
#end
#set ($backingValueMethod = $stringUtils.capitalize($backingValueName))

    /**
     * Provides the ability to set the backing value for the {@link #${field.getterName}()} input
     * table type.  This backing value provides all values that can be selected from.
     *
     * @param $backingValueName the backing value for ${field.name}.
     */
    public void set${backingValueMethod}($field.type.fullyQualifiedName $backingValueName);

    /**
     * Gets the backing value for @{link #${field.getterName}()}.  Backing values provide all
     * possible values for a input table type.
     */
    public $field.type.fullyQualifiedName get${backingValueMethod}();
#end
#end