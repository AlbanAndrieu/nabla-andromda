#set ($generatedFile = "${manageable.controllerFullPath}.java")
// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\crud\Controller.java.vsl) DO NOT EDIT!
package $manageable.manageablePackageName;

#if ($manageable.compositeIdentifier)
#set($identifierIsPrimitive = false)
#set($identifierIsIntegerType = false)
#set($identifierIsLongType = false)
#set($identifierIsStringType = false)
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#else
#set($theIdentifierType = $manageable.identifiers.iterator().next().type)
#set($identifierIsPrimitive = $theIdentifierType.primitive)
#set($identifierIsIntegerType = $theIdentifierType.integerType)
#set($identifierIsLongType = $theIdentifierType.longType)
#set($identifierIsStringType = $theIdentifierType.stringType)
#if($identifierIsPrimitive)
#set($identifierType = $theIdentifierType.wrapperName)
#else
#set($identifierType = $manageable.fullyQualifiedIdentifierTypeName)
#end
#end
/**
 * Java Server Faces Controller of the ${manageable.name} CRUD management.
 */
public abstract class ${manageable.controllerName}
    extends ${managedBeansPackage}.ControllerBase
{
    private static final org.apache.commons.logging.Log logger = org.apache.commons.logging.LogFactory.getLog(${manageable.controllerName}.class);

    /**
     * Initializes the controller, calling the doInit method
     *
     * @return the controller view path.
     */
    public String init()
    {
        this.resetUseCaseFormsAndPageVariables();

        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doInit(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
        return "${manageable.viewFullPath}";
    }

    /**
     * Initializes the controller. This method can be overridden.
     * @param form
     * @throws Exception
     */
    public void doInit(${manageable.formBeanType} form)
        throws Exception
    {

#foreach ($member in $manageable.manageableMembers)
#if(!$member.hidden)##isn't working the ($manageable.searchable($member))
        form.getSearchForm().${member.setterName}(null);
#end
#end

#if ($manageable.preload)
        @SuppressWarnings("unchecked")
        final java.util.List list = ${manageable.manageableServiceAccessorCall}.readAll();

        form.${manageable.listSetterName}(list);

#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
            saveMaxResultsWarning();

#end
#else
        form.${manageable.listSetterName}(null);

#end
#if (!$useAutocompleteLookup)
#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map<String,?> backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}BackingList((java.util.Collection)backingLists.get("${member.name}"));
#end
#end

#end
        form.setEditState(false);
    }

    /**
     * The instance load action.
     * @param event
     */
    public void load(javax.faces.event.ActionEvent event)
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doLoad(${identifierType}.valueOf(((javax.faces.component.UIParameter)event.getComponent().findComponent("${manageable.identifierName}")).getValue().toString()),form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
            resetAllEditableComponentsValues();
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }

    /**
     * Loads the selected instance.
     * @param id
     * @param form
     * @throws Exception
     */
    public void doLoad(${identifierType} ${manageable.identifierName}, ${manageable.formBeanType} form)
        throws Exception
    {
        final ${manageable.valueObjectClassName} vo=
            ${manageable.manageableServiceAccessorCall}.readById(${manageable.identifierName});

#foreach ($member in $manageable.manageableAttributes)
#if(!${member.inputFile})
        form.${member.setterName}(vo.${member.getterName}());
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}(vo.${member.getterName}());
#end

        form.setEditState(true);
    }

    /**
     * The cancel edit action
     *
     * @return the controller view path.
     */
    public String cancel()
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doCancel(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the edit cancel.
     * @param form
     * @throws Exception
     */
    public void doCancel(${manageable.formBeanType} form)
        throws Exception
    {
        form.setEditState(false);
    }

#if ($manageable.create)
    /**
     * The new instance action.
     *
     * @return the controller view path.
     */
    public String startNew()
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doStartNew(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the new instance action.
     * @param form
     * @throws Exception
     */
    public void doStartNew(${manageable.formBeanType} form)
        throws Exception
    {
## set all default attribute values
#foreach ($member in $manageable.manageableAttributes)
#set($memberType = $member.type)
#if ($member.defaultValuePresent)
#if ($memberType.dateType)
        form.${member.setterName}AsString("$member.defaultValue");
#els
        form.${member.setterName}($member.defaultValue);
#end
#else
#if ($memberType.primitive)
#if ($memberType.fullyQualifiedName == 'char')
        form.${member.setterName}(' ');
#elseif ($memberType.fullyQualifiedName == 'boolean')
        form.${member.setterName}(false);
#else
        form.${member.setterName}(0);
#end
#else
        form.${member.setterName}(null);
#end
#end
#end

#if (!$manageable.manageableAssociationEnds.empty)
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}(null);
#end
#end

#if (!$useAutocompleteLookup)
#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}BackingList((java.util.Collection)backingLists.get("${member.name}"));
#end

#end
#end
        form.setEditState(true);
    }
#end
#if ($manageable.create || $manageable.update)

    /**
     * The save instance action.
     *
     * @return the controller view path.
     */
    public String save()
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSave(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Saves instance action.
     * @param form
     * @throws Exception
     */
    public void doSave(${manageable.formBeanType} form)
        throws Exception
    {
#if ($manageable.create)
        if(form.${manageable.identifierGetterName}() == null#if(!$manageable.compositeIdentifier && ($identifierIsIntegerType || $identifierIsLongType)) || form.${manageable.identifierGetterName}()==0#end){
            form.${manageable.identifierSetterName}(
                ${manageable.manageableServiceAccessorCall}.create(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if ($member.name == $manageable.identifierName)
                    ${comma}null
#elseif ($member.inputFile)
                    ${comma}form.${member.getterName}()==null?null:org.apache.commons.io.IOUtils.toByteArray(form.${member.getterName}().getInputStream())
#else
                    ${comma}form.${member.getterName}()
#end
#set ($comma = ', ')
#end
                ).${manageable.identifierGetterName}()
            );
#if($crudConfirmationMessages)
            this.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.created", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end
        }
        else{
#end
            ${manageable.manageableServiceAccessorCall}.update(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if ($member.inputFile)
                ${comma}form.${member.getterName}()==null?null:org.apache.commons.io.IOUtils.toByteArray(form.${member.getterName}().getInputStream())
#else
                ${comma}form.${member.getterName}()
#end
#set ($comma = ', ')
#end
            );
#if($crudConfirmationMessages)
            this.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.changed", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end
#if ($manageable.create)
        }
#end
        if(form.${manageable.listGetterName}() != null) //only searches again if there was an old search
            doSearch(form); //search again to show the updated item (if it fits the search criteria)

        form.setEditState(false);
    }

#end
#if ($manageable.create)
    /**
     * The save and new instance action.
     *
     * @return the controller view path.
     */
    public String saveAndNew()
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSave(form);
                this.doStartNew(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }
#end

    /**
     * The search action.
     *
     * @return the controller view path.
     */
    public String search()
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSearch(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the search action.
     * @param form
     * @throws Exception
     */
    public void doSearch(${manageable.formBeanType} form)
        throws Exception
    {
        @SuppressWarnings("rawtypes")
        final java.util.List list;
        //if all search fields are null, call readAll()
        if (
#set ($and = '')
#foreach ($member in $manageable.manageableMembers)
#if(!$member.hidden)##isn't working the ($manageable.searchable($member))
#if($member.type.stringType)
            ${and} org.apache.commons.lang.StringUtils.isBlank(form.getSearchForm().${member.getterName}())
#elseif($member.type.collectionType)
            ${and} org.apache.commons.collections.CollectionUtils.isEmpty(form.getSearchForm().${member.getterName}())
#elseif($member.type.arrayType)
            ${and} org.apache.commons.lang.ArrayUtils.isEmpty(form.getSearchForm().${member.getterName}())
#else
            ${and} form.getSearchForm().#if($member.type.primitive && $member.type.booleanType)get${stringUtils.upperCamelCaseName($member.name)}#else${member.getterName}#end() == null
#end
#set ($and = '&&')
#end
#end
            )
            list=${manageable.manageableServiceAccessorCall}.readAll();
        else
            list = ${manageable.manageableServiceAccessorCall}.read(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if(!$member.hidden)##isn't working the ($manageable.searchable($member))
                ${comma}form.getSearchForm().#if($member.type.primitive && $member.type.booleanType)get${stringUtils.upperCamelCaseName($member.name)}#else${member.getterName}#end()
#else
                ${comma}null
#end
#set ($comma = ', ')
#end
            );

        form.${manageable.listSetterName}(list);
#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
            saveMaxResultsWarning();
#end

#if (!$useAutocompleteLookup)
#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map<String,?> backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}BackingList((java.util.Collection)backingLists.get("${member.name}"));
#end
#end

#end
        form.setEditState(false);
    }

#if ($manageable.delete)
    /**
     * The delete event.
     * @param event
     */
    public void delete(javax.faces.event.ActionEvent event)
    {
        try
        {
            final ${manageable.formBeanType} form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doDelete(${identifierType}.valueOf(((javax.faces.component.UIParameter)event.getComponent().findComponent("${manageable.identifierName}")).getValue().toString()),form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(${managedBeansPackage}.Messages.get(messageKey, null));
            }
            resetAllEditableComponentsValues();
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }

    /**
     * Deletes the selected instance.
     * @param id
     * @param form
     * @throws Exception
     */
    public void doDelete(${identifierType} ${manageable.identifierName}, ${manageable.formBeanType} form)
        throws Exception
    {
        ${manageable.manageableServiceAccessorCall}.delete(new ${identifierType}[]{${manageable.identifierName}});
#if($crudConfirmationMessages)
        this.addInfoMessage(${managedBeansPackage}.Messages.get("manageable.entity.deleted", new Object[]{${managedBeansPackage}.Messages.get("${manageable.messageKey}")}));
#end

        doSearch(form);
    }

#end
#if ($manageable.maximumListSize > 0)
    /**
     * Shows a message warning the user can exists more records available.
     */
    private void saveMaxResultsWarning()
    {
        addWarningMessage(${managedBeansPackage}.Messages.get("maximum.results.fetched.warning", new Object[]{String.valueOf("${manageable.maximumListSize}")}));
    }

#end
#if ($enableOds)
    /**
     * Export as ODS spreadsheet
     * @return ${manageable.odsExportFullPath}
     */
    public String odsExport()
    {
        return "${manageable.odsExportFullPath}";
    }
#end
#if ($useAutocompleteLookup)
    /**
     * Helper method to fill the autocomplete component list.
     * @param event
     */
    public void fillAutocomplete(javax.faces.event.ActionEvent event)
    {
        final javax.faces.context.FacesContext facesContext = this.getContext();
        final java.util.Map<String,String> parameters = facesContext.getExternalContext().getRequestParameterMap();
        final Object fieldValue = parameters.get(this.getParameterValue("searchFieldRequestParamName",event));
        try{
            @SuppressWarnings("rawtypes")
            final java.util.List list = ${manageable.manageableServiceAccessorCall}.read(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if($member.name == $manageable.displayAttribute.name)
#if($member.type.stringType)
                ${comma}(fieldValue==null || fieldValue.toString().length() == 0) ? null : fieldValue.toString()
#else
#if($member.type.primitive)
                ${comma}(fieldValue==null || fieldValue.toString().length() == 0) ? null : ${member.type.wrapperName}.valueOf(fieldValue.toString())
#elseif($member.type.enumeration)
                ${comma}(fieldValue==null || fieldValue.toString().length() == 0) ? null : ${member.type.fullyQualifiedName}.fromString(fieldValue.toString())
#else
                ${comma}(fieldValue==null || fieldValue.toString().length() == 0) ? null : ${member.type.fullyQualifiedName}.valueOf(fieldValue.toString())
#end
#end
#else
                ${comma}null
#end
#set ($comma = ', ')
#end
            );
            final javax.faces.el.ValueBinding vb = facesContext.getApplication().createValueBinding("#{autocompleteResult}");
            vb.setValue(facesContext, list);
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }
#end
    /**
     * Loads an instance of ${manageable.Name}.
     *
     * @return ${manageable.valueObjectClassName} from the loaded entity.
     */
    static public ${manageable.valueObjectClassName} load(${identifierType} ${manageable.identifierName})
    {
        if(#if(!$identifierIsPrimitive)${manageable.identifierName} == null ||#end #if(!$manageable.compositeIdentifier && $identifierIsStringType)org.apache.commons.lang.StringUtils.isBlank(${manageable.identifierName})#else${manageable.identifierName} == 0#end)
        {
            return null;
        }
        try
        {
            return ${manageable.manageableServiceAccessorCall}.readById(${manageable.identifierName});
        }
        catch(Exception e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Helper method to fill the select component list.
     *
     * @return a collection with the filtered list.
     */
    public java.util.Collection<javax.faces.model.SelectItem> getAsSelectItems()
    {
        final java.util.Collection<${manageable.valueObjectClassName}> vos;
        try {
            vos = ${manageable.manageableServiceAccessorCall}.readAll();
        } catch (final Throwable throwable) {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
            return null;
        }
        final java.util.Collection<javax.faces.model.SelectItem> result=new java.util.ArrayList<javax.faces.model.SelectItem>(vos.size());
        for(${manageable.valueObjectClassName} vo: vos){
            result.add(new javax.faces.model.SelectItem(vo.${manageable.identifierGetterName}(),org.apache.commons.lang.ObjectUtils.toString(vo.get$stringUtils.upperCamelCaseName($manageable.displayAttribute.name)())));
        }
        return result;
    }

    /** manageTaskForm */
    public static final String FORM_BEAN_NAME="${manageable.formBeanName}";

    /**
     * Resolves "${manageable.formBeanName}".
     *
     * @return the manageable form.
     */
    public ${manageable.formBeanType} getForm()
    {
        final java.util.Map<String,Object> forms=getForms();
        ${manageable.formBeanType} form=(${manageable.formBeanType})forms.get(FORM_BEAN_NAME);
        if(form == null){
            form = new ${manageable.formBeanType}();
            forms.put(FORM_BEAN_NAME,form);
        }
        return form;
    }

    // crud-controller merge-point
}
