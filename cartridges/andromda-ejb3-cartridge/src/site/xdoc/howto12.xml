<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AndroMDA - EJB3 - Service Patterns</title>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
    </properties>
    <body>
        <section name="Service Patterns">
            <p>
                Patterns are the problem/solution pairs to enable reuse of software designs and techniques.
                There are probably many differing software design patterns we all use regularly, some without
                even knowing.  Here we focus on the <i>Service Locator</i> and <i>Service Delegate</i> design
                patterns.
            </p>
            <a name="Service_Locator"/>
            <subsection name="Service Locator">
                <p>
                    The J2EE pattern
                </p>
                <p>
                    <i>
                        Use a Service Locator object to abstract all JNDI usage and to hide the complexities of
                        initial context creation, EJB home object lookup, and EJB object re-creation.  Multiple
                        clients can reuse the Service Locator object to reduce code complexity, provide a single
                        point of control, and improve performance by providing caching facility.
                    </i>
                </p>
                <p>
                    The Service Locator provides and caches the <code>InitialContext</code> and simplifies
                    access to the session bean remote interface using the remote JNDI name lookup.  It does also
                    provides the facility to get the local interface.
                </p>
            </subsection>
            <a name="Service_Delegate"/>
            <subsection name="Service Delegate">
                <p>
                    When a client or the presentation tier requires access to the business tier, it makes use of
                    the <i>Business Delegate</i> pattern.  Business Delegates, or Service Delegates here, use
                    the Service Locator object to locate business components.  This provides loose coupling and
                    increased manageability from the client/web tier to the business tier.
                </p>
                <p>
                    Until web containers provide the means to inject session beans within their processing context,
                    the best way to invoke business logic is via service delegates.
                </p>
                <p>
                    The EJB3 cartridges cuts down the service delegates which references the service locator
                    and provides the ability to invoke all available methods on the appropriate view interface of
                    the session bean.
                </p>
                <p>
                    The following example is taken directly from the <a href="howto7.html">exception howto</a>.
                    Only the relevant files are referenced here.
                </p>
                <p>
                    <img src="images/org/andromda/test/7/a/uml.gif" alt="images/org/andromda/test/7/a/uml.gif"/>
                </p>
                <ul>
                    <li class="gen">Auto-generated source that does not need manual editing</li>
                    <li class="impl">Auto-generated source that should be edited manually</li>
                    <li class="changed">File that is affected by the modifications applied in this section</li>
                </ul>
                <ul>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/ServiceLocator.java"><code>ServiceLocator.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto7/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto7/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/ServiceDelegateBase.java"><code>ServiceDelegateBase.java</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto7/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></li>
                    <li class="impl"><a href="howto/org/andromda/test/howto7/a/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto7/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto7/a/RentalException.java"><code>RentalException.java</code></a></li>
                </ul>
                <p>
                    The following is an example of how you can use the Service Delegate 
                    <code>RentalServiceDelegate</code> above in a client or in the web tier.
                </p>
                <p>
<source><![CDATA[
        Properties prop = new Properties();
        prop.put("java.naming.factory.initial", "org.jnp.interfaces.NamingContextFactory");
        prop.put("java.naming.factory.url.pkgs", "org.jboss.naming:org.jnp.interfaces");
        prop.put("java.naming.provider.url", "localhost:1099");

        RentalServiceDelegate manager = new RentalServiceDelegate(prop);
        try
        {
            manager.getCustomersByName("john");
        }
        catch (RentalException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally
        {
            if (manager != null)
            {
                manager.close();
            }
        }
]]></source>
                </p>
                <p>
                    In circumstance where you have manageable entities, a <code>ManageableServiceLocator</code>
                    class will also be generated with similar logic as the <code>ServiceLocator</code>
                    class, except it used the remote interface of the manageable service bean.
                </p>
            </subsection>
            <a name="Further_Reading"/>
            <subsection name="Further Reading">
                <p>
                    http://java.sun.com/blueprints/corej2eepatterns/Patterns/ServiceLocator.html
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                To find out how you can use interceptors in entity, session and message-driven beans,
                click <a href="howto13.html">here</a>.
            </p>
        </section>
    </body>
</document>
