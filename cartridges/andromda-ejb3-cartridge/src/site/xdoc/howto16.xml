<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AndroMDA - EJB3 - Manageable Entities</title>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
    </properties>
    <body>
        <section name="Manageable Entities">
            <p>
                Manageable entities provide CRUD facilities and a front-end view to managing
                entities.  The EJB3 cartridge follows the same rules as in
                <a href="http://docs.andromda.org/andromda-cartridges/manageable-entities/index.html">
                manageable entities</a>.
            </p>
            <p>
                There is very little you actually need to do.  Just make sure you have the <![CDATA[<<Manageable>>]]>
                stereotype modeled on all entities that require CRUD features and their associated
                entities and the cartridge will take care of everything else.  The following illustrates
                how we introduce manageable entities into our long-running example.  Since manageable
                entities are driven via a web/console front-end, the example lists files from both the
                EJB 3.0 persistence layer and the Struts (using BPM4Struts) web layer.
            </p>
            <p>
                <img src="images/org/andromda/test/16/a/uml.gif" alt="images/org/andromda/test/16/a/uml.gif"/>
            </p>
            <ul>
                <li class="gen">Auto-generated source that does not need manual editing</li>
                <li class="impl">Auto-generated source that should be edited manually</li>
                <li class="changed">File that is affected by the modifications applied in this section</li>
            </ul>
            <p>
                The EJB 3.0 related files are listed below.  The <code>ManageableServiceLocator</code> is used by the
                Struts <b>Action</b> classes in much the same way as the <code>ServiceLocator</code> is used
                by the Service Delegates.  Notice how the <code>CarManageableService</code> and
                <code>PersonManageableService</code> beans are defined int the <code>ejb-jar.xml</code> and 
                <code>jboss.xml</code> deployment descriptors.
            </p>
            <ul>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto16/a/Car.java"><code>Car.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/CarType.java"><code>CarType.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/CarDao.java"><code>CarDao.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto16/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/CarDaoException.java"><code>CarDaoException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/Person.java"><code>Person.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/PersonDao.java"><code>PersonDao.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto16/a/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/PersonDaoException.java"><code>PersonDaoException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/ServiceDelegateBase.java"><code>ServiceDelegateBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/howto16/a/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/howto16/a/RentalException.java"><code>RentalException.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/ServiceLocator.java"><code>ServiceLocator.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/ManageableServiceLocator.java"><code>ManageableServiceLocator.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/META-INF/ejb-jar.xml"><code>ejb-jar.xml</code></a></li>
                <li class="gen"><a href="howto/META-INF/jboss.xml"><code>jboss.xml</code></a></li>
            </ul>
            <p>
                The CRUD related files are listed below.  The EJB3 cartridge introduces the 4 CRUD related application
                exceptions for every entity.  The web tier doesn't explicitly catch these exception, but perhaps
                will be available down the track.  Take a look at the <code>CarManageableServiceBase</code> and
                <code>PersonManageableServiceBase</code> bean implementations to understand the business logic
                for implementing EJB 3.0 CRUD operations.
            </p>
            <ul>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarCreateManageableException.java"><code>CarCreateManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarDeleteManageableException.java"><code>CarDeleteManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarReadManageableException.java"><code>CarReadManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarUpdateManageableException.java"><code>CarUpdateManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarManageableService.java"><code>CarManageableService.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarManageableServiceBase.java"><code>CarManageableServiceBase.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/CarForm.java"><code>CarForm.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/ManageCar.java"><code>ManageCar.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/car_help.jsp"><code>car_help.jsp</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/car_crud.jsp"><code>car_crud.jsp</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonCreateManageableException.java"><code>PersonCreateManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonDeleteManageableException.java"><code>PersonDeleteManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonReadManageableException.java"><code>PersonReadManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonUpdateManageableException.java"><code>PersonUpdateManageableException.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonManageableService.java"><code>PersonManageableService.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonManageableServiceBase.java"><code>PersonManageableServiceBase.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/PersonForm.java"><code>PersonForm.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/ManagePerson.java"><code>ManagePerson.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/person_help.jsp"><code>person_help.jsp</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/howto16/a/crud/person_crud.jsp"><code>person_crud.jsp</code></a></li>
            </ul>
            <p>
                For further information on manageable entities, visit
                <a href="http://docs.andromda.org/andromda-cartridges/manageable-entities/index.html">
                manageable entities</a> for AndroMDA.
            </p>
            <a name="Manageable_Entities_Security"/>
            <subsection name="Security">
                <p>
                    In most cases, you probably want to secure access to the manageable front end.  To secure your
                    application follow the <a href="howto8.html">security</a> section.  The following
                    additional changes will aid you to secure your manageable entities using the EJB3
                    cartridge.
                </p>
                <ul>
                    <li>
                        Make sure you have also enabled the <code>securityRealm</code> property in
                        the <code>bpm4struts</code> namespace of your andromda.xml application descriptor.
                        This is on top of the <code>securityRealm</code> property in your
                        <code>ejb3</code> namespace section.
                    </li>
                    <li>
                        <p>
                            You must have the actor dependencies modeled on the manageable entities for the
                            actors (representing roles/groups) that are authorised access to the
                            DAO and manageable service layers.
                        </p>
                        <p>
                            Typically, only administrators have access to manageable entities.  Therefore, as a
                            bare minimum, you can have an actor (i.e. Admin) with a dependency to the 
                            manageable entity.  This will generate the security constraints in the DAO service
                            layer and provide the web front end cartridge with the role information.
                        </p>
                        <p>
                            The EJB3 cartridge has introduced a namespace property called 
                            <code><a href="namespace.html#manageableRolesAllowed">manageableRolesAllowed</a></code>.
                            You must set this within your <code>ejb3</code> namespace section of your
                            <code>andromda.xml</code> descriptor file.  This property takes the comma separated
                            list of roles that are authorised to access the manageable entity services.
                        </p>
                        <p>
                            In the trivial case where you only have the <b>Admin</b> actor/role, you will also
                            define this property as:
<source><![CDATA[
<namespace name="ejb3">
    <properties>
        ...
        <property name="manageableRolesAllowed">Admin</property>
        ...
    </properties>
</namespace>
]]></source>
                            However, when the application complexity requires several actor dependencies to
                            entities, you have the flexibility to narrow the suitable actors/roles
                            that have access to manageable entities, by specifying the
                            <code>manageableRolesAllowed</code> namespace property.
                        </p>
                    </li>
                    <li>
                        <p>
                            Finally, the web.xml security and role elements will not be rendered unless you have
                            modeled a front end application use case with the appropriate actor associations.
                            Every use case must have one associated activity diagram.  For the most trivial
                            application, this activity diagram would consist of an initial state with a 
                            transition to a front end view action state.  The generated JSP allows you to
                            provide a 'cover' page for your manageable entity component pages.
                        </p>
                    </li>
                </ul>
            </subsection>
            <a name="Manageable_Entities_Tips"/>
            <subsection name="Tips">
                <p>
                    You should assign one attribute of every manageable entity as a <i>unique</i> attribute.  This is
                    achieved by modeling the <![CDATA[<<Unique>>]]> stereotype on the attribute.  As a result, it
                    will display the unique attribute value for foreign key reference columns when listing entities, 
                    rather than the complete target entity property name-value pairs.
                </p>
                <p>
                    By assigning a unique manageable entity attribute, the <code>readAll</code> method of the 
                    manageable service base implementation avoids the use of <code>left join fetch</code> to
                    retrieve collection association objects.
                </p>
                <p>
                    Be aware that manageable entities are currently available with the BPM4Struts cartridge only.
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                Next you can learn about caching and clustering, click <a href="howto17.html">here</a>.
            </p>
        </section>
    </body>
</document>
