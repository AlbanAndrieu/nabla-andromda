<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AndroMDA - EJB3 - HowTo Security</title>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
    </properties>
    <body>
        <section name="Declarative Security">
            <p>
                The JAAS security framework, in JBoss (JBossSX) or other EJB containers provides authentication 
                and authorization for components in EJB 3.0 applications.
                The EJB3 cartridge supports declarative role based security for this security framework.
            </p>
            <p>
                Currently, the EJB3 cartridge uses metadata annotations to declare security related information.
                It would just as easy to swap this information to the deployment descriptor to setup the
                security policies.
            </p>
            <a name="Configuration"/>
            <subsection name="Configuration">
                <p>
                    Enabling security for the EJB3 cartridge is similar to the EJB/hibernate cartridges.  All that
                    is required is to uncomment the <a href="namespace.html#securityRealm">securityRealm</a> 
                    property in your AndroMDA build configuration (andromda.xml).  The <code>ejb3</code>
                    namespace section will look something like the following.
<source><![CDATA[
        <namespace name="ejb3">
            <properties>
                ...
                <!-- uncomment to enable EJB security -->
                <property name="securityRealm">${application.id}</property>
                ...
            </properties>
        </namespace>
]]></source>
                </p>
                <p>
                    Once you have done that, the cartridge will create the <code>login-config.xml</code> and
                    and <code>login-service.xml</code> deployment descriptors for JBoss.  
                    Both files are generated to the ear <code>META-INF</code> directory.  The
                    <code>login-config.xml</code> will look like:
<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<policy>
    <application-policy name="howtomodel">
        <authentication>
            <login-module code="org.jboss.security.auth.spi.DatabaseServerLoginModule"
                          flag="required">
                <module-option name="debug">true</module-option>
                <module-option name="unauthenticatedIdentity">guest</module-option>
                <module-option name="dsJndiName">java:/jdbc/howtomodel</module-option>
                <module-option name="principalsQuery">
                    SELECT PASSWORD 'Password' FROM principal WHERE BINARY PRINCIPAL_ID =?
                </module-option>
                <module-option name="rolesQuery">
                    SELECT ROLE 'Roles', ROLE_GROUP 'RoleGroups' FROM role WHERE BINARY PRINCIPAL_ID =?
                </module-option>
                <!-- uncomment to enable MD5 and BASE64 hash encoding
                <module-option name="hashAlgorithm">MD5</module-option>
                <module-option name="hashEncoding">BASE64</module-option>
                -->
            </login-module>
        </authentication>
    </application-policy>
</policy>
]]></source>
                    The <code>login-service.xml</code> loads the login module from <code>login-config.xml</code>,
                    making sure the <code>LoginConfigService</code> and <code>SecurityManagerService</code>
                    services are running before the new login module is activated.
                </p>
                <p>
                    These 2 files are generated the first time the security realm is enabled.  They will not be
                    overridden.  For example, you can modify these files to prevent the queries checking for
                    case sensitivity by removing the <b>BINARY</b> in the <i>where</i> clauses.
                </p>
                <p>
                    JBoss will load the MBean service configured in <code>login-service.xml</code> by
                    specifying this service in the <code>jboss-app.xml</code> deployment descriptor.  The EJB3
                    cartridge will do this for you, so you don't have to worry about it.  It will add the 
                    following:
<source><![CDATA[
    ...
    <module>
        <service>META-INF/howtomodel-login-service.xml</service>
    </module>
    ...
]]></source>
                </p>
                <p>
                    The cartridge will also create an <code>auth.conf</code> file in <i>./app/src/main/config</i>.
                    You will need this file if your client is outside of the server JVM to be able to authenticate
                    your credentials.  This file needs to be in your classpath when you run your external
                    client.
<source><![CDATA[
howtomodel {
   // jBoss LoginModule
   org.jboss.security.ClientLoginModule  required
   ;
};
]]></source>
                    You can use something like so to locate your auth.conf file from the your standalone client.
<source><![CDATA[
System.setProperty("java.security.auth.login.config", "./auth.conf");
]]></source>
                    Alternatively, when running from the command line, specify the -D arg option.
                </p>
                <p>
                    Remember that you will need to create your table schema corresponding to the authentication
                    policy defined in login-config.xml.  The DDL would look something like the following if you
                    were using MySQL:
<source><![CDATA[
create table principal 
(
PRINCIPAL_ID varchar(64) not null default '', 
PASSWORD varchar(64) default NULL, 
PRIMARY KEY(PRINCIPAL_ID)
);

create table role
(
PRINCIPAL_ID varchar(64) not null default '', 
ROLE varchar(64) default NULL, ROLE_GROUP varchar(64) default NULL, 
PRIMARY KEY(PRINCIPAL_ID)
);
]]></source>
                    
                </p>
            </subsection>
            <a name="Modeling"/>
            <subsection name="Modeling">
                <p>
                    Now you have to define some roles for your application. This is simply done by adding actors 
                    to your model named with the role's name.
                </p>
                <p>
                    <img src="images/org/andromda/test/8/a/uml.gif" alt="images/org/andromda/test/8/a/uml.gif"/>
                </p>
                <p>
                    The next thing to do is to draw a dependency from a logical role actor to a 
                    <![CDATA[<<Service>>]]> and/or to one or more methods of the service. 
                    Making the whole service dependent on an actor grants the 
                    role access to all service operations. To grant access to single operation(s) draw the dependency 
                    from the actor to the operations(s).
                </p>
                <p>
                    Defining security roles is purely optional.  If no roles have been specified, then the bean
                    operations do not pass any security instructions.
                </p>
                <p>
                    <img src="images/org/andromda/test/8/b/uml.gif" alt="images/org/andromda/test/8/b/uml.gif"/>
                </p>
                <ul>
                    <li class="gen">Auto-generated source that does not need manual editing</li>
                    <li class="impl">Auto-generated source that should be edited manually</li>
                    <li class="changed">File that is affected by the modifications applied in this section</li>
                </ul>
                <ul>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></li>
                    <li class="impl"><a href="howto/org/andromda/test/howto8/b/Car.java"><code>Car.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/CarType.java"><code>CarType.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/CarDao.java"><code>CarDao.java</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                    <li class="impl"><a href="howto/org/andromda/test/howto8/b/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/CarDaoException.java"><code>CarDaoException.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/Person.java"><code>Person.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/PersonDao.java"><code>PersonDao.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></li>
                    <li class="impl"><a href="howto/org/andromda/test/howto8/b/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/PersonDaoException.java"><code>PersonDaoException.java</code></a></li>
                    <li class="impl"><a href="howto/org/andromda/test/howto8/b/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/ServiceDelegateBase.java"><code>ServiceDelegateBase.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/RentalServiceException.java"><code>RentalServiceException.java</code></a></li>
                    <li class="gen"><a href="howto/org/andromda/test/howto8/b/RentalException.java"><code>RentalException.java</code></a></li>
                    <li class="gen"><a class="changed" href="howto/META-INF/ejb-jar.xml"><code>ejb-jar.xml</code></a></li>
                    <li class="gen"><a class="changed" href="howto/META-INF/jboss.xml"><code>jboss.xml</code></a></li>
                    <li class="gen"><a href="howto/META-INF/persistence.xml"><code>persistence.xml</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/auth.conf"><code>auth.conf</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/jboss-app.xml"><code>jboss-app.xml</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/howtomodel-login-config.xml"><code>howtomodel-login-config.xml</code></a></li>
                    <li class="gen"><a class="changed" href="howto/org/andromda/test/howto8/b/howtomodel-login-service.xml"><code>howtomodel-login-service.xml</code></a></li>
                </ul>
                <p>
                    Take a look at the <code>RentalServiceBean</code> class.  You will notice a 
                    <code>RolesAllowed</code> annotation at the top level of the class as well as on each
                    operation of the service bean.  The <code>RolesAllowed</code> annotation is a list of security
                    role names mapped to security roles allowed to execute the annotated method or all methods if
                    specified at the class level.
                </p>
                <p>
                    The EJB3 cartridge provides a couple of extra security related tagged values.  The
                    <code>andromda_service_security_denyAll</code> tagged value which can be assigned on
                    a session bean operation which specifies that no roles are permitted to execute that operation.
                    If modeled on the session bean class and set to true, then no roles are permitted to 
                    execute all of the operations in that session bean.  This tag overrides any roles specified
                    using actor dependencies.
                </p>
                <p>
                    Inversely, the <code>andromda_service_security_permitAll</code> tagged value, if set to true
                    on a session bean operation, implies that all roles are permitted to execute that operation.
                    If modeled on the session bean class and set to true, then all roles are permitted to execute
                    all opeations in that session bean.  This tag overrides any roles specified usin actor
                    dependencies.
                </p>
                <p>
                    In any of the cases above, method permissions that have been specified on a method of
                    a bean will override the method permission value specified on the class itself.
                </p>
                <p>
                    To specify the <code>RunAs</code> metadata annotation and explicitly specify the caller's
                    security identity used for the execution of the bean method, you simply need to model 
                    the <![CDATA[<<RunAs>>]]> stereotype on the actor role.  This will imply the identity of
                    the actor applies a run-as identity to the bean when making calls.  The actor's name or
                    corresponding <code>andromda_role_name</code> tagged value contains the logical role name.
                    The run-as identity is only applicable to actor-bean dependency.  It cannot be applied
                    to bean operations.  The run-as idendity is particularly useful for message driven beans where
                    the security identity for the execution of the <code>onMessage</code> callback needs to be set.
                </p>
                <p>
                    Finally, the above diagram also illustrates how dependencies can be modeled from actors to
                    entities.  This creates corresponding security infrastructure in the entity DAO components.
                    <a href="howto19.html">DAO objects</a> are generated for every entity to expose CRUD API
                    via stateless session beans.  Since your session facade business layer used the DAO components
                    layer, you need to propogate the security constraints through the DAO layer.  Have a look at
                    <code>CarDaoBase.java</code>.  It contains the <code>@RolesAllowed</code> annotation to declare
                    that the <code>MANAGER</code> and <code>ASSISTANT</code> roles require access to all
                    operations within the DAO.
<source><![CDATA[
@javax.annotation.security.RolesAllowed({"ASSISTANT", "MANAGER"})
]]></source>
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                We cover entity inheritance in the following section so click <a href="howto9.html">here</a> to go to 
                that section.
            </p>
        </section>
    </body>
</document>
