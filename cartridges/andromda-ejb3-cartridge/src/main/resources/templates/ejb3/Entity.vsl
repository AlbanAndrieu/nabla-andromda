#if ($umlUtils.shouldOutput($entity))
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by Entity.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Generated by Entity.vsl in andromda-ejb3-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedEntityName,'.','/')}.java")

##set ($identifier = $entity.identifiers.iterator().next())
/**
 * Autogenerated POJO EJB3 implementation class for ${entity.entityName}.
 *
 * Add any manual implementation within this class.  This class will NOT
 * be overwritten with incremental changes.
 *
$entity.getDocumentation(" * ")
 *
 */
#if ($entity.seamComponent)
//Uncomment because jboss embedded tests for UserServiceBean does not work with seam
@org.jboss.seam.annotations.Scope(org.jboss.seam.ScopeType.${entity.seamComponentScopeType})
@org.jboss.seam.annotations.Name("${entity.seamComponentName}")
#end
@javax.persistence.Entity
@javax.persistence.Table(name = "${entity.tableName}"## no new line
#if ($entity.embeddableSuperclass && $entity.dynamicIdentifiersPresent)
#**##set ($attributes = $entity.getInstanceAttributes(false, false))
#else
#**##set ($attributes = $entity.getInstanceAttributes(false, true))
#end
#if (!$attributes.empty)
##
## Only include identifier attributes if a composite primary key is NOT present
##
#set ($doAttribute = false)
#**##foreach ($attribute in $attributes)
#*  *##if ($entity.compositePrimaryKeyPresent && $attribute.identifier)
#*    *#
#*  *##elseif ($attribute.unique)
#*    *##set ($doAttribute = true)
#*  *##end
#**##end
#**##if ($doAttribute)
, uniqueConstraints = @javax.persistence.UniqueConstraint(columnNames = {## no new line
#**##foreach ($attribute in $attributes)
#*  *##if ($entity.compositePrimaryKeyPresent && $attribute.identifier)
#*    *##set ($doAttribute = false)
#*  *##else
#*    *##set ($doAttribute = true)
#*  *##end
#*  *##if ($doAttribute)
#if ($attribute.unique)
"$attribute.name"#if($velocityHasNext), #end## no new line
#end
#*  *##end
#**##end
})## no new line
#**##end
#end
)
#if ($entity.listenerEnabled)
@javax.persistence.EntityListeners({${entity.fullyQualifiedEntityListenerName}.class})
#else
// Uncomment to enable entity listener for ${entity.entityName}
// @javax.persistence.EntityListeners({${entity.fullyQualifiedEntityListenerName}.class})
#end
#if ($entity.cacheEnabled)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.${entity.cacheType})
#else
// Uncomment to enable caching for ${entity.entityName}
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.${entity.cacheType})
#end
#set ($finders = $entity.getQueryOperations(false))
#set ($entityIdVariable = $stringUtils.uncapitalize($entity.name).substring(0,1))
#if (!$finders.empty)
@javax.persistence.NamedQueries
({
#**##if ($entity.genericFinders && !$entity.finderFindAllExists)
    @javax.persistence.NamedQuery(name = "${entity.name}.findAll", query = "SELECT $entityIdVariable FROM ${entity.name} AS $entityIdVariable")#if (!$finders.empty),#end

#**##end
#**##foreach ($finder in $finders)
    @javax.persistence.NamedQuery(name = "${entity.name}.${finder.name}", query = "${finder.query}")#if($velocityCount != $finders.size()), #end

#**##end
})
#else
#**##if ($entity.genericFinders)
@javax.persistence.NamedQuery(name = "${entity.name}.findAll", query = "SELECT $entityIdVariable FROM ${entity.name} AS $entityIdVariable")#if (!$finders.empty),#end

#**##end
#end
public#if ($entity.abstract) abstract#end class ${entity.entityName}## no new line
 extends ${entity.fullyQualifiedEntityEmbeddableName}## no new line
 implements java.io.Serializable,## no new line
#if($entity.requiresGeneralizationMapping && !$entity.embeddableSuperclassGeneralizationExists)
 Comparable<${entity.generalization.fullyQualifiedName}>
#else
 Comparable<${entity.entityName}>
#end
{
    /**
     * The serial version UID of this class required for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

    // --------------- constructors -----------------

    /**
     * Default ${entity.name} constructor
     */
    public ${entity.entityName}()
    {
        super();
    }

## Autogenerate a constructor implementation with all attributes.
#set ($allAttributes = $transform.filterByVisibility($entity.allInstanceAttributes, "public"))
#if ($entity.syntheticCreateMethodAllowed && !$transform.filterUpdatableAttributes($allAttributes, $entity.compositePrimaryKeyPresent).empty)
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this/super class to the
     * values provided by the parameters.
     *
#**##foreach($attribute in $transform.filterUpdatableAttributes($allAttributes))
     * @param $attribute.name Value for the ${attribute.name} property
#**##end
     */
    public ${entity.entityName}($entity.getAttributesAsList($allAttributes, true, true, false))
    {
        super($entity.getAttributesAsList($allAttributes, false, true, false));
    }

#end
#set ($relations = $entity.allEntityRelations)
#if (!$relations.empty)
#**##if ($entity.syntheticCreateMethodAllowed)
#*  *##set ($updatableAttributes = $transform.filterUpdatableAttributes($allAttributes, $entity.compositePrimaryKeyPresent))
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
#*  *##foreach($attribute in $updatableAttributes)
     * @param $attribute.name Value for the ${attribute.name} property
#*  *##end
#*  *##foreach ($relation in $relations)
     * @param $relation.otherEnd.name Value for the ${relation.otherEnd.name} relation
#*  *##end
     */
    public ${entity.entityName}($entity.getAttributesAsList($allAttributes, true, true, false)#if(!$updatableAttributes.empty), #end#foreach ($relation in $relations)${relation.otherEnd.getterSetterTypeName} $relation.otherEnd.name#if($velocityCount != $relations.size()), #end#end)
    {
        super($entity.getAttributesAsList($updatableAttributes, false, true, false)#if(!$updatableAttributes.empty), #end#foreach ($relation in $relations)$relation.otherEnd.name#if($velocityCount != $relations.size()), #end#end);
    }

#**##end
#end
#foreach ($operation in $entity.getCreateMethods(true))
#**##set ($opArguments = $transform.getArgumentsAsList(${operation.argumentNames}))
    /**
     * Explicitly defined constuctor with specified args list.
$operation.getDocumentation("    * ")
#**##foreach($attribute in $opArguments)
     * @param $attribute Value for the $attribute property
#**##end
     */
    public ${entity.entityName}(${operation.typedArgumentList})
    {
        super(${operation.argumentNames});
    }

#end
#set ($operations = $entity.businessOperations)
#if (!$operations.empty)

    // -------------- Entity Methods -----------------

#**##foreach ($operation in $operations)
#*  *##if (!$operation.lifecycleCallback)
#*    *##set ($signature = $operation.signature)
#*    *##set ($visibility = $operation.visibility.toString())
#*    *##set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation("     * ")
     */
    @javax.persistence.Transient
    $visibility#if ($operation.static) static#end $returnType $signature## no new line
#*    *##if ($operation.exceptionsPresent)
 throws $operation.exceptionList
#*    *##end

    {
        // TODO put your implementation here.
#*    *##if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#*    *##else
        throw new UnsupportedOperationException("${entity.fullyQualifiedName}.${operation.signature} Not implemented!");
#*    *##end
    }

#*  *##end
#**##end
#end
#if (!$operations.empty)

    // --------------- Lifecycle callbacks -----------------

#**##foreach ($operation in $operations)
#*  *##if ($operation.lifecycleCallback)
    /**
$operation.getDocumentation("     * ")
     */
#*    *##if ($operation.prePersist)
    @javax.persistence.PrePersist
#*    *##elseif ($operation.postPersist)
    @javax.persistence.PostPersist
#*    *##elseif ($operation.preRemove)
    @javax.persistence.PreRemove
#*    *##elseif ($operation.postRemove)
    @javax.persistence.PostRemove
#*    *##elseif ($operation.preUpdate)
    @javax.persistence.PreUpdate
#*    *##elseif ($operation.postUpdate)
    @javax.persistence.PostUpdate
#*    *##elseif ($operation.postLoad)
    @javax.persistence.PostLoad
#*    *##end
    public void ${operation.name}()
    {
        // TODO put your lifecycle callback implementation here.
    }

#*  *##end
#**##end
#end
#renderCompareToMethod($entity $entity.entityName $entity.identifiers)
}
#end
