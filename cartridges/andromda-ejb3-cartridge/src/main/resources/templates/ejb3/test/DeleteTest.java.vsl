#if ($umlUtils.shouldOutput($entity) && !$entity.abstract)
#parse("templates/ejb3/Globals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by DefaultServiceException.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Generated by DefaultServiceException.vsl in andromda-ejb3-cartridge.
//
/**
 * Generated by DeleteTest.java.vsl in andromda-ejb3-cartridge on $umlUtils.date.
 */
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;

#end
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedName,'.','/')}DeleteTest.java")
import org.andromda.dbtest.JPAJUnitAncestor;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeClass;
import org.testng.Assert;

/**
 * TestNG Unit Test to delete the $entity.fullyQualifiedName Entity
 * Delete ${entity.tableName} row from ${entity.entityName} Entity
 */
public class ${entity.entityName}DeleteTest extends JPAJUnitAncestor
{
#set ($entityVariable = $stringUtils.uncapitalize($entity.entityName))
    /**
     * Deleting $entity.tableName record
     */
    @Test
    public void testDelete${entity.entityName}()
    {
        LOGGER.info("testDelete${entity.entityName}");
#if ($entity.compositePrimaryKeyPresent)
        $entity.fullyQualifiedEntityCompositePrimaryKeyName pk = ${entity.entityName}Create.createEntityPK(true);
#else
#set ($identifier = $entity.identifier)
#set ($constructor=$umlUtils.createConstructor($identifier, false, $entity))
        $identifier.type.fullyQualifiedName pk = $constructor;
#end
        $entity.entityName $entityVariable = this.em.find(${entity.entityName}.class, pk);
        if (${entityVariable}==null)
        {
            Assert.fail("$entity.entityName not found for Primary Key value: " + pk);
        }
        else
        {
            LOGGER.info("deleting $entity.entityName:" + $entityVariable);
            this.em.remove($entityVariable);
        }
    }

    private static Logger LOGGER = LogManager.getLogger(${entity.entityName}DeleteTest.class);
    /**
     * Add any custom code to be executed once before any tests are executed
     */
    @BeforeClass
    public void setUpBeforeClass()
    {
        super.setUpBeforeClass();
        // Override the ancestor logger
        setLOGGER(LOGGER);
    }

    /**
     * Add any custom code to be executed once after all tests are executed
     */
    @AfterClass
    public void tearDownAfterClass()
    {
        super.tearDownAfterClass();
        // Insert code here to be executed after tests are complete
    }

    /**
     * Add any custom code to be executed before each tests are executed
     */
    @Override
    @BeforeMethod
    public void setUp()
    {
        super.setUp();
    }

    /**
     * Add any custom code to be executed after each tests are executed
     */
    @Override
    @AfterMethod
    public void tearDown()
    {
        super.tearDown();
        super.closeAll();
    }

    /**
     * Unit test Constructor with no arguments
     */
    public ${entity.entityName}DeleteTest()
    {
        // Public no arg constructor
        this.entity = "$entity.entityName";
        this.table = "$entity.tableName";
    }

    /**
     * Unit test Constructor with test case name
     * @param name test case name
     */
    public ${entity.entityName}DeleteTest(final String name)
    {
        super(name);
        this.entity = "$entity.entityName";
        this.table = "$entity.tableName";
    }
}
#end
