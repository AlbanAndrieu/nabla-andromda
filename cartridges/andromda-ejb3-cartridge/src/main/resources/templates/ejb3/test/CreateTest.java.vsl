#if ($umlUtils.shouldOutput($entity) && !$entity.abstract)
#parse("templates/ejb3/Globals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by test/CreateTest.java.vsl in andromda-ejb3-cartridge on $umlUtils.date. -->
// Generated by test/CreateTest.java.vsl in andromda-ejb3-cartridge. -->
//
/**
 * Generated by CreateTest.java.vsl in andromda-ejb3-cartridge on $umlUtils.date.
 */
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
/**
 * Unit Test to Create and Validate the $entity.fullyQualifiedName Entity
 */
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedName,'.','/')}CreateTest.java")

import org.andromda.dbtest.JPAJUnitAncestor;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeClass;
import org.testng.Assert;

/**
 * Create ${entity.tableName} row from ${entity.entityName} Entity
 */
public class ${entity.entityName}CreateTest extends JPAJUnitAncestor
{
#set ($entityVariable = $stringUtils.uncapitalize($entity.entityName))
    /**
     * Creates ${entity.tableName} record
     */
    @Test
    public void testCreate${entity.entityName}()
    {
        // Delete all rows from table  - avoid duplicate PK error
        //this.deleteAll();
        this.em.getTransaction().begin();
        LOGGER.info("testCreate${entity.entityName}");
        $entity.fullyQualifiedName $entityVariable = ${entity.entityName}Create.createEntity();
        LOGGER.info("persisting ${entity.entityName}: " + $entityVariable);
        this.em.persist($entityVariable);
        this.em.getTransaction().commit();
        int results = this.logEntities();
        // Will also fail if all rows are not deleted during setUp
        Assert.assertEquals(1, results, "${entity.entityName} inserted but record not found");
    }

    private static Logger LOGGER = LogManager.getLogger(${entity.entityName}CreateTest.class);
    /**
     * Add any custom code to be executed once before any tests are executed
     */
    @BeforeClass
    public void setUpBeforeClass()
    {
        super.setUpBeforeClass();
        // Insert code here to be executed before any tests are run
    }

    /**
     * Add any custom code to be executed once after all tests are executed
     */
    @AfterClass
    public void tearDownAfterClass()
    {
        super.tearDownAfterClass();
        // Insert code here to be executed after tests are complete
    }

    /**
     * Add any custom code to be executed before each tests are executed
     */
    @Override
    @BeforeMethod
    public void setUp()
    {
        super.setUp();
    }

    /**
     * Add any custom code to be executed after each tests are executed
     */
    @Override
    @AfterMethod
    public void tearDown()
    {
        super.tearDown();
        super.closeAll();
    }

    /**
     * Unit test Constructor with no arguments
     */
    public ${entity.entityName}CreateTest()
    {
        super();
        // Public no arg constructor
        this.entity = "$entity.entityName";
        this.table = "$entity.tableName";
    }

    /**
     * Unit test Constructor with test case name
     * @param name test case name
     */
    public ${entity.entityName}CreateTest(final String name)
    {
        super(name);
        this.entity = "$entity.entityName";
        this.table = "$entity.tableName";
    }
}
#end
