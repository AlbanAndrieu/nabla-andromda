#parse("templates/ejb3/Globals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by AllEntities.java.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Generated by AllEntities.java.vsl in andromda-ejb3-cartridge.
//
## Just use the shortest Entity package, assume that's the top level package in the hierarchy
##set ($pkg = "org.andromda")
#set ($entityList = $entityUtils.sortEntities($entities, true))
#set ($entityReverseList = $entityUtils.sortEntities($entities, false))
#set ($pkg="0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789")
#foreach ($entity in $entityList)
#set ($entityPkg = $entity.packageName)
#if ($entityPkg.length() < $pkg.length())
#set ($pkg = $entityPkg)
#end
#end
#if ($stringUtils.isNotBlank($pkg))
package $pkg;
#end
#set ($generatedFile = "$stringUtils.replace($pkg,'.','/')/AllEntities.java")
/**
 * Tests all entities: create, query, update, delete. In the proper order based on associations
 * and database constraints
 * @see <a href="http://junit.sourceforge.net/javadoc/org/junit/runner/RunWith.html">JUnit</a>
 */

import junit.framework.Test;
import junit.framework.TestSuite;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
// Test suites are run in the order declared under SuiteClasses, not in the order added the the TestSuite
@Suite.SuiteClasses({
#set ($sep="  ")
#foreach ($entity in $entityList)
#if ($umlUtils.shouldOutput($entity))
    $sep ${entity.fullyQualifiedName}CreateTest.class
#set ($sep=", ")
#end
#end
#foreach ($entity in $entityReverseList)
#if ($umlUtils.shouldOutput($entity))
    $sep ${entity.fullyQualifiedName}DeleteTest.class
#end
#end})
public class AllEntities
{
    /**
     * Run the JUnit tests in a specific order based on association relationships
     * @return Test suite
     */
    public static Test suite()
    {
        TestSuite suite = new TestSuite(AllEntities.class.getName());
        //$JUnit-BEGIN$
        // Run the create tests from the bottom up, and delete from the top down, due to relation constraints
#foreach ($entity in $entityList)
#if ($umlUtils.shouldOutput($entity))
        suite.addTestSuite(${entity.fullyQualifiedName}CreateTest.class);
#end
#end

## TODO Don't repopulate and sort the list, just iterate in reverse order
        // Run the delete tests from the top down, due to relation constraints
#foreach ($entity in $entityReverseList)
#if ($umlUtils.shouldOutput($entity))
        suite.addTestSuite(${entity.fullyQualifiedName}DeleteTest.class);
#end
#end
        //$JUnit-END$
        return suite;
    }
}
