<?xml version="1.0" encoding="${xmlEncoding}"?>
<!--
     Modify as necessary for JPA unit testing. If deleted it will be regenerated.
     See http://docs.jboss.org/tools/latest/en/hibernatetools/html/reverseengineering.html#hibernaterevengxmlfile
     Generated by config/reveng.xml.vsl in andromda-ejb3-cartridge on $umlUtils.date.
-->
<!DOCTYPE hibernate-reverse-engineering
  SYSTEM "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd" >

<hibernate-reverse-engineering>
 <schema-selection match-schema="PUBLIC" />
<!-- jdbc-type is name from java.sql.Types -->
<!-- length, scale and precision can be used to specify the mapping precisely -->
<!-- type-mappings are ordered. Later mappings will be consulted last,
  thus overriding the previous one -->
<!-- This maps all numerics to Long, instead of primitive long or BigDecimal -->
<type-mapping>
 <!--sql-type jdbc-type="VARCHAR" length='20' hibernate-type="SomeUserType" />
 <sql-type jdbc-type="VARCHAR" length='1' hibernate-type="yes_no" />
 <sql-type jdbc-type="NUMERIC"  precision='1' hibernate-type="boolean" /-->
 <sql-type jdbc-type="NUMERIC" hibernate-type="java.lang.Long"/>
 <sql-type jdbc-type="BIGINT" hibernate-type="java.lang.Long"/>
 <sql-type jdbc-type="DECIMAL" scale="0" hibernate-type="java.lang.Long"/>
</type-mapping>

<!-- BIN$ is recycle bin tables in Oracle. -->
<table-filter match-name="BIN$.*" exclude="true" />

<!-- Exclude DoNotWantIt from all catalogs/schemas -->
<table-filter match-name="DoNotWantIt" exclude="true" />
## Find the shortest modeled entity package name and put reverse engineered entities there
#set ($entityList = $entityUtils.sortEntities($entities, true))
#set ($entityPkg="A REALLY LONG ENTITY PACKAGE NAME THAT WILL NOT BE SHORTER THAN ANY MODELED ENTITY PACKAGE NAME")
#foreach ($entity in $entityList)
#if ($entity.packageName.length()<$entityPkg.length())
#set ($entityPkg=$entity.packageName)
#end
#end
 <table-filter match-catalog="$testCatalog.toUpperCase()" match-name=".*" package="$entityPkg" />

#foreach ($entity in $entityList)
#foreach($general in $entity.allGeneralizations)
#if ($general.name.equals("AbstractEntity") || $general.name.equals("AuditedEntity") || $entity.generalization.name.equals("AbstractVersionedEntity") || $entity.generalization.name.equals("AbstractAuditedVersionedEntity") || $general.name.startsWith("AbstractPersistent"))
#set ($jpaFramework=true)
#end
#end
#if ($umlUtils.shouldOutput($entity))
    <table name="$entity.tableName.toUpperCase()" class="$entity.name" catalog="$testCatalog.toUpperCase()" schema="PUBLIC">
        <!--primary-key
         <generator class="generatorname">
           <param name="param_name">parameter value</param>
         </generator>
        </primary-key-->
#foreach ($property in $entity.allProperties)
## Only change default value of column name if specified in the columnName value
##        <!-- $property.hasStereotype("PersistentProperty") $property.columnName.toUpperCase() $jpaFramework $property.transient -->
#if (!$property.transient && $property.hasStereotype("PersistentProperty"))
#set ($propertyName=$property.columnName.toUpperCase())
#if ($jpaFramework && ($propertyName.equals("CREATE_DTS") || $propertyName.equals("UPDT_DTS") || $propertyName.equals("CREATE_USR_ID_CD") || $propertyName.equals("UPDT_USR_ID_CD") || $propertyName.equals("VRSN_SEQ_NB")))
        <column name="$property.columnName.toUpperCase()" property="$property.name" exclude="true"/>
#else
        <column name="$property.columnName.toUpperCase()" property="$property.name"/>
#end
#end
#end
        <column name="PRGE_DTS" exclude="true"/>
    </table>
#end
#end
</hibernate-reverse-engineering>