#parse("templates/ejb3/common/JNDIMacros.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by ServiceLocator.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Generated by ServiceLocator.vsl in andromda-ejb3-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotBlank($ejb3TypesPackage))
package $ejb3TypesPackage;
#**##set ($generatedFile = "${stringUtils.replace($ejb3TypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static ${serviceLocatorName} instance;

    /**
     * The Context to lookup the service beans.
     */
    protected javax.naming.InitialContext context = null;

    /**
     * Cannot be instantiated constructor
     */
    private ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * Gets the instance of this Class.
     * Create it if doesn't already exist, otherwise return the current instance.
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName getInstance()
    {
        if (instance == null)
        {
            instance = new ${serviceLocatorName}();
        }
        return instance;
    }

    /**
     * Gets the InitialContext.
     *
     * @param env the Context environment properties.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext getContext(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        if (this.context == null)
        {
            this.context = new javax.naming.InitialContext(env);
        }
        return this.context;
    }

    /**
     * Instantiate a new InitialContext using the properties table.
     *
     * @param env passed to the InitialContext constructor.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext newContext(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        this.context = new javax.naming.InitialContext(env);
        return this.context;
    }

    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        if (this.context != null)
        {
            try
            {
                this.context.close();
            }
            catch (javax.naming.NamingException ne)
            {
                // ignore
            }
            finally
            {
                this.context = null;
            }
        }
    }

#foreach ($service in $services)
    /**
     * Gets an instance of## no new line
#if ($service.viewTypeRemote)        
 {@link ${service.fullyQualifiedServiceRemoteInterfaceName}}.
#elseif ($service.viewTypeLocal)     
 {@link ${service.fullyQualifiedServiceLocalInterfaceName}}. 
#else
 {@link ${service.serviceInterfaceName}}.
#end
     *
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    /*
    public final## no new line
#if ($service.viewTypeRemote)
 $service.fullyQualifiedServiceRemoteInterfaceName## no new line
#elseif ($service.viewTypeLocal)   
$service.fullyQualifiedServiceLocalInterfaceName## no new line   
#else
${service.serviceInterfaceName}## no new line
#end
## get${service.serviceName}()## no new line
 get${service.serviceInterfaceName}()## no new line
 throws javax.naming.NamingException
    {
#if ($service.viewTypeRemote)        
        return get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Remote(null);
#elseif ($service.viewTypeLocal)     
        return get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Local(null);  
#else
#set ($jndiName = "${manageable.manageableServiceName}/remote")
        return ($service.serviceInterfaceName)## no new line
 getContext(env).lookup("${jndiName}");
#end
            
    }
    */
    
#**##if ($service.viewTypeRemote)   
    /**
     * Gets the remote interface {@link ${service.fullyQualifiedServiceRemoteInterfaceName}}.
     *
     * @param env the Context environment properties.  Null represents no properties.
     * @return $service.fullyQualifiedServiceRemoteInterfaceName
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final $service.fullyQualifiedServiceRemoteInterfaceName get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Remote(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
#remoteJndiName($service true)
        return (${service.fullyQualifiedServiceRemoteInterfaceName})## no new line
 getContext(env).lookup("${jndiName}");
    }

#**##end
#**##if ($service.viewTypeLocal)
    /**
     * Gets the local interface {@link ${service.fullyQualifiedServiceLocalInterfaceName}}.
     *
     * @param env the Context environment properties.  Null represents no properties.
     * @return $service.fullyQualifiedServiceRemoteInterfaceName
     * @throws javax.naming.NamingException failure to lookup local service interface.
     */
    public final $service.fullyQualifiedServiceLocalInterfaceName get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Local(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
#localJndiName($service true)
        return (${service.fullyQualifiedServiceLocalInterfaceName})## no new line
 getContext(env).lookup("${jndiName}");
    }

#**##end

#end
    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @return Object getService(serviceName, null)
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName)## no new line
 throws javax.naming.NamingException
    {
        return getService(serviceName, null);
    }

    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @param env the Context environment properties.  Null represents no properties.
     * @return Object getContext(env).lookup(serviceName)
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName, java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        return getContext(env).lookup(serviceName);
    }
}
