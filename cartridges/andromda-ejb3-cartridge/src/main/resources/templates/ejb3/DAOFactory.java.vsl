#set ($entityList = $entityUtils.sortEntities($entities, true))
#if (!$entityList.empty)
## Assume all entities are inherited from JPAFramework ancestor
#set ($entity1 = $entityList.get(0))
#foreach ($entity1 in $entityList)
#foreach($general in $entity1.allGeneralizations)
#if ($general.name.equals("AbstractEntity") || $general.name.equals("AuditedEntity") || $general.name.equals("AbstractVersionedEntity") || $general.name.equals("AbstractAuditedVersionedEntity") || $general.name.startsWith("AbstractPersistent"))
#set ($jpaFramework=true)
##// $general.name $entity1.fullyQualifiedName $jpaFramework
#end
#end
#end
##// $entity1.name $jpaFramework $entityList.size() $entities.size()
#set ($generatedFile = "${stringUtils.replace($entity1.package.name,'.','/')}/DAOFactory.java")
#if ($jpaFramework)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by DAOFactory.java.vsl in andromda-ejb3-cartridge on $umlUtils.date.
//
package $entity1.package.name;

## Must reference dependency SharedSimpleJPA
import com.wdpr.jpa.simple.persist.AbstractDAO;
import com.wdpr.jpa.simple.persist.AbstractDAOFactory;
import com.wdpr.jpa.simple.persist.GenericDAOIF;

/**
 * Autogenerated DAOFactory implementation, used with SharedSimpleJPA framework at WDPR.
 * Generated by DAOFactory.java.vsl in andromda-ejb3-cartridge on $umlUtils.date.
 * DO NOT MODIFY this class.
 */
public class DAOFactory extends AbstractDAOFactory
{
#foreach($entity in $entityList)
#if ($umlUtils.shouldOutput($entity) && !$entity.allGeneralizations.empty)
#if ($entity.compositePrimaryKeyPresent)
#set ($keyClass = "${entity.name}PK")
#elseif ($entity.identifier)
#set ($identifier = $entity.identifier.type)
#if ($entity.identifier.one2One && $entity.identifier.otherEnd.owning)
## One2One has association identifier as well as otherEnd PK attribute identifier
#set ($keyClass = $entity.identifier.type.identifier.type.fullyQualifiedName)
#else
#set ($keyClass = $entity.identifier.type.fullyQualifiedName)
#end
#end
    /**
     * GenericDAO Interface instance for $entity.name
     * @return new AbstractDAO generic from identifier class $keyClass
     */
    public static GenericDAOIF<$entity.name, $keyClass> get${entity.name}DAO()
    {
        return new AbstractDAO<$entity.name, $keyClass>() {};
    }

#end
#end
}
#end
#end