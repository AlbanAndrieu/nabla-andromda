// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
##// Generated by ServiceDelegate.vsl in andromda-ejb3-cartridge on $umlUtils.date.
// Generated by ServiceDelegate.vsl in andromda-ejb3-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedServiceDelegateName,'.','/')}.java")

/**
 * Web service delegator for {@link $service.fullyQualifiedServiceName}.
 *
 * @see $service.fullyQualifiedServiceName
 */
public class $service.serviceDelegateName
    extends ${ejb3TypesPackage}.ServiceDelegateBase
{
    /**
     * Default constructor
     */
    public ${service.serviceDelegateName}()
    {
        super();
    }

    /**
     * Constructor setting the envirinment properties.
     *
     * @param properties
     */
    public ${service.serviceDelegateName}(java.util.Properties properties)
    {
        super(properties);
    }

#if ($service.viewTypeRemote)
    /**
     * Gets an instance of {@link $service.fullyQualifiedServiceRemoteInterfaceName}
     */
    private ${service.fullyQualifiedServiceRemoteInterfaceName} get${service.name}Remote()
        throws javax.naming.NamingException
    {
        return ${ejb3TypesPackage}.ServiceLocator.getInstance().get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Remote(getProperties());
    }

#end
#if ($service.viewTypeLocal)
    /**
     * Gets an instance of {@link $service.fullyQualifiedServiceLocalInterfaceName}
     */
    private ${service.fullyQualifiedServiceLocalInterfaceName} get${service.name}Local()
        throws javax.naming.NamingException
    {
        return ${ejb3TypesPackage}.ServiceLocator.getInstance().get_${transform.toUnderscoreName(${service.fullyQualifiedServiceName})}_Local(getProperties());
    }

#end
#foreach ($operation in $service.businessOperations)
##
## Do not include lifecycle callback methods
##
#**##if (!$operation.lifecycleCallback && $operation.visibility == "public")
    /**
     * Call the session bean operation using appropriate view type
     * @see ${service.fullyQualifiedServiceName}${esc.hash}${operation.getSignature(false)}
     *
#foreach ($argument in $operation.arguments)
     * @param $argument.name
#end
#if ($operation.returnTypePresent)
     * @return $operation.returnType.fullyQualifiedName
#end
#if ($operation.exceptionsPresent)
     * @${operation.throwsClause}
#end
     */
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
#*  *##if ($operation.exceptionsPresent)
        $operation.throwsClause
#*  *##end
    {
        try
        {
#*  *##if ($operation.viewTypeAbsoluteBoth)
            switch (getViewType())
            {
                case LOCAL_VIEW_TYPE:
                    #if ($operation.returnTypePresent)return #end#**#get${service.name}Local().${operation.call};
                    #if (!$operation.returnTypePresent)break;#end

                case REMOTE_VIEW_TYPE:
                default:
                    #if ($operation.returnTypePresent)return #end#**#get${service.name}Remote().${operation.call};
                    #if (!$operation.returnTypePresent)break;#end
            }
#*  *##elseif ($operation.viewTypeAbsoluteRemote)
            #if ($operation.returnTypePresent)return #end#**#get${service.name}Remote().${operation.call};
#*  *##elseif ($operation.viewTypeAbsoluteLocal)
            #if ($operation.returnTypePresent)return #end#**#get${service.name}Local().${operation.call};
#*  *##end
        }
#*  *##if ($operation.exceptionsPresent)
#*    *##foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#*    *##end
#*  *##end
        catch (javax.naming.NamingException ex)
        {
#*  *##if ($service.allowDefaultServiceException)
            throw new ${service.fullyQualifiedDefaultExceptionName}(
                "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + ex, ex);
#*  *##else
            throw ex;
#*  *##end
        }
    }

#**##end
#end
}
