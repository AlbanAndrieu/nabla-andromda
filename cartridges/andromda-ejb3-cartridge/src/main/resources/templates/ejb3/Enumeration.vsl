#if ($umlUtils.shouldOutput($enumeration))
// license-header java merge-point
##/* Autogenerated by AndroMDA Enumeration.vsl in andromda-ejb3-cartridge on $umlUtils.date - do not edit */
/* Autogenerated by AndroMDA Enumeration.vsl in andromda-ejb3-cartridge - do not edit */
#set ($literalsTemplateType = "")
#set ($literalTypeName = "String")
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($enumeration.fullyQualifiedName,'.','/')}.java")

/**
 * Autogenerated enumeration ${enumeration.name}.
 *
$enumeration.getDocumentation(" * ")
 */
public enum $enumeration.name
{
#foreach ($literal in $enumeration.literals)
#if ($stringUtils.isNotBlank($literal.documentation))
    /**
$literal.getDocumentation("     * ")
     */
#else
    /** $toDoTag: Model Documentation for Enumeration Literal $literal.name value $literal.enumerationValue */
#end
    ${literal.name}#if ($literal.enumerationLiteralParametersExist)(${literal.enumerationLiteralParameters})#else($literal.enumerationValue)#end#if ($velocityCount != $enumeration.literals.size()),#else#**#;#end


#end
#foreach ($member in $enumeration.memberVariables)
    /**
$member.getDocumentation("     * ")
     */
    $member.visibility ${member.type.fullyQualifiedName} $member.name;

#end
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${enumeration.serialVersionUID}L;

    private $literalTypeName enumValue = null;

    /**
     * $enumeration.name constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private ${enumeration.name}($literalTypeName value)
    {
        this.enumValue = value;
    }

#if (!$enumeration.memberVariables.empty)
    /**
     * $enumeration.name constructor with list of member variables
     */
    private ${enumeration.name}($enumeration.getMemberVariablesAsList($enumeration.memberVariables, true, true))
    {
#foreach ($memberVariable in $enumeration.memberVariables)
        ${memberVariable.setterName}(${memberVariable.name});
#end
    }

#foreach ($member in $enumeration.memberVariables)
    /**
#if ($stringUtils.isNotBlank($member.documentation))
$member.getDocumentation("     * ")
#end
     * Get the $member.name property
     * @return ${member.type.fullyQualifiedName}
     */
    public $member.type.fullyQualifiedName ${member.getterName}()
    {
        return $member.name;
    }

    /**
     * Set the $member.name property.
     * @param value the new value
     */
    public void ${member.setterName}(${member.type.fullyQualifiedName} value)
    {
        this.${member.name} = value;
    }

#end
#end
    /**
     * Return the ${enumeration.name} from a string value
     * @param value
     * @return ${enumeration.name} enum object
     */
    public static ${enumeration.name} ${enumeration.fromOperationSignature}
    {
#if ($enumeration.literalType.stringType)
        return valueOf(value);
#else
        return values()[value];
#end
    }

    /**
     * Returns an instance of $enumeration.name from $literalTypeName <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the $enumeration.name from.
     * @return static Enumeration with corresponding value
     */
    public static $enumeration.name fromValue($literalTypeName value)
    {
        for (${enumeration.name} enumName: ${enumeration.name}.values())
        {
#if ($enumeration.literalType.primitive)
            if (enumName.getValue() == value)
#set ($exceptionString = "String.valueOf(value)")
#else
            if (enumName.getValue().equals(value))
#if ($enumeration.literalType.stringType)
#set ($exceptionString = "value")
#else
#set ($exceptionString = "value.toString()")
#end
#end
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("${enumeration.name}.fromValue(" + $exceptionString + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public $literalTypeName getValue()
    {
        return this.enumValue;
    }

    /**
     * Return a Collection of all literal values for this enumeration, can not be modified.
     * @return java.util.Collection<String> literal values
     */
    public static java.util.Collection<String> literals()
    {
        final java.util.Collection<String> literals = new java.util.ArrayList<String>(values().length);
        for (int i = 0; i < values().length; i++)
        {
            literals.add(values()[i].name());
        }
        return literals;
    }
}
#end
