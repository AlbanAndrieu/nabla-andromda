// license-header java merge-point
##/* Autogenerated by AndroMDA crud/ManageableServiceLocator.vsl in andromda-ejb3-cartridge on $umlUtils.date - do not edit */
/* Autogenerated by AndroMDA crud/ManageableServiceLocator.vsl in andromda-ejb3-cartridge - do not edit */
#parse("templates/ejb3/Globals.vm")
#set ($generatedFile = "${manageableServiceLocatorName}.java")
#if($stringUtils.isNotBlank($ejb3TypesPackage))
package $ejb3TypesPackage;
#**##set ($generatedFile = "${stringUtils.replace($ejb3TypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $manageableServiceLocatorName
{
    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static ${manageableServiceLocatorName} instance;

    /**
     * The Context to lookup the service beans.
     */
    protected javax.naming.InitialContext context = null;

    /**
     * Cannot be instantiated constructor
     */
    private ${manageableServiceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * Gets the shared instance of this Class.
     * Create it if it doesn't already exists, otherwise return the current instance.
     *
     * @return the shared service locator instance.
     */
    public static final ${manageableServiceLocatorName} instance()
    {
        if (instance == null)
        {
            instance = new ${manageableServiceLocatorName}();
        }
        return instance;
    }

    /**
     * Gets the InitialContext.
     *
     * @param env the Context environment properties.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext getContext(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        if (this.context == null)
        {
            this.context = new javax.naming.InitialContext(env);
        }
        return this.context;
    }

    /**
     * Instantiate a new InitialContext using the properties table.
     *
     * @param env passed to the InitialContext constructor.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext newContext(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        this.context = new javax.naming.InitialContext(env);
        return this.context;
    }

    /**
     * Shuts down the ${manageableServiceLocatorName} and releases any used resources.
     */
    public synchronized void shutdown()
    {
        if (this.context != null)
        {
            try
            {
                this.context.close();
            }
            catch (javax.naming.NamingException ne)
            {
                // ignore
            }
            finally
            {
                this.context = null;
            }
        }
    }

#foreach ($manageable in $manageables)
    /**
     * Gets an instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     *
     * @throws javax.naming.NamingException failure to lookup remote manageable service interface.
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()## no new line
 throws javax.naming.NamingException
    {
        return this.get${manageable.manageableServiceName}Remote(null);
    }

    /**
     * Get the remote interface for {@link $manageable.fullyQualifiedManageableServiceName}.
     *
     * @param env the Context environment properties.  Null represents no properties.
     * @throws javax.naming.NamingException failure to lookup remote manageable service interface.
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}Remote(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
#**##if ($stringUtils.isNotBlank($manageable.jndiNamePrefix))
#*  *##set ($jndiName = "${manageable.jndiNamePrefix}/${manageable.manageableServiceName}/remote")
#**##else
#*  *##set ($jndiName = "${manageable.manageableServiceName}/remote")
#**##end
        return ($manageable.fullyQualifiedManageableServiceName)## no new line
 getContext(env).lookup("${jndiName}");
    }

    /**
     * Get the local interface for {@link $manageable.fullyQualifiedManageableServiceName}.
     *
     * @param env the Context environment properties.  Null represents no properties.
     * @throws javax.naming.NamingException failure to lookup remote manageable service interface.
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}Local(java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
#**##if ($stringUtils.isNotBlank($manageable.jndiNamePrefix))
#*  *##set ($jndiName = "${manageable.jndiNamePrefix}/${manageable.manageableServiceName}/local")
#**##else
#*  *##set ($jndiName = "${manageable.manageableServiceName}/local")
#**##end
        return ($manageable.fullyQualifiedManageableServiceName)## no new line
 getContext(env).lookup("${jndiName}");
    }
#end

    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName)## no new line
 throws javax.naming.NamingException
    {
        return getService(serviceName, null);
    }

    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @param env the Context environment properties.  Null represents no properties.
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName, java.util.Properties env)## no new line
 throws javax.naming.NamingException
    {
        return getContext(env).lookup(serviceName);
    }
}