#if ($umlUtils.shouldOutput($entity))
#set ($generatedFile = "${entity.packagePath}/${entity.daoImplementationName}.java")
// license-header java merge-point
#if ($entity.daoImplementationRequired)
/**
 * This is only generated once! It will never be overwritten.
 * Generated by DaoImpl.vsl in andromda-ejb3-cartridge on $umlUtils.date.
 * You can (and have to!) safely modify it by hand.
 */
#else
/**
 * Attention: Generated code! Do not modify by hand!
## * Generated by DaoImpl.vsl in andromda-ejb3-cartridge on $umlUtils.date.
 * Generated by DaoImpl.vsl in andromda-ejb3-cartridge.
 */
#end
#if ($stringUtils.isNotBlank($entity.packageName))
package ${entity.packageName};
#end

#set ($superclass = $entity.generalization)
/**
 * @see $entity.fullyQualifiedEntityName
 */
#if ($entity.seamComponent)
@javax.ejb.Stateless
//@org.jboss.seam.annotations.Name("${entity.seamComponentName}")
@org.jboss.seam.annotations.Name("${entity.daoName}")
//@org.jboss.seam.annotations.Scope(org.jboss.seam.ScopeType.${entity.seamComponentScopeType})
@org.jboss.seam.annotations.Scope(org.jboss.seam.ScopeType.EVENT)
@org.jboss.seam.annotations.AutoCreate
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.REQUIRED)
@javax.ejb.Local({${entity.daoName}.class})
#**##if ($hibernateUtils.seamVersion23)
#*  *##set ($jndiNamePrefix = $entity.jndiNamePrefix)
#*  *##if (!$jndiNamePrefix.empty)
@org.jboss.seam.annotations.JndiName("${jndiNamePrefix}/${entity.daoImplementationName}")
#*  *##end
#**##end
#else
@javax.ejb.Stateless
#end
public class $entity.daoImplementationName## no new line
 extends $entity.fullyQualifiedDaoBaseName
{
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(${entity.daoImplementationName}.class);

#if ($entity.daoBusinessOperations && $entity.valueObjectReferences.empty)
    // This entity has no Business Operations and no ValueObject dependency references
#end
#foreach ($operation in $entity.daoBusinessOperations)
#**##set ($returnType = $operation.returnType)
#**##set ($returnObject = "returnValue")
#**##set ($signature = "$operation.implementationSignature")
    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${operation.getSignature(false)}
     */
    protected $returnType.fullyQualifiedName $signature## no new line
#**##if ($operation.exceptionsPresent)
 throws $operation.exceptionList
#**##end
    {
        // TODO implement $operation.visibility $returnType.fullyQualifiedName $signature
        // final User user = (User) this.getHibernateSession().createQuery("select User from User user where user.username = :username").setParameter("username", username).uniqueResult();
        // final User user = (User) this.getEntityManager().createQuery("select User from User user where user.username = :username").setParameter("username", username).getSingleResult();
        // return user;
#**##if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#**##else
        throw new UnsupportedOperationException("${entity.fullyQualifiedEntityName}.${signature} Not implemented!");
#**##end
    }

#end
#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
    public void ${valueObjectRef.transformationMethodName}(## no new line
 $entity.fullyQualifiedEntityName sourceEntity,## no new line
 $valueObjectRef.targetElement.fullyQualifiedName targetVO)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        super.${valueObjectRef.transformationMethodName}(sourceEntity, targetVO);
#**##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*  *##foreach ($entityProp in $entity.allProperties)
#*    *##if ($property.name == $entityProp.name)
#*      *##set ($getVal = false)
#*      *##set ($getVal = $converter.typeConvert($entityProp.type.fullyQualifiedName, "sourceEntity.${entityProp.getterName}()", $property.type.fullyQualifiedName) )
#*      *##if (!$getVal)
        // WARNING! No conversion for targetVO.${property.name} (can't convert sourceEntity.${entityProp.getterName}():${entityProp.type.fullyQualifiedName} to $property.type.fullyQualifiedName
#*      *##end
#*    *##end
#*  *##end
#**##end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName)
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedEntityName entity)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        return super.${valueObjectRef.transformationMethodName}(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private $entity.fullyQualifiedEntityName load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} implement load${entity.name}From${valueObjectRef.targetElement.name}
        throw new UnsupportedOperationException("${entity.packageName}.load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName) not yet implemented.");

        /* A typical implementation looks like this:
        $entity.fullyQualifiedEntityName $stringUtils.uncapitalize($entity.name) = this.load(${stringUtils.uncapitalize($valueObjectRef.name)}.getId());
        if ($stringUtils.uncapitalize($entity.name) == null)
        {
            $stringUtils.uncapitalize($entity.name) = ${entity.fullyQualifiedEntityName}.Factory.newInstance();
        }
        return $stringUtils.uncapitalize($entity.name);
        */
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName)
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        $entity.fullyQualifiedEntityName entity = this.load${entity.name}From${valueObjectRef.targetElement.name}($stringUtils.uncapitalize($valueObjectRef.name));
        this.${valueObjectRef.transformationToEntityMethodName}($stringUtils.uncapitalize($valueObjectRef.name), entity, true);
        return entity;
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}${esc.hash}${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName)
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(## no new line
 $valueObjectRef.targetElement.fullyQualifiedName sourceVO,## no new line
 $entity.fullyQualifiedEntityName targetEntity,## no new line
 boolean copyIfNull)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        super.${valueObjectRef.transformationToEntityMethodName}(sourceVO, targetEntity, copyIfNull);
#**##set ($attributes = $entity.getAttributes(true,false))
#**##foreach ($attribute in $attributes)
#*  *##foreach ($voProperty in $valueObjectRef.targetElement.allProperties)
#*    *##if ($attribute.name == $voProperty.name)
#*      *##set ($getVal = false)
#*      *##set ($getVal = $converter.typeConvert($voProperty.type.fullyQualifiedName, "sourceVO.${voProperty.getterName}()", ${attribute.getterSetterTypeName}) )
#*      *##if (!$getVal)
        // No conversion for targetEntity.${attribute.name} (can't convert sourceVO.${voProperty.getterName}():${voProperty.type.fullyQualifiedName} to ${attribute.getterSetterTypeName}
#*      *##end
#*    *##end
#*  *##end
#**##end
    }

#end
}
#end
