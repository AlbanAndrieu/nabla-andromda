<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_1.dtd">
<form-validation>

   <global>

      <validator name="required"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateRequired"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
                  msg="errors.required">

         <javascript><![CDATA[
            function validateRequired(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oRequired = eval('new ' + formName + '_required()');
                for (x in oRequired) {
                   var field = form[oRequired[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'file' ||
                        field.type == 'select-one' ||
                        field.type == 'radio' ||
                        field.type == 'password') {

                        var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                        value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (trim(value).length == 0) {

                           if (i == 0) {
                               focusField = field;
                           }
                           fields[i++] = oRequired[x][1];
                           isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            ]]>
         </javascript>

      </validator>

      <validator name="minlength"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateMinLength"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.minlength">

         <javascript><![CDATA[
            function validateMinLength(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oMinLength = eval('new ' + formName + '_minlength()');
                for (x in oMinLength) {
                    var field = form[oMinLength[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea') {

                        var iMin = parseInt(oMinLength[x][2]("minlength"));
                        if ((trim(field.value).length > 0) && (field.value.length < iMin)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMinLength[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
         </javascript>

      </validator>

      <validator name="maxlength"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateMaxLength"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.maxlength">

         <javascript><![CDATA[
            function validateMaxLength(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oMaxLength = eval('new ' + formName + '_maxlength()');
                for (x in oMaxLength) {
                    var field = form[oMaxLength[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea') {

                        var iMax = parseInt(oMaxLength[x][2]("maxlength"));
                        if (field.value.length > iMax) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMaxLength[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
         </javascript>

      </validator>

      <validator name="mask"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateMask"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.invalid">

         <javascript><![CDATA[
            function validateMask(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oMasked = eval('new ' + formName + '_mask()');
                for (x in oMasked) {
                    var field = form[oMasked[x][0]];

                    if ((field.type == 'text' ||
                         field.type == 'textarea') &&
                         (field.value.length > 0)) {

                        if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMasked[x][1];
                            isValid = false;
                        }
                    }
                }

                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }

            function matchPattern(value, mask) {
               return mask.exec(value);
            }]]>
         </javascript>

      </validator>

      <validator name="byte"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateByte"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.byte"
       jsFunctionName="ByteValidations">

         <javascript><![CDATA[
            function validateByte(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oByte = eval('new ' + formName + '_ByteValidations()');
                for (x in oByte) {
                   var field = form[oByte[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                  field.type == 'radio') {

                  var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                        value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {
                            if (!isAllDigits(value)) {
                                bValid = false;
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oByte[x][1];

                            } else {

                               var iValue = parseInt(value);
                               if (isNaN(iValue) || !(iValue >= -128 && iValue <= 127)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oByte[x][1];
                                   bValid = false;
                               }
                            }
                  }

                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="short"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateShort"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.short"
       jsFunctionName="ShortValidations">

         <javascript><![CDATA[
            function validateShort(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oShort = eval('new ' + formName + '_ShortValidations()');
                for (x in oShort) {
                   var field = form[oShort[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {

                        var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                        value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {
                            if (!isAllDigits(value)) {
                                bValid = false;
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oShort[x][1];

                            } else {

                               var iValue = parseInt(value);
                               if (isNaN(iValue) || !(iValue >= -32768 && iValue <= 32767)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oShort[x][1];
                                   bValid = false;
                               }
                          }
                       }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="integer"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateInteger"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.integer"
       jsFunctionName="IntegerValidations">

         <javascript><![CDATA[
            function validateInteger(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oInteger = eval('new ' + formName + '_IntegerValidations()');
                for (x in oInteger) {
                   var field = form[oInteger[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {

                        var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                      if (si >= 0) {
                         value = field.options[si].value;
                      }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {

                            if (!isAllDigits(value)) {
                                bValid = false;
                                if (i == 0) {
                                   focusField = field;
                               }
                          fields[i++] = oInteger[x][1];

                            } else {
                               var iValue = parseInt(value);
                               if (isNaN(iValue) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oInteger[x][1];
                                   bValid = false;
                              }
                           }
                       }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="long"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateLong"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.long"
       jsFunctionName="LongValidations">

         <javascript><![CDATA[
            function validateLong(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oLong = eval('new ' + formName + '_LongValidations()');
                for (x in oLong) {
                   var field = form[oLong[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {

                        var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                        value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {
                            if (!isAllDigits(value)) {
                                bValid = false;
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oLong[x][1];

                            } else {
                               var iValue = parseInt(value);
                               if (isNaN(iValue) || !(iValue >= -9223372036854775808 && iValue <= 9223372036854775807)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oShort[x][1];
                                   bValid = false;
                               }
                          }
                       }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="float"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateDouble"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.float"
       jsFunctionName="FloatValidations">

         <javascript><![CDATA[
            function validateFloat(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oFloat = eval('new ' + formName + '_FloatValidations()');
                for (x in oFloat) {
                   var field = form[oFloat[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {

                       var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                         value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {
                            // remove '.' before checking digits
                            var tempArray = value.split('.');
                            var joinedString= tempArray.join('');

                            if (!isAllDigits(joinedString)) {
                                bValid = false;
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oFloat[x][1];

                            } else {
                               var iValue = parseFloat(value);
                               if (isNaN(iValue)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oFloat[x][1];
                                   bValid = false;
                               }
                            }
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="double"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateDouble"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.float"
       jsFunctionName="FloatValidations">

         <javascript><![CDATA[
            function validateFloat(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oFloat = eval('new ' + formName + '_FloatValidations()');
                for (x in oFloat) {
                   var field = form[oFloat[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {

                       var value = '';
                  // get field's value
                  if (field.type == "select-one") {
                     var si = field.selectedIndex;
                     if (si >= 0) {
                         value = field.options[si].value;
                     }
                  } else {
                     value = field.value;
                  }

                        if (value.length > 0) {
                            // remove '.' before checking digits
                            var tempArray = value.split('.');
                            var joinedString= tempArray.join('');

                            if (!isAllDigits(joinedString)) {
                                bValid = false;
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oFloat[x][1];

                            } else {
                               var iValue = parseFloat(value);
                               if (isNaN(iValue)) {
                                   if (i == 0) {
                                       focusField = field;
                                   }
                                   fields[i++] = oFloat[x][1];
                                   bValid = false;
                               }
                            }
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

      <validator name="equal"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateEqual"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
                  msg="errors.equal"
       jsFunctionName="EqualValidations">

         <javascript><![CDATA[
            function validateEqual(form)
            {
               var focusField = null;
               var fieldIndex = 0;
               var fields = new Array();
                var formName = getFormName(form);
               oEqual = eval('new ' + formName + '_EqualValidations()');;

               for (x in oEqual)
               {
                   var field = form[oEqual[x][0]];
                   var value = field.value;
                   var equalFieldName = oEqual[x][2]("fieldName");
                   if ((field.type == 'hidden' || field.type == 'text' || field.type == 'textarea' || field.type == 'password') &&
                       (value.length > 0) && field.disabled == false)
                   {
                        var equalField =  document.getElementById(equalFieldName);
                        if (!equalField)
                        {
                            // - try getting the field the way that trinidad identifies it (it doesn't give the element
                            //   the prefix of the form name like regular JSF forms do).
                            var formAndFieldName = equalFieldName.split(':');
                            var formObject = document.getElementById(formAndFieldName[0]);
                            if (formObject)
                            {
                                equalField = formObject.elements[formAndFieldName[1]];
                            }
                        }
                        if (equalField)
                        {
                            var valid = equalField.value == value;
                            if (!valid)
                            {
                                fields[fieldIndex] = oEqual[x][1];          // record this field as invalid
                                if (fieldIndex == 0) focusField = field;    // the first invalid field is the one getting focus
                                fieldIndex++;                               // increment the field counter
                            }
                        }
                    }
                }

                var bValid = true;
                if (fields.length > 0)
                {
                    bValid = false;
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }
            ]]>
         </javascript>

      </validator>

      <validator name="date"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateDate"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.date"
       jsFunctionName="DateValidations">

         <javascript><![CDATA[
            function validateDate(form)
            {
               var focusField = null;
               var fieldIndex = 0;
               var fields = new Array();
                var formName = getFormName(form);
               oDate = eval('new ' + formName + '_DateValidations()');;

               for (x in oDate)
               {
                   var field = form[oDate[x][0]];

                   if (typeof(field) == 'undefined') {
                      return true;
                   }

                   var value = field.value;
                   var datePattern = oDate[x][2]("datePatternStrict");
                   var strict = (datePattern!=null);
                   // try loose pattern
                   if (!strict) datePattern = oDate[x][2]("datePattern");

                   if ((field.type == 'hidden' || field.type == 'text' || field.type == 'textarea') &&
                       (value.length > 0) && (datePattern.length > 0) && field.disabled == false)
                   {
                        // all possible date/time character sequences
                        var matches = datePattern.match( /(y+|M+|d+|H+|m+|s+)*/g );
                        var matchedTokens = new Array();    // we will keep track of the matches

                        var datePatternSub = datePattern;   // keeps track of the remaining pattern to process
                        var datePatternRegExp = "^";        // keeps track of the constructed regular expression

                        for (var i=0; i<matches.length; i++)
                        {
                            var match = matches[i];
                            var matchLength = match.length;

                            // JavaScript returns empty matches too (ie. the delimiters that could not be matched)
                            if (matchLength > 0)
                            {
                                // store this token
                                matchedTokens.push(match);

                                // locate the match in the remaining pattern
                                var matchSubIndex = datePatternSub.indexOf(match);

                                // if there are characters before the match was found
                                if (matchSubIndex > 0)
                                {
                                    // append those characters to the resulting regular expression too
                                    datePatternRegExp = datePatternRegExp.concat("[",datePatternSub.substring(0,matchSubIndex),"]");
                                }

                                // append the regular expression fragment for this match
                                datePatternRegExp = datePatternRegExp.concat("(\\d{",(strict)?matchLength:("1,"+matchLength),"})");

                                // substring the remaining fragment
                                datePatternSub = datePatternSub.substring(matchSubIndex+matchLength);
                            }
                        }

                        // close the regular expression
                        datePatternRegExp = datePatternRegExp.concat("$");

                        // construct an actual regular expression instance
                        datePatternRegExp = new RegExp(datePatternRegExp);

                        var valid = datePatternRegExp.test(value);
                        // attempt to match the user value
                        if (valid)
                        {
                            // attempt to check for a valid date and time
                            var matched = datePatternRegExp.exec(value);

                            var year = 0;
                            var month = 1;
                            var day = 1;
                            var hour = 0;
                            var minute = 0;
                            var second = 0;

                            for (var i=0; i<matchedTokens.length; i++)
                            {
                                var match = matchedTokens[i];
                                switch (match.charAt(0))
                                {
                                    case 'y' : year = matched[i+1]; break;
                                    case 'M' : month = matched[i+1]; break;
                                    case 'd' : day = matched[i+1]; break;
                                    case 'H' : hour = matched[i+1]; break;
                                    case 'm' : minute = matched[i+1]; break;
                                    case 's' : second = matched[i+1]; break;
                                }
                            }

                            valid = isValidDate(day,month,year) && isValidTime(second,minute,hour);
                        }

                        if (!valid)
                        {
                            fields[fieldIndex] = oDate[x][1];           // record this field as invalid
                            if (fieldIndex == 0) focusField = field;    // the first invalid field is the one getting focus
                            fieldIndex++;                               // increment the field counter
                        }
                    }
                }

                var bValid = true;
                if (fields.length > 0)
                {
                    bValid = false;
                    focusField.focus();
                    alert(fields.join('\n'));
                }

                return bValid;
            }

            function isValidDate(day, month, year) {
                if (month < 1 || month > 12) {
                    return false;
                }
                if (day < 1 || day > 31) {
                    return false;
                }
                if ((month == 4 || month == 6 || month == 9 || month == 11) &&
                    (day == 31)) {
                    return false;
                }
                if (month == 2) {
                    var leap = (year % 4 == 0 &&
                       (year % 100 != 0 || year % 400 == 0));
                    if (day>29 || (day == 29 && !leap)) {
                        return false;
                    }
                }
                return true;
            }]]>
         </javascript>

      </validator>

      <validator name="time"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateTime"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.time"
                  jsFunctionName="TimeValidations">
        <javascript><![CDATA[
    /**
     * Provides validation of time without a date.
     */
    function validateTime(form)
    {
       var bValid = true;
       var focusField = null;
       var fieldIndex = 0;
       var fields = new Array();
       var formName = getFormName(form);
       oTime = eval('new ' + formName + '_TimeValidations()');;

       for (x in oTime)
       {
           var field = form[oTime[x][0]];
           if (typeof(field) == 'undefined') {
              return true;
           }
           var value = field.value;
           var timePattern = oTime[x][2]("timePattern");

           if ((field.type == 'hidden' || field.type == 'text' || field.type == 'textarea') &&
               (value.length > 0) && (timePattern.length > 0) && field.disabled == false)
           {
                // all possible time character sequences
                var matches = timePattern.match( /(y+|H+|m+|s+|S+)*/g );
                var matchedTokens = new Array();    // we will keep track of the matches

                var timePatternSub = timePattern;   // keeps track of the remaining pattern to process
                var timePatternRegExp = "^";        // keeps track of the constructed regular expression

                for (var i=0; i < matches.length; i++)
                {
                    var match = matches[i];
                    var matchLength = match.length;

                    // JavaScript returns empty matches too (ie. the delimiters that could not be matched)
                    if (matchLength > 0)
                    {
                        // store this token
                        matchedTokens.push(match);

                        // locate the match in the remaining pattern
                        var matchSubIndex = timePatternSub.indexOf(match);

                        // if there are characters before the match was found
                        if (matchSubIndex > 0)
                        {
                            // append those characters to the resulting regular expression too
                            timePatternRegExp = timePatternRegExp.concat("[",timePatternSub.substring(0,matchSubIndex),"]");
                        }

                        // append the regular expression fragment for this match
                        timePatternRegExp = timePatternRegExp.concat("(\\d{",("1,"+matchLength),"})");

                        // substring the remaining fragment
                        timePatternSub = timePatternSub.substring(matchSubIndex+matchLength);
                    }
                }

                // close the regular expression
                timePatternRegExp = timePatternRegExp.concat("$");

                // construct an actual regular expression instance
                timePatternRegExp = new RegExp(timePatternRegExp);

                var valid = timePatternRegExp.test(value);
                // attempt to match the user value since validation failed
                if (valid)
                {
                    // attempt to check for a valid time
                    var matched = timePatternRegExp.exec(value);

                    var hour = 0;
                    var minute = 0;
                    var second = 0;
                    var millisecond = 0;

                    for (var i = 0; i < matchedTokens.length; i++)
                    {
                        var match = matchedTokens[i];
                        switch (match.charAt(0))
                        {
                            case 'H' : hour = matched[i+1]; break;
                            case 'm' : minute = matched[i+1]; break;
                            case 's' : second = matched[i+1]; break;
                            case 'M' : millisecond = matched[i+1]; break;
                        }
                    }

                    valid = isValidTime(second,minute,hour,millisecond);
                }

                if (!valid)
                {
                    fields[fieldIndex] = oTime[x][1];           // record this field as invalid
                    if (fieldIndex == 0) focusField = field;    // the first invalid field is the one getting focus
                    fieldIndex++;                               // increment the field counter
                }
            }
        }

        if (fields.length > 0)
        {
            bValid = false;
            focusField.focus();
            alert(fields.join('\n'));
        }

        return bValid;
    }
]]>
        </javascript>
      </validator>

      <validator name="intRange"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateLongRange"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends="integer"
                  msg="errors.range">

         <javascript><![CDATA[
            function validateIntRange(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oRange = eval('new ' + formName + '_intRange()');;
                for (x in oRange) {
                    var field = form[oRange[x][0]];
                    if (typeof(field) == 'undefined') {
                      return true;
                    }

                    if ((field.type == 'text' ||
                         field.type == 'textarea') &&
                        (field.value.length > 0)) {

                        var iMin = parseInt(oRange[x][2]("min"));
                        var iMax = parseInt(oRange[x][2]("max"));
                        var iValue = parseInt(field.value);
                        if (!(iValue >= iMin && iValue <= iMax)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oRange[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return isValid;
            }]]>
         </javascript>

      </validator>

      <validator name="floatRange"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateDoubleRange"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends="float"
                  msg="errors.range">

         <javascript><![CDATA[
            function validateFloatRange(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oRange = eval('new ' + formName + '_floatRange()');;
                for (x in oRange) {
                    var field = form[oRange[x][0]];
                    if (typeof(field) == 'undefined') {
                      return true;
                    }
                    if ((field.type == 'text' ||
                         field.type == 'textarea') &&
                        (field.value.length > 0)) {

                        var fMin = parseFloat(oRange[x][2]("min"));
                        var fMax = parseFloat(oRange[x][2]("max"));
                        var fValue = parseFloat(field.value);
                        if (!(fValue >= fMin && fValue <= fMax)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oRange[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return isValid;
            }]]>
         </javascript>

      </validator>

      <validator name="creditCard"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateCreditCard"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.creditcard">

         <javascript><![CDATA[
            function validateCreditCard(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oCreditCard = eval('new ' + formName + '_creditCard()');;
                for (x in oCreditCard) {
                    if ((form[oCreditCard[x][0]].type == 'text' ||
                         form[oCreditCard[x][0]].type == 'textarea') &&
                        (form[oCreditCard[x][0]].value.length > 0)) {
                        if (!luhnCheck(form[oCreditCard[x][0]].value)) {
                            if (i == 0) {
                                focusField = form[oCreditCard[x][0]];
                            }
                            fields[i++] = oCreditCard[x][1];
                            bValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }

            /**
             * Reference: http://www.ling.nwu.edu/~sburke/pub/luhn_lib.pl
             */
            function luhnCheck(cardNumber) {
                if (isLuhnNum(cardNumber)) {
                    var no_digit = cardNumber.length;
                    var oddoeven = no_digit & 1;
                    var sum = 0;
                    for (var count = 0; count < no_digit; count++) {
                        var digit = parseInt(cardNumber.charAt(count));
                        if (!((count & 1) ^ oddoeven)) {
                            digit *= 2;
                            if (digit > 9) digit -= 9;
                        };
                        sum += digit;
                    };
                    if (sum == 0) return false;
                    if (sum % 10 == 0) return true;
                };
                return false;
            }

            function isLuhnNum(argvalue) {
                argvalue = argvalue.toString();
                if (argvalue.length == 0) {
                    return false;
                }
                for (var n = 0; n < argvalue.length; n++) {
                    if ((argvalue.substring(n, n+1) < "0") ||
                        (argvalue.substring(n,n+1) > "9")) {
                        return false;
                    }
                }
                return true;
            }]]>
         </javascript>

      </validator>


      <validator name="email"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateEmail"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.email">

         <javascript><![CDATA[
            function validateEmail(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = getFormName(form);
                oEmail = eval('new ' + formName + '_email()');;
                for (x in oEmail) {
                    if ((form[oEmail[x][0]].type == 'text' ||
                         form[oEmail[x][0]].type == 'textarea') &&
                        (form[oEmail[x][0]].value.length > 0)) {
                        if (!checkEmail(form[oEmail[x][0]].value)) {
                            if (i == 0) {
                                focusField = form[oEmail[x][0]];
                            }
                            fields[i++] = oEmail[x][1];
                            bValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }

            /**
             * Reference: Sandeep V. Tamhankar (stamhankar@hotmail.com),
             * http://javascript.internet.com
             */
            function checkEmail(emailStr) {
               if (emailStr.length == 0) {
                   return true;
               }
               var emailPat=/^(.+)@(.+)$/;
               var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
               var validChars="\[^\\s" + specialChars + "\]";
               var quotedUser="(\"[^\"]*\")";
               var ipDomainPat=/^(\d{1,3})[.](\d{1,3})[.](\d{1,3})[.](\d{1,3})$/;
               var atom=validChars + '+';
               var word="(" + atom + "|" + quotedUser + ")";
               var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
               var domainPat=new RegExp("^" + atom + "(\\." + atom + ")*$");
               var matchArray=emailStr.match(emailPat);
               if (matchArray == null) {
                   return false;
               }
               var user=matchArray[1];
               var domain=matchArray[2];
               if (user.match(userPat) == null) {
                   return false;
               }
               var IPArray = domain.match(ipDomainPat);
               if (IPArray != null) {
                   for (var i = 1; i <= 4; i++) {
                      if (IPArray[i] > 255) {
                         return false;
                      }
                   }
                   return true;
               }
               var domainArray=domain.match(domainPat);
               if (domainArray == null) {
                   return false;
               }
               var atomPat=new RegExp(atom,"g");
               var domArr=domain.match(atomPat);
               var len=domArr.length;
               if ((domArr[domArr.length-1].length < 2) ||
                   (domArr[domArr.length-1].length > 3)) {
                   return false;
               }
               if (len < 2) {
                   return false;
               }
               return true;
            }]]>
         </javascript>

      </validator>

      <validator name="url"
            classname="org.andromda.cartridges.jsf.validator.ParameterChecks"
               method="validateUrl"
         methodParams="javax.faces.context.FacesContext,
                       java.lang.Object,java.util.Map,
                       java.util.Collection,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field"
              depends=""
                  msg="errors.url"/>

     <!-- This simply allows us to include javascript helper functions; not a real validator action -->
     <validator name="javascriptUtilities"
            classname=""
               method=""
         methodParams=""
              depends=""
                  msg="">

         <javascript><![CDATA[
            function isAllDigits(argvalue)
            {
                argvalue = argvalue.toString();
                var validChars = "0123456789";
                var startFrom = 0;
                if (argvalue.substring(0, 2) == "0x") {
                   validChars = "0123456789abcdefABCDEF";
                   startFrom = 2;
                } else if (argvalue.charAt(0) == "0") {
                   validChars = "01234567";
                   startFrom = 1;
                } else if (argvalue.charAt(0) == "-") {
                    startFrom = 1;
                }

                for (var n = startFrom; n < argvalue.length; n++) {
                    if (validChars.indexOf(argvalue.substring(n, n+1)) == -1) return false;
                }
                return true;
            }
            // Trim whitespace from left and right sides of s.
            function trim(s)
            {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            function isValidTime(second, minute, hour, millisecond)
            {
                var valid = 0 <= hour && hour < 24 && 0 <= minute && minute < 60 && 0 <= second && second < 60;
                if (millisecond)
                {
                    valid = valid && 0 <= millisecond && millisecond < 1000;
                }
                return valid;
            }
            function getFormName(form)
            {
                var formName = form.getAttributeNode("name");
		        if (!formName || trim(formName.value).length == '')
                {
                    formName = form.getAttributeNode("id");
		        }
                if (formName)
                {
                    formName = formName.value;
                }
                var delimIndex = formName.indexOf(':');
		        if (delimIndex != -1)
                {
                    formName = formName.substring(delimIndex + 1, formName.length);
                }
                return formName;
            }
            ]]>
         </javascript>

     </validator>

     <!-- validator-rules merge-point -->

   </global>

</form-validation>
