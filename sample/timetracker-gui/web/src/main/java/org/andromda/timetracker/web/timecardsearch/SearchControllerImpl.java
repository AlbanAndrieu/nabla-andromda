// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\ControllerImpl.java.vsl)
package org.andromda.timetracker.web.timecardsearch;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.andromda.timetracker.domain.TimecardStatus;
import org.andromda.timetracker.service.UserDoesNotExistException;
import org.andromda.timetracker.vo.TimecardSearchCriteriaVO;
import org.andromda.timetracker.vo.TimecardSummaryVO;
import org.andromda.timetracker.vo.UserVO;
import org.andromda.timetracker.vo.UserVOComparator;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * @see org.andromda.timetracker.web.timecardsearch.SearchController
 */
public class SearchControllerImpl extends SearchController
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long   serialVersionUID = 3544295024145788800L;

    private static final Log    logger           = LogFactory.getLog(SearchController.class);

    private static final String ALL_STRING       = "-- All --";

    /**
     * @see org.andromda.timetracker.web.timecardsearch.SearchController#populateSearchScreen(java.lang.Long submitter, java.lang.Long approver, java.lang.String status, Date startDateMinimum, Date startDateMaximum,
     * TimecardSummaryVO[] timecardSummaries)
     */
    @Override
    public void populateSearchScreen(final PopulateSearchScreenForm form)
    {
        // form.setSubmitterValueList(new Object[] {"submitter-1", "submitter-2", "submitter-3", "submitter-4", "submitter-5"});
        // form.setSubmitterLabelList(form.getSubmitterValueList());
        // form.setApproverValueList(new Object[] {"approver-1", "approver-2", "approver-3", "approver-4", "approver-5"});
        // form.setApproverLabelList(form.getApproverValueList());
        // form.setStatusValueList(new Object[] {"status-1", "status-2", "status-3", "status-4", "status-5"});
        // form.setStatusLabelList(form.getStatusValueList());

        SearchControllerImpl.logger.debug("form: " + form);

        // List<UserVO> users = new ArrayList<UserVO>(getUserService().getAllUsers());
        // Collections.sort(users, new UserVOComparator());

        // Get list of users and add the "All" option at the top
        UserVO[] users;
        try
        {
            users = this.getUserService().getAllUsers();
            Arrays.sort(users, new UserVOComparator());

            final List<UserVO> userList = new ArrayList<UserVO>(Arrays.asList(users));
            userList.add(0, new UserVO(null /* new Long(0) */, SearchControllerImpl.ALL_STRING, null, null));
            // @see http://adfbugs.blogspot.com/2011/03/invalid-values-in-choice-lists.html

            // Populate submitter and approver dropdowns
            form.setSubmitterBackingList(userList, "id", "username");
            form.setApproverBackingList(userList, "id", "username");
        } catch (final UserDoesNotExistException e)
        {
            SearchControllerImpl.logger.debug("UserDoesNotExistException : " + e);
        }

        // Populate status dropdown
        final List<String> statusLabels = new ArrayList<String>(TimecardStatus.literals());
        final List<String> statusValues = new ArrayList<String>(TimecardStatus.names());
        statusLabels.add(0, SearchControllerImpl.ALL_STRING);
        statusValues.add(0, "" /* null */);
        form.setStatusLabelList(statusLabels.toArray());
        form.setStatusValueList(statusValues.toArray());

        // Populate timecard summaries
        TimecardStatus status = null;
        if (StringUtils.isNotBlank(form.getStatus()))
        {
            status = TimecardStatus.fromString(form.getStatus()/* .toUpperCase() */);
        }
        final TimecardSearchCriteriaVO criteria = new TimecardSearchCriteriaVO(form.getSubmitter(), form.getApprover(), status, form.getStartDateMinimum(), form.getStartDateMaximum());

        final TimecardSummaryVO[] timecards = this.getTimeTrackingService().findTimecards(criteria);
        form.setTimecardSummaries(timecards);
        // populating the table with a dummy list
        // form.setTimecardSummaries(timecardSummaries);
    }

    /**
     * @see org.andromda.timetracker.web.timecardsearch.SearchController#initializeTimecardId(java.lang.Long id, java.lang.Long timecardId)
     */
    @Override
    public void initializeTimecardId(final InitializeTimecardIdForm form)
    {
        form.setTimecardId(form.getId());
    }

    /**
     * This dummy variable is used to populate the "timecardSummaries" table.
     * You may delete it when you add you own code in this controller.
     */
    // private static final TimecardSummaryVO[] timecardSummaries =
    // new TimecardSummaryVO[]
    // {
    // new TimecardSummaryVO(null, null, new Date(), "comments-1", "submitterName-1", "approverName-1"),
    // new TimecardSummaryVO(null, null, new Date(), "comments-2", "submitterName-2", "approverName-2"),
    // new TimecardSummaryVO(null, null, new Date(), "comments-3", "submitterName-3", "approverName-3"),
    // new TimecardSummaryVO(null, null, new Date(), "comments-4", "submitterName-4", "approverName-4"),
    // new TimecardSummaryVO(null, null, new Date(), "comments-5", "submitterName-5", "approverName-5")
    // };
}
