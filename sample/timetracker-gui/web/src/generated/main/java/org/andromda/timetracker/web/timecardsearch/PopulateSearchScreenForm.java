// license-header java merge-point
// Generated by andromda-jsf cartridge (forms\Form.java.vsl) DO NOT EDIT!
package org.andromda.timetracker.web.timecardsearch;

import java.util.Collection;
import java.util.Date;
import javax.faces.event.ActionEvent;
import javax.faces.event.FacesEvent;
import javax.faces.event.ValueChangeEvent;
import org.andromda.timetracker.vo.TimecardSummaryVO;

/**
 * This form encapsulates the fields that are used in the execution of the
 * <code>populateSearchScreen</code> method, which is located on the
 * <code>org.andromda.timetracker.web.timecardsearch.SearchController</code> controller.
 *
 * TODO: Model Documentation for
 * org.andromda.timetracker.web.timecardsearch.SearchController.populateSearchScreen
 *
 * @see org.andromda.timetracker.web.timecardsearch.SearchController#populateSearchScreen(PopulateSearchScreenForm)
 */
public interface PopulateSearchScreenForm
{
    /**
     * Gets the ValueChangeEvent (if any) that is associated with this form.
     *
     * @return the faces ValueChangeEvent associated to this form.
     */
    public ValueChangeEvent getValueChangeEvent();

    /**
     * Gets the ActionEvent (if any) that is associated with this form.
     *
     * @return the faces ActionEvent associated to this form.
     */
    public ActionEvent getActionEvent();

    /**
     * Sets the event (if any) that is associated with this form.
     *
     * @param event the faces event to associate to this form.
     */
    public void setEvent(FacesEvent event);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.submitter
     * @return submitter
     */
    public Long getSubmitter();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.submitter
     * @param submitter
     */
    public void setSubmitter(Long submitter);

    /**
     * The <code>submitter</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @return Object[]
     * @see #getSubmitter()
     * @see #getSubmitterValueList()
     * @see #getSubmitterLabelList()
     * @see #setSubmitterLabelList(Collection,String,String)
     */
    public Object[] getSubmitterBackingList();

    /**
     * Convenient method to quickly set the value and label backing list for the
     * submitter property. This method takes a collection of objects, as well as
     * the property names to query these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the submitter backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setSubmitterBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #getSubmitter()
     * @see #getSubmitterValueList()
     * @see #getSubmitterLabelList()
     * @see #getSubmitterLabelList()
     */
    public void setSubmitterBackingList(Collection<? extends Object> items, String valueProperty, String labelProperty);

    /**
     * The <code>submitter</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @return Object[]
     * @see #getSubmitter()
     * @see #getSubmitterBackingList()
     */
    public Object[] getSubmitterValueList();

    /**
     * The <code>submitter</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @param submitterValueList
     * @see #getSubmitter()
     * @see #getSubmitterBackingList()
     */
    public void setSubmitterValueList(Object[] submitterValueList);

    /**
     * The <code>submitter</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @return Object[]
     * @see #getSubmitter()
     * @see #getSubmitterBackingList()
     */
    public Object[] getSubmitterLabelList();

    /**
     * The <code>submitter</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @param submitterLabelList
     * @see #getSubmitter()
     * @see #getSubmitterBackingList()
     */
    public void setSubmitterLabelList(Object[] submitterLabelList);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.approver
     * @return approver
     */
    public Long getApprover();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.approver
     * @param approver
     */
    public void setApprover(Long approver);

    /**
     * The <code>approver</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @return Object[]
     * @see #getApprover()
     * @see #getApproverValueList()
     * @see #getApproverLabelList()
     * @see #setApproverLabelList(Collection,String,String)
     */
    public Object[] getApproverBackingList();

    /**
     * Convenient method to quickly set the value and label backing list for the
     * approver property. This method takes a collection of objects, as well as
     * the property names to query these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the approver backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setApproverBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #getApprover()
     * @see #getApproverValueList()
     * @see #getApproverLabelList()
     * @see #getApproverLabelList()
     */
    public void setApproverBackingList(Collection<? extends Object> items, String valueProperty, String labelProperty);

    /**
     * The <code>approver</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @return Object[]
     * @see #getApprover()
     * @see #getApproverBackingList()
     */
    public Object[] getApproverValueList();

    /**
     * The <code>approver</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @param approverValueList
     * @see #getApprover()
     * @see #getApproverBackingList()
     */
    public void setApproverValueList(Object[] approverValueList);

    /**
     * The <code>approver</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @return Object[]
     * @see #getApprover()
     * @see #getApproverBackingList()
     */
    public Object[] getApproverLabelList();

    /**
     * The <code>approver</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @param approverLabelList
     * @see #getApprover()
     * @see #getApproverBackingList()
     */
    public void setApproverLabelList(Object[] approverLabelList);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.status
     * @return status
     */
    public String getStatus();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.status
     * @param status
     */
    public void setStatus(String status);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @return Object[]
     * @see #getStatus()
     * @see #getStatusValueList()
     * @see #getStatusLabelList()
     * @see #setStatusLabelList(Collection,String,String)
     */
    public Object[] getStatusBackingList();

    /**
     * Convenient method to quickly set the value and label backing list for the
     * status property. This method takes a collection of objects, as well as
     * the property names to query these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the status backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setStatusBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #getStatus()
     * @see #getStatusValueList()
     * @see #getStatusLabelList()
     * @see #getStatusLabelList()
     */
    public void setStatusBackingList(Collection<? extends Object> items, String valueProperty, String labelProperty);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @return Object[]
     * @see #getStatus()
     * @see #getStatusBackingList()
     */
    public Object[] getStatusValueList();

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @param statusValueList
     * @see #getStatus()
     * @see #getStatusBackingList()
     */
    public void setStatusValueList(Object[] statusValueList);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @return Object[]
     * @see #getStatus()
     * @see #getStatusBackingList()
     */
    public Object[] getStatusLabelList();

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @param statusLabelList
     * @see #getStatus()
     * @see #getStatusBackingList()
     */
    public void setStatusLabelList(Object[] statusLabelList);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.startDateMinimum
     * @return startDateMinimum
     */
    public Date getStartDateMinimum();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.startDateMinimum
     * @param startDateMinimum
     */
    public void setStartDateMinimum(Date startDateMinimum);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.startDateMaximum
     * @return startDateMaximum
     */
    public Date getStartDateMaximum();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.startDateMaximum
     * @param startDateMaximum
     */
    public void setStartDateMaximum(Date startDateMaximum);

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.timecardSummaries
     * @return timecardSummaries
     */
    public TimecardSummaryVO[] getTimecardSummaries();

    /**
     * TODO: Model Documentation for org.andromda.timetracker.web.timecardsearch.timecardSummaries
     * @param timecardSummaries
     */
    public void setTimecardSummaries(TimecardSummaryVO[] timecardSummaries);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @return Object[]
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusValueList()
     * @see #getTimecardSummariesStatusLabelList()
     * @see #setTimecardSummariesStatusLabelList(Collection,String,String)
     */
    public Object[] getTimecardSummariesStatusBackingList();

    /**
     * Convenient method to quickly set the value and label backing list for the
     * status property. This method takes a collection of objects, as well as
     * the property names to query these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the status backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setTimecardSummariesStatusBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusValueList()
     * @see #getTimecardSummariesStatusLabelList()
     * @see #getTimecardSummariesStatusLabelList()
     */
    public void setTimecardSummariesStatusBackingList(Collection<? extends Object> items, String valueProperty, String labelProperty);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @return Object[]
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusBackingList()
     */
    public Object[] getTimecardSummariesStatusValueList();

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @param timecardSummariesStatusValueList
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusBackingList()
     */
    public void setTimecardSummariesStatusValueList(Object[] timecardSummariesStatusValueList);

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @return Object[]
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusBackingList()
     */
    public Object[] getTimecardSummariesStatusLabelList();

    /**
     * The <code>status</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @param timecardSummariesStatusLabelList
     * @see #getTimecardSummaries().getStatus()
     * @see #getTimecardSummariesStatusBackingList()
     */
    public void setTimecardSummariesStatusLabelList(Object[] timecardSummariesStatusLabelList);

}