<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by andromda-jsf cartridge (configuration\web.xml.vsl) DO NOT EDIT! -->

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_3.xsd"
         version="3">

        

    <!-- ************************ JSF Config **************************** -->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>

    <context-param>
        <description>
            State saving method: "client" or "server" (= default)
            See JSF Specification 2.5.2. In Trinidad and ADF Faces, it is an
            optimized, token-based mechanism that is almost always a
            better choice than the standard JSF server-side state saving.
        </description>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>client</param-value>
    </context-param>
    
    <!-- ************************ MyFaces Listener **************************** -->
    <!-- Listener, that does all the startup work (configuration, init). -->
    <!--
    <listener>
        <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
    </listener>
    -->
    
    <!-- ************************ MyFaces Config **************************** -->
    <context-param>
        <description>
            This parameter tells MyFaces if javascript code should be allowed in the
            rendered HTML output.
            If javascript is allowed, command_link anchors will have javascript code
            that submits the corresponding form.
            If javascript is not allowed, the state saving info and nested parameters
            will be added as url parameters.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>
            If true, rendered HTML code will be formatted, so that it is "human readable".
            i.e. additional line separators and whitespace will be written, that do not
            influence the HTML code.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            If true, a javascript function will be rendered that is able to restore the
            former vertical scroll on every request. Convenient feature if you have pages
            with long lists and you do not want the browser page to always jump to the top
            if you trigger a link or button action that stays on the same page.
            Default: "false"
        </description>
        <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
        <param-value>true</param-value>
    </context-param>

<!-- Options JSF avec utilisation de SUN RI
	<context-param>
		<param-name>com.sun.faces.validateXml</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>com.sun.faces.verifyObjects</param-name>
		<param-value>true</param-value>
	</context-param>
-->


    <!-- ************************ Trinidad Resources Servlet **************************** -->
    <servlet>
        <servlet-name>Trinidad Resources Servlet</servlet-name>
        <servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Trinidad Resources Servlet</servlet-name>
	<url-pattern>/adf/*</url-pattern>
    </servlet-mapping>
    
    <!-- Trinidad Filter -->
    <filter>
        <filter-name>Trinidad Filter</filter-name>
        <filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Trinidad Filter</filter-name>
        <url-pattern>*.jsf</url-pattern>
    </filter-mapping>       
    <!-- Trinidad patch filter -->
    <!-- for calendar bug https://issues.apache.org/jira/browse/TRINIDAD-119 -->
    <filter>
        <filter-name>TrinidadDialogFilter</filter-name>
        <filter-class>org.andromda.presentation.gui.TrinidadDialogFilter</filter-class>
    </filter>    
    <filter-mapping>
        <filter-name>TrinidadDialogFilter</filter-name>
        <url-pattern>/__ADFv__</url-pattern>
    </filter-mapping>

    <!-- ************************ Trinidad Config **************************** -->
    <!-- Trinidad has its own ViewHandler, which is a "decorating"
         view handler - for example, it needs to wrap methods like renderView()
         to perform some extra pre- and post-handling.  Facelets, on the other
         hand, is more of a true ViewHandler - it actually implements
         renderView() (yeah, it decorates too, but forget about that
         for a second).  As a result, the world is a better place if
         the Trinidad ViewHandler runs around the Facelets ViewHandler.
         But since Facelets is registered in WEB-INF/faces-config.xml,
         and Trinidad's is registered from META-INF/faces-config.xml in its
         JAR, exactly the opposite happens as per the JSF spec.

         Hence, the following config parameter, which Trinidad
         exposes (as of EA19) to allow pushing a ViewHandler inside
         of ours.  FWIW, you retain the entire delegation stack -
         just flipped around a bit - so that Facelets still decorates
         the standard ViewHandler, and therefore you've still got
         JSP support.
      -->
    <context-param>
        <!-- Maximum memory per request (in bytes) -->
        <param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_MEMORY</param-name>
        <param-value>512000</param-value>
    </context-param>
    <context-param>
        <!-- Maximum disk space per request (in bytes) -->
        <param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_DISK_SPACE</param-name>
        <param-value>10240000</param-value>
    </context-param>


    <context-param>
        <description>
            Turn off the javascript obfuscation
        </description>
        <param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>
            If this parameter is enabled by setting to "true", Apache Trinidad will turn off
            automatic compression of style class names
        </description>
        <param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.trinidadinternal.DISABLE_CONTENT_COMPRESSION</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <description>
            If this parameter is enabled by setting to "true", Apache Trinidad will automatically
            check the modification date of your JSPs and skinning CSS files, and discard saved
             state when they change;  this makes development easier,
             but adds overhead that should be avoided when your application
             is deployed
        </description>
        <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
        <param-value>true</param-value>
    </context-param>
  
    <context-param>
        <param-name>org.apache.myfaces.trinidad.resource.DEBUG</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <context-param>
        <param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
        <param-value>com.sun.facelets.FaceletViewHandler</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.trinidad.CACHE_VIEW_ROOT</param-name>
        <param-value>false</param-value>
    </context-param>



  
    <!-- ************************ Faces Servlet Mapping **************************** -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping>
        
        
    <!--
    <servlet>
        <servlet-name>File Download Servlet</servlet-name>
        <servlet-class>org.andromda.presentation.gui.FileDownloadServlet</servlet-class>
        <load-on-startup>3</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>File Download Servlet</servlet-name>
        <url-pattern>/fileDownload/*</url-pattern>
    </servlet-mapping>
    -->
    <!-- resource loader servlet -->
    <!-- 
    <servlet>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <servlet-class>org.andromda.cartridges.jsf.JSFServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <url-pattern>/jsf/*</url-pattern>
    </servlet-mapping>  
    -->  


    <!-- ************************ Manual Servlets **************************** -->
    <!-- precompilation merge-point -->
      
    
    
    
    <!-- ************************ Manual Filters **************************** -->
    <!-- uncomment the following if you're using the open-session-in-view pattern
         note: that you'll need to update the filter-class value if you've changed
         the defaults for the package and/or filter name
    <filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>org.andromda.spring.presentation.AndroMDAOpenSessionInViewFilter</filter-class>
        <init-param>
            <param-name>singleSession</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
    -->
    <!-- uncomment the following if you're using the open-session-in-view pattern
    <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    -->
    
    <!-- ************************ Manual Merged Config **************************** -->
    <!-- Instruct JBoss to not use Mojarra libs with this application - avoids Myfaces conflict -->
    <context-param>
         <param-name>org.jboss.jbossfaces.WAR_BUNDLES_JSF_IMPL</param-name>
         <param-value>true</param-value>
    </context-param>
    


    <filter>
        <filter-name>org.andromda.timetracker.web.timecardsearch.SearchTimecardsPopulator</filter-name>
        <filter-class>org.andromda.timetracker.web.timecardsearch.SearchTimecardsPopulator</filter-class>
    </filter>
    <filter>
        <filter-name>org.andromda.timetracker.web.timecarddetails.TimecardPopulator</filter-name>
        <filter-class>org.andromda.timetracker.web.timecarddetails.TimecardPopulator</filter-class>
    </filter>

    <filter>
        <filter-name>org.andromda.timetracker.domain.crud.ManageUserFormPopulator</filter-name>
        <filter-class>org.andromda.timetracker.domain.crud.ManageUserFormPopulator</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>org.andromda.timetracker.domain.crud.ManageUserFormPopulator</filter-name>
        <url-pattern>/org/andromda/timetracker/domain/crud/user-crud.jsf</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>org.andromda.timetracker.domain.crud.ManageTaskFormPopulator</filter-name>
        <filter-class>org.andromda.timetracker.domain.crud.ManageTaskFormPopulator</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>org.andromda.timetracker.domain.crud.ManageTaskFormPopulator</filter-name>
        <url-pattern>/org/andromda/timetracker/domain/crud/task-crud.jsf</url-pattern>
    </filter-mapping>

        
    <filter-mapping>
        <filter-name>org.andromda.timetracker.web.timecardsearch.SearchTimecardsPopulator</filter-name>
        <url-pattern>/org/andromda/timetracker/web/timecardsearch/search-timecards.jsf</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>org.andromda.timetracker.web.timecarddetails.TimecardPopulator</filter-name>
        <url-pattern>/org/andromda/timetracker/web/timecarddetails/timecard.jsf</url-pattern>
    </filter-mapping>
        
    <servlet>
        <servlet-name>org.andromda.timetracker.web.timecardsearch.SearchTimecards</servlet-name>
        <servlet-class>org.andromda.timetracker.web.timecardsearch.SearchTimecards</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>org.andromda.timetracker.web.timetrackerhome.TimeTrackerHome</servlet-name>
        <servlet-class>org.andromda.timetracker.web.timetrackerhome.TimeTrackerHome</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>org.andromda.timetracker.web.timecarddetails.TimecardDetails</servlet-name>
        <servlet-class>org.andromda.timetracker.web.timecarddetails.TimecardDetails</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>org.andromda.timetracker.web.timecardsearch.SearchTimecards</servlet-name>
        <url-pattern>/org/andromda/timetracker/web/timecardsearch/search-timecardsuc.jsf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>org.andromda.timetracker.web.timetrackerhome.TimeTrackerHome</servlet-name>
        <url-pattern>/org/andromda/timetracker/web/timetrackerhome/time-tracker-homeuc.jsf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>org.andromda.timetracker.web.timecarddetails.TimecardDetails</servlet-name>
        <url-pattern>/org/andromda/timetracker/web/timecarddetails/timecard-details.jsf</url-pattern>
    </servlet-mapping>
    <session-config>
        <session-timeout>45</session-timeout>
        <!-- session-config merge-point -->
    </session-config>
    

    <!-- Welcome files -->
    <welcome-file-list>
        
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>408</error-code>
        <location>/index.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/403.jsp</location>
    </error-page>
    
    <!-- taglib merge-point -->
    <!-- resource-ref merge-point -->

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Raw-JSF-Pages</web-resource-name>
            <description>
                Prevent access to raw pages that are for JSF pages.
                (No roles, so no direct access)
            </description>
            <url-pattern>*.xhtml</url-pattern>
        </web-resource-collection>
        <auth-constraint>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
</web-app>