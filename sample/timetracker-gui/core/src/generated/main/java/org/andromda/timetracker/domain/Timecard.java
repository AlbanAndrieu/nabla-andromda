// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl overrided in andromda-hibernate-cartridge.
//
package org.andromda.timetracker.domain;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * This class represents a timecard submitted by a person.
 */
@XmlType(propOrder = {"comments", "startDate", "status"})
@XmlAccessorType(XmlAccessType.FIELD)
// HibernateEntity.vsl annotations merge-point
public abstract class Timecard implements Serializable, Comparable<Timecard>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -8810488711747049867L;

    // Generate 4 attributes
    @XmlElement(name = "comments")
    private String comments;

    /**
     * TODO: Model Documentation for Timecard.comments
     * @return this.comments String
     */
    public String getComments()
    {
        return this.comments;
    }

    /**
     * TODO: Model Documentation for Timecard.comments
     * @param commentsIn String
     */
    public void setComments(String commentsIn)
    {
        this.comments = commentsIn;
    }

    @XmlElement(name = "startDate")
    private Date startDate;

    /**
     * TODO: Model Documentation for Timecard.startDate
     * @return this.startDate Date
     */
    public Date getStartDate()
    {
        return this.startDate;
    }

    /**
     * TODO: Model Documentation for Timecard.startDate
     * @param startDateIn Date
     */
    public void setStartDate(Date startDateIn)
    {
        this.startDate = startDateIn;
    }

    @XmlElement(name = "status")
    private TimecardStatus status;

    /**
     * TODO: Model Documentation for Timecard.status
     * @return this.status TimecardStatus
     */
    public TimecardStatus getStatus()
    {
        return this.status;
    }

    /**
     * TODO: Model Documentation for Timecard.status
     * @param statusIn TimecardStatus
     */
    public void setStatus(TimecardStatus statusIn)
    {
        this.status = statusIn;
    }

    @XmlElement(name = "id")
    private Long id;

    /**
     * TODO: Model Documentation for Timecard.id
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Timecard.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 3 associations
    private User approver;

    /**
     * TODO: Model Documentation for User
     * @return this.approver User
     */
    public User getApprover()
    {
        return this.approver;
    }

    /**
     * TODO: Model Documentation for User
     * @param approverIn User
     */
    public void setApprover(User approverIn)
    {
        this.approver = approverIn;
    }

    private User submitter;

    /**
     * TODO: Model Documentation for User
     * @return this.submitter User
     */
    public User getSubmitter()
    {
        return this.submitter;
    }

    /**
     * TODO: Model Documentation for User
     * @param submitterIn User
     */
    public void setSubmitter(User submitterIn)
    {
        this.submitter = submitterIn;
    }

    private Collection<TimeAllocation> allocations = new HashSet<TimeAllocation>();

    /**
     * TimeAllocation represents a time period for which the timecard submitter worked on the
     * associated
     * task.
     * @return this.allocations Collection<TimeAllocation>
     */
    public Collection<TimeAllocation> getAllocations()
    {
        return this.allocations;
    }

    /**
     * TimeAllocation represents a time period for which the timecard submitter worked on the
     * associated
     * task.
     * @param allocationsIn Collection<TimeAllocation>
     */
    public void setAllocations(Collection<TimeAllocation> allocationsIn)
    {
        this.allocations = allocationsIn;
    }

    /**
     * TimeAllocation represents a time period for which the timecard submitter worked on the
     * associated
     * task.
     * @param elementToAdd TimeAllocation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addAllocations(TimeAllocation elementToAdd)
    {
        return this.allocations.add(elementToAdd);
    }

    /**
     * TimeAllocation represents a time period for which the timecard submitter worked on the
     * associated
     * task.
     * @param elementToRemove TimeAllocation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeAllocations(TimeAllocation elementToRemove)
    {
        return this.allocations.remove(elementToRemove);
    }

    // Generate 1 businessOperations
    /**
     * TODO: Model Documentation for Timecard.addTimeAllocation
     * @param timeAllocation TODO: Model Documentation for
Timecard.addTimeAllocation(timeAllocation)
     */
    public abstract void addTimeAllocation(TimeAllocation timeAllocation);

    /**
     * Returns <code>true</code> if the argument is an Timecard instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Timecard))
        {
            return false;
        }
        final Timecard that = (Timecard)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Timecard}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Timecard}.
         * @return new TimecardImpl()
         */
        public static Timecard newInstance()
        {
            return new TimecardImpl();
        }

        // requiredParams not identifier : 4 allSize minus identifier : 6 all required constructor parameters : 4 identifiers : 1 all properties :  7
        /**
         * Constructs a new instance of {@link Timecard}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param comments String
         * @param startDate Date
         * @param status TimecardStatus
         * @param submitter User
         * @return newInstance
         */
        public static Timecard newInstance(String comments, Date startDate, TimecardStatus status, User submitter)
        {
            final Timecard entity = new TimecardImpl();
            entity.setComments(comments);
            entity.setStartDate(startDate);
            entity.setStatus(status);
            entity.setSubmitter(submitter);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Timecard}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param comments String
         * @param startDate Date
         * @param status TimecardStatus
         * @param approver User
         * @param submitter User
         * @param allocations Collection<TimeAllocation>
         * @return newInstance Timecard
         */
        public static Timecard newInstance(String comments, Date startDate, TimecardStatus status, User approver, User submitter, Collection<TimeAllocation> allocations)
        {
            final Timecard entity = new TimecardImpl();
            entity.setComments(comments);
            entity.setStartDate(startDate);
            entity.setStatus(status);
            entity.setApprover(approver);
            entity.setSubmitter(submitter);
            entity.setAllocations(allocations);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Timecard other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getComments() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getComments().compareTo(other.getComments()));
            }
            if (this.getStartDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStartDate().compareTo(other.getStartDate()));
            }
            if (this.getStatus() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStatus().compareTo(other.getStatus()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}