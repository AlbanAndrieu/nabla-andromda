// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: crud/SpringCrudServiceLocator.vsl in andromda-spring-cartridge.
//
package org.andromda.timetracker;

import org.andromda.timetracker.domain.crud.TaskManageableService;
import org.andromda.timetracker.domain.crud.UserManageableService;
import org.springframework.beans.factory.access.BeanFactoryLocator;
import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.context.ApplicationContext;
import org.springframework.context.access.ContextSingletonBeanFactoryLocator;
import org.springframework.context.support.AbstractApplicationContext;

/**
 * Locates and provides all available application services.
 */
public class ManageableServiceLocator
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "beanRefFactory.xml";

    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;

    /**
     * Shouldn't be instantiated
     */
    protected ManageableServiceLocator()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ManageableServiceLocator.
     */
    private static final ManageableServiceLocator instance = new ManageableServiceLocator();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ManageableServiceLocator instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the context
     */
    public synchronized void init(String beanFactoryReferenceLocationIn)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocationIn;
        this.beanFactoryReference = null;
    }

    /**
     * The bean factory reference instance.
     */
    private BeanFactoryReference beanFactoryReference;

    /**
     * Gets the Spring ApplicationContext.
     * @return beanFactoryReference.getFactory()
     */
    protected synchronized ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = this.DEFAULT_BEAN_REFERENCE_LOCATION;
            }
            BeanFactoryLocator beanFactoryLocator =
                ContextSingletonBeanFactoryLocator.getInstance(
                    this.beanFactoryReferenceLocation);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory("beanRefFactory");
        }
        return (ApplicationContext)this.beanFactoryReference.getFactory();
    }

    /**
     * Shuts down the ManageableServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        ((AbstractApplicationContext)this.getContext()).close();
        if (this.beanFactoryReference != null)
        {
            this.beanFactoryReference.release();
            this.beanFactoryReference = null;
        }
    }

    /**
     * Gets an instance of {@link UserManageableService}.
     * @return getContext().getBean("UserManageableService")
     */
    public final UserManageableService getUserManageableService()
    {
        return (UserManageableService)
            getContext().getBean("UserManageableService");
    }

    /**
     * Gets an instance of {@link TaskManageableService}.
     * @return getContext().getBean("TaskManageableService")
     */
    public final TaskManageableService getTaskManageableService()
    {
        return (TaskManageableService)
            getContext().getBean("TaskManageableService");
    }
}