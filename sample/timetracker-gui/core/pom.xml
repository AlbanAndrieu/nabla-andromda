<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.andromda.timetracker.gui</groupId>
		<artifactId>timetracker-gui</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>core</artifactId>
	<packaging>jar</packaging>
	<name>TimeTracker GUI Core Business Tier</name>
	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>common</artifactId>
			<version>${project.version}</version>
		</dependency>
		<!--
        <dependency>
            <groupId>org.andromda</groupId>
            <artifactId>andromda-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.translationlibraries</groupId>
            <artifactId>andromda-ocl-translation-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.translationlibraries</groupId>
            <artifactId>andromda-ocl-validation-library</artifactId>
            <scope>provided</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<!-- Uncomment below if using JDBC or Test features>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<!-- Do not use 3.3.0.ga See https://jira.springsource.org/browse/SPR-7701, http://forum.springsource.org/showthread.php?89693-AnnotationSessionFactoryBean-needs-MetadataProvider -->
		<!-- validator-legacy forces an earlier version of annotations. Change scope if < JBoss6>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-commons-annotations</artifactId>
            <version>3.2.0.Final</version>
            <scope>provided</scope>
        </dependency -->
		<!-- For JBoss AS6 and earlier: Avoid NoSuchMethodException: org.hibernate.validator.ClassValidator.<init> -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-legacy</artifactId>
			<version>${hibernate.validator.legacy.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>hibernate-core</artifactId>
					<groupId>org.hibernate</groupId>
				</exclusion>
				<exclusion>
					<artifactId>hibernate-commons-annotations</artifactId>
					<groupId>org.hibernate</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- must be use with hibernate.cache.provider_class org.hibernate.cache.EhCacheProvider in persistence.xml -->
		<dependency>
			<!--<groupId>net.sf.ehcache</groupId>-->
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${org.ehcache.version}</version>
		</dependency>

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
		</dependency>
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
		</dependency>
		<dependency>
			<groupId>jboss</groupId>
			<artifactId>jboss-j2ee</artifactId>
		</dependency>
		<dependency>
			<groupId>batik</groupId>
			<artifactId>batik-ext</artifactId>
			<version>${batik.ext.version}</version>
		</dependency>
		<!--
        <dependency>
            <groupId>org.andromda</groupId>
            <artifactId>andromda-script-wrappers</artifactId>
            <scope>provided</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
		</dependency>
		<!-- validator-legacy forces an earlier version of annotations. Change scope if < JBoss6 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-commons-annotations</artifactId>
			<version>${hibernate.commons.annotations.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>${jdbc.groupId}</groupId>
			<artifactId>${jdbc.client.artifactId}</artifactId>
			<version>${jdbc.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<!-- comment resources for mvn eclipse:eclipse -->
		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
					<include>**/*.sql</include>
				</includes>
			</resource>
			<resource>
				<filtering>true</filtering>
				<directory>${maven.build.generated}/main/resources</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${maven.build.generated}/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
			</plugin>
			<!-- not needed because already provided by the database cartdrige -->
			<plugin>
				<groupId>org.andromda.maven.plugins</groupId>
				<artifactId>andromdapp-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>schema</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-entitymanager</artifactId>
						<version>${hibernate.entitymanager.version}</version>
					</dependency>
					<dependency>
						<groupId>javax.validation</groupId>
						<artifactId>validation-api</artifactId>
						<version>${validation.api.version}</version>
					</dependency>
					<dependency>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
						<version>${slf4j.version}</version>
					</dependency>
					<dependency>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-simple</artifactId>
						<version>${slf4j.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<jdbcDriver>${jdbc.driver}</jdbcDriver>
					<jdbcDriverJar>${jdbc.driver.jar}</jdbcDriverJar>
					<jdbcConnectionUrl>${jdbc.url}</jdbcConnectionUrl>
					<jdbcUsername>${jdbc.username}</jdbcUsername>
					<jdbcPassword>${jdbc.password}</jdbcPassword>
					<!-- set this to false if you don't want to execute
                         the generated SQL scripts (creates and saves DDL under app/src/main/sql/schema*.sql -->
					<executeScripts>true</executeScripts>
					<properties>
						<property>
							<name>mappingsLocation</name>
							<!--<value>${project.basedir}/${maven.build.generated}/main/java</value>-->
							<value>${project.basedir}/${target.dir}/classes</value>
						</property>
						<property>
							<name>mappingFileExtension</name>
							<value>hbm.xml</value>
						</property>
						<property>
							<name>createOutputPath</name>
							<value>${project.basedir}/../app/src/main/sql/schema-create.sql</value>
						</property>
						<property>
							<name>dropOutputPath</name>
							<value>${project.basedir}/../app/src/main/sql/schema-drop.sql</value>
						</property>
					</properties>
					<!-- You might need to execute additional scripts, just uncomment and add
                         them here:
                    <scripts>
                        <script>${project.basedir}/path/to/scripts/script1.sql</script>
                        <script>${project.basedir}/path/to/scripts/script2.sql</script>
                    </scripts>
                    -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>hibernate3-maven-plugin</artifactId>
				<version>${hibernate3.maven.plugin.version}</version>
				<executions>
					<execution>
						<id>hbm2ddl</id>
						<phase>process-classes</phase>
						<goals>
							<goal>hbm2ddl</goal>
						</goals>
					</execution>
					<execution>
						<id>hbm2doc</id>
						<phase>site</phase>
						<goals>
							<goal>hbm2doc</goal>
							<goal>hbm2cfgxml</goal>
							<!--<goal>hbm2java</goal>-->
							<!--<goal>hbm2hbmxml</goal>-->
							<!--<goal>hbmtemplate</goal>-->
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-core</artifactId>
						<!--<version>${hibernate3.version}</version>-->
						<version>${hibernate.core.version}</version>
					</dependency>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-entitymanager</artifactId>
						<!--<version>${hibernate3.version}</version>-->
						<version>${hibernate.entitymanager.version}</version>
					</dependency>
					<dependency>
						<groupId>javax.validation</groupId>
						<artifactId>validation-api</artifactId>
						<version>${validation.api.version}</version>
					</dependency>
					<dependency>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
						<version>${slf4j.version}</version>
					</dependency>
					<dependency>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-simple</artifactId>
						<version>${slf4j.version}</version>
					</dependency>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-validator</artifactId>
						<version>${hibernate.validator.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<components>
						<component>
							<name>hbm2ddl</name>
							<implementation>configuration</implementation>
						</component>
						<component>
							<name>hbm2doc</name>
							<outputDirectory>${target.dir}/site/hibernate3/javadoc</outputDirectory>
						</component>
						<component>
							<name>hbm2cfgxml</name>
							<outputDirectory>${target.dir}/site/hibernate3/generated-mappings</outputDirectory>
							<!--<implementation>annotationconfiguration</implementation>-->
							<implementation>configuration</implementation>
						</component>
					</components>
					<componentProperties>
						<!--hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect-->
						<export>false</export>
						<!-- do not export to the database: tries to use jdbc datasource -->
						<drop>true</drop>
						<create>true</create>
						<format>true</format>
						<jdk5>true</jdk5>
						<!--<persistenceunit>${project.parent.artifactId}</persistenceunit>-->
						<!--<configurationfile>src/main/resources/hibernate.cfg.xml</configurationfile>-->
						<configurationfile>${target.dir}/classes/hibernate.cfg.xml</configurationfile>
						<propertyfile>${target.dir}/classes/jdbc.properties</propertyfile>
						<outputfilename>schema-hibernate.sql</outputfilename>
						<!--
                  <revengfile>${target.dir}/classes/hibernate.reveng.xml</revengfile>
                  <propertyfile>${target.dir}/classes/jdbc.properties</propertyfile>
                  -->
					</componentProperties>
				</configuration>
			</plugin>
			<!-- H2 chokes on 'ENGINE=InnoDB' in DDL, remove from generated SQL before running against H2 DB >
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <execution>
                  <phase>generate-test-sources</phase>
                  <configuration>
                    <target>
                      <replace dir="${basedir}/../app/src/main/sql" value="">
                        <include name="schema.sql"/>
                        <replacetoken> ENGINE=InnoDB</replacetoken>
                      </replace>
                    </target>
                  </configuration>
                  <goals>
                    <goal>run</goal>
                  </goals>
                </execution>
              </executions>
            </plugin-->
			<!-- Run h2 tcp server manually by 'mvn exec:java sql:execute' for local unit testing, this is configuration only, not run during build -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${maven.exec.plugin.version}</version>
				<executions>
					<execution>
						<!--phase>test-compile</phase-->
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<mainClass>org.andromda.dbtest.H2</mainClass>
					<classpathScope>test</classpathScope>
					<workingDirectory>${project.basedir}/${target.dir}</workingDirectory>
					<arguments></arguments>
				</configuration>
			</plugin>
			<!-- See http://mojo.codehaus.org/sql-maven-plugin/examples/execute.html -->
			<!-- Can't connect to the h2 process outside of the mvn JVM because it locks the DB -->
			<!-- See http://www.h2database.com/html/cheatSheet.html -->
			<!-- Can't use in-memory DB for tomcat/jetty initialization - goes away on exit -->
			<!-- Use for in-memory DB jdbc:h2:timetracker;MODE=MySQL for in-JVM connections only, but it must be started within maven -->
			<!-- Use for server DB jdbc:h2:tcp://localhost/timetracker;MODE=MySQL for external connections, but it must be started outside maven -->
			<!-- default-cli execution id allows us to run the same configuration from the mvn command line -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>${maven.sql.plugin.version}</version>
				<executions>
					<execution>
						<id>default-cli</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<autocommit>true</autocommit>
							<!-- Ascending alphabetical order, not the order of files in includes -->
							<!--<orderFile>ascending</orderFile>-->
							<fileset>
								<basedir>${basedir}/../app/src/main/sql</basedir>
								<includes>
									<!--<include>schema.sql</include>-->
									<!--
                                    <include>static-data-insert.sql</include>
                                    <include>test-data-insert.sql</include>
                                    -->
								</includes>
							</fileset>
							<!-- We continue because database can be already created and data already inserted -->
							<onError>continue</onError>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<driver>${jdbc.driver}</driver>
					<url>${jdbc.url}</url>
					<username>${jdbc.username}</username>
					<password>${jdbc.password}</password>
					<autocommit>true</autocommit>
					<skip>${maven.test.skip}</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ejb-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
						</manifest>
					</archive>
					<generateClient>true</generateClient>
					<excludes>
						<exclude>**/*.ref</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
