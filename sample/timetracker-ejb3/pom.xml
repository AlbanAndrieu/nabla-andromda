<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.nabla.project.uml.timetracker</groupId>
		<artifactId>sample</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<groupId>org.andromda.timetracker.ejb3</groupId>
	<artifactId>timetracker-ejb3</artifactId>
	<packaging>pom</packaging>
	<name>TimeTracker EJB3</name>
	<description>The TimeTracker EJB3 Project.</description>
	<modules>
		<!-- Save the values used to generate this project from andromdapp
        ejb3Persistence=$ejb3Persistence
        ear=true
        ejb=$ejb
        ejb3=true
        transactionPersistenceType=ejb3
        jsr181Webservice=true
        hibernate=$hibernate
        spring=$spring
        webservice=true
        web=true
        struts=$struts
        jsf=true
        cxf=$cxf
        rest=$rest
        ear=true
        jbossSeam=false
        soapStack=$soapStack
        -->
		<module>mda</module>
		<module>common</module>
		<module>database</module>
		<!--hibernateVersion 3 only -->
		<module>core</module>
		<!--<module>core-test</module>-->
		<module>service</module>
		<!--hibernateVersion 3 only -->
		<module>war-base</module>
		<module>web</module>
		<module>app</module>
		<module>client</module>
	</modules>
	<properties>

		<application.context>${application.id}</application.context>
		<application.debug>true</application.debug>
		<application.description>The Nabla Reference Implementation is a Maven multi module project
    	  you can use as a template for your own JBoss Seam project</application.description>
		<application.display.name>Nabla Reference Implementation</application.display.name>
		<application.distributable>false</application.distributable>
		<application.id>${project.parent.artifactId}</application.id>
		<!-- TODO jdkDebug -->
		<!-- JBoss JNDI Pattern -->
		<application.jndi.pattern>${ejb.jndi.pattern}</application.jndi.pattern>
		<!-- OpenEJB JNDI Pattern -->
		<!--use same propertie as jboss5x profile for openejb to work -->
		<application.jndi.pattern.test>${ejb.jndi.pattern.test}</application.jndi.pattern.test>
		<!-- hint: same value as artifactId -->
		<application.name>TimeTracker</application.name>

		<!--<el.api.version>1.0</el.api.version>-->
		<!--OK <el.api.version>2.2.1-b04</el.api.version>-->
		<!--OK<jboss.el.version>1.0_02.CR6</jboss.el.version>-->
		<!--<jboss.el.version>2.0.1.GA</jboss.el.version>-->
		<!--<gwt.version>1.5.2</gwt.version>-->

		<!--<myfaces.version>2.0.2</myfaces.version>-->

		<application.package>org.andromda.timetracker</application.package>

		<application.unpack.modules>false</application.unpack.modules>
		<application.web.context>${application.context}</application.web.context>
		<database.name>${application.id}</database.name>
		<debug>true</debug>

		<ds.jndi.name>${application.id}</ds.jndi.name>

		<!-- see components.properties or components.xml -->
		<ejbJndiPattern>\#{ejbName}/Local</ejbJndiPattern>
		<hibernate.default_batch_fetch_size>0</hibernate.default_batch_fetch_size>
		<hibernate.formatsql>true</hibernate.formatsql>
		<!-- app.unpack.modules=false -->
		<!--<ejb.jndi.pattern>java:app/core-${project.version}.jar/#{ejbName}</ejb.jndi.pattern>-->
		<!--<ejb.jndi.pattern.test>${ejb.jndi.pattern}</ejb.jndi.pattern.test>-->
		<!--<ejb.jndi.pattern.test>/#{ejbName}/Local</ejb.jndi.pattern.test>-->
		<!--<ejb.jndi.mappedname.pattern>java:</ejb.jndi.mappedname.pattern> check ServiceLocator.java-->

		<hibernate.hbm2ddl>create-drop</hibernate.hbm2ddl>
		<!-- update -->
		<hibernate.hbm2ddl.test>create-drop</hibernate.hbm2ddl.test>
		<hibernate.showsql>true</hibernate.showsql>
		<jndiPattern>${ejbJndiPattern}</jndiPattern>
		<!--
        <andromda.version>3.6</andromda.version>
        <hibernate3.maven.plugin.version>2.2</hibernate3.maven.plugin.version>
        <maven.exec.plugin.version>1.2.1</maven.exec.plugin.version>
        <maven.sql.plugin.version>1.5</maven.sql.plugin.version>
        <maven.ejb.plugin.version>2.3</maven.ejb.plugin.version>
        <maven.surefire.plugin.version>2.12</maven.surefire.plugin.version>
        <maven.default.skin.version>1.0</maven.default.skin.version>
        <doxia.module.twiki.version>1.1.3</doxia.module.twiki.version>
        <maven.build.helper.plugin.version>1.5</maven.build.helper.plugin.version>
        <lifecycle.mapping.version>1.0.0</lifecycle.mapping.version>
        <maven.compiler.plugin.version>2.3.2</maven.compiler.plugin.version>
        <antlr.version>2.7.7</antlr.version>
        <log4j.version>1.2.16</log4j.version>
        <junit.version>4.10</junit.version>
        <testng.version>6.3</testng.version>
        <servlet.api.version>2.5</servlet.api.version>
        <hibernate.core.version>3.6.8.Final</hibernate.core.version>
        <hibernate.entitymanager.version>3.6.8.Final</hibernate.entitymanager.version>
        <hibernate.annotations.version>3.4.0.GA</hibernate.annotations.version>
        <hibernate.commons.annotations.version>3.2.0.Final</hibernate.commons.annotations.version>
        <maven.build.generated>src/generated</maven.build.generated>
        -->
		<!-- WORKS <commons.digester.version>1.8.1</commons.digester.version> -->
		<!-- NOK for hibernate3-maven-plugin in database -->
		<!-- WORKS with jboss 7 but not openejb -->
		<!--<hibernate.core.version>3.6.9.Final</hibernate.core.version>-->
		<!--
        <hibernate.commons.annotations.version>3.2.0.Final</hibernate.commons.annotations.version>
        -->
		<!-- WORKS with openejb
        <hibernate.core.version>3.3.2.GA</hibernate.core.version>
        <hibernate.entitymanager.version>${hibernate.core.version}</hibernate.entitymanager.version>
        -->
		<!-- <hibernate.validator.version>4.2.0.Final</hibernate.validator.version> -->
		<!--error in test <hibernate.annotations.version>3.2.0.ga</hibernate.annotations.version>-->
		<!--<hibernate.entitymanager.version>3.4.0.GA</hibernate.entitymanager.version>-->
		<!--
        <hibernate.core.version>3.6.10.Final</hibernate.core.version>
        -->
		<!--<sun.jsf.api.version>${sun.jsf.version}</sun.jsf.api.version>-->
		<!--<sun.jsf.impl.version>${sun.jsf.version}</sun.jsf.impl.version>-->
		<!--<jsf.api.version>1.2_15</jsf.api.version>-->
		<!--<jsf.impl.version>1.2_15</jsf.impl.version>-->
		<!--<hibernate.jpa.api.version>1.0.1.Final</hibernate.jpa.api.version>        -->
		<org.jboss.arquillian.seam2.version>1.0.0.Final-SNAPSHOT</org.jboss.arquillian.seam2.version>
		<!--OK <hibernate.validator.version>4.2.0.Final</hibernate.validator.version> TODO -->
		<!--error in test <hibernate.annotations.version>3.2.0.ga</hibernate.annotations.version>-->

		<!--<hibernate3.version>3.6.8.Final</hibernate3.version>-->
		<!--<slf4j.version>1.5.8</slf4j.version>-->
		<!--<jsf.version>1.2_10</jsf.version>-->
		<!--<javax.faces.version>1.2_12</javax.faces.version>-->
		<!--<richfaces.version>3.1.2.GA</richfaces.version>-->
		<!--<richfaces.version>3.3.2.SR1</richfaces.version>-->
		<!--OK <richfaces.version>3.3.3.Final</richfaces.version>-->
		<!--<drools.version>5.0.1</drools.version>-->
		<!--<drools.version>5.3.0.Final</drools.version>-->

		<!--OK <jboss.cache.version>1.4.1.SP9</jboss.cache.version>-->
		<!--<org.mvel.mvel2.version>2.0.10-SNAPSHOT</org.mvel.mvel2.version>-->
		<org.mvel.mvel2.version>2.1.0.Final</org.mvel.mvel2.version>
		<!-- transactionManagerLookupClass -->

		<pu.hibernate.transaction.manager_lookup_class>org.hibernate.transaction.JBossTransactionManagerLookup</pu.hibernate.transaction.manager_lookup_class>
		<pu.hibernate.transaction.manager_lookup_class.test>org.hibernate.transaction.JBossTransactionManagerLookup</pu.hibernate.transaction.manager_lookup_class.test>
		<!--<pu.hibernate.transaction.manager_lookup_class.test>org.apache.openejb.hibernate.TransactionManagerLookup</pu.hibernate.transaction.manager_lookup_class.test>-->

		<!--
		<pu.hibernate.transaction.manager_lookup_class>org.hibernate.service.jta.platform.spi.JtaPlatform</pu.hibernate.transaction.manager_lookup_class>
		<pu.hibernate.transaction.manager_lookup_class.test>org.hibernate.service.jta.platform.spi.JtaPlatform</pu.hibernate.transaction.manager_lookup_class.test>
		-->

		<pu.jboss.entity.manager.factory.jndi.name>java:/myEntityManagerFactory</pu.jboss.entity.manager.factory.jndi.name>
		<pu.jta.data.source>${datasource}</pu.jta.data.source>
		<pu.name>${application.id}</pu.name>
		<!--<pu.transaction-type>RESOURCE_LOCAL</pu.transaction-type>-->
		<pu.transaction-type>JTA</pu.transaction-type>
		<!--<puJndiName>java\:comp/env/core-test/pu</puJndiName>-->
		<puJndiName>#null</puJndiName>
		<seamBootstrapsPu>true</seamBootstrapsPu>
		<!--<seamEmfRef>\#null</seamEmfRef>-->
		<seamEmfRef>#myEntityManagerFactory</seamEmfRef>
		<!--java:/${application.id}EntityManagerFactory-->
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Arquillian : http://arquillian.org/guides/getting_started_fr -->

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
		of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
		of artifacts. We use this here so that we always get the correct versions
		of artifacts. Here we use the jboss-javaee-6.0-with tools stack (you can
		read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
		for your project, such as Arquillian for testing) -->
			<!--
	<dependency>
		<groupId>org.jboss.bom</groupId>
		<artifactId>jboss-javaee-6.0-with-tools</artifactId>
		<version>${org.jboss.bom.jboss.javaee6.with.tools.version}</version>
		<type>pom</type>
		<scope>import</scope>
	</dependency>
	-->

			<!-- JBoss distributes a complete set of Java EE 6 APIs including
            a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
            a collection) of artifacts. We use this here so that we always get the correct
            versions of artifacts. Here we use the jboss-javaee-6.0-with-hibernate stack
            (you can read this as the JBoss stack of the Java EE Web Profile 6 APIs with
            extras from the Hibernate family of projects) -->
			<!--
        <dependency>
            <groupId>org.jboss.bom</groupId>
            <artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
            <version>${jboss.bom.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        -->

			<!--
            <dependency>
                <groupId>org.andromda.cartridges</groupId>
                <artifactId>andromda-gui-cartridge-components</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
            </dependency>
            -->
			<!--
            <dependency>
                <groupId>org.andromda.cartridges</groupId>
                <artifactId>andromda-gui-cartridge</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
            </dependency>
            -->

			<!-- TODO check in core -->
			<!-- replace this by slf4j-api and slf4j-simple
            http://pwu-developer.blogspot.com/2010/08/caused-by-javalangerror-this-version-of.html
            <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                    <version>${slf4j.version}</version>
                <scope>provided</scope>
            </dependency>
            -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j.version}</version>
				<scope>provided</scope>
			</dependency>

			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib-nodep</artifactId>
				<version>${cglib.nodep.version}</version>
				<scope>runtime</scope>
			</dependency>

			<dependency>
				<groupId>org.andromda</groupId>
				<artifactId>andromda-utils</artifactId>
				<version>${andromda.version}</version>
				<scope>runtime</scope>
				<exclusions>
					<exclusion>
						<artifactId>xml-apis</artifactId>
						<groupId>xml-apis</groupId>
					</exclusion>
					<exclusion>
						<artifactId>xercesImpl</artifactId>
						<groupId>xerces</groupId>
					</exclusion>
					<exclusion>
						<artifactId>xalan</artifactId>
						<groupId>xalan</groupId>
					</exclusion>
					<exclusion>
						<artifactId>log4j</artifactId>
						<groupId>log4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.andromda.translationlibraries</groupId>
				<artifactId>andromda-ocl-query-library</artifactId>
				<version>${andromda.version}</version>
				<scope>runtime</scope>
				<exclusions>
					<exclusion>
						<artifactId>log4j</artifactId>
						<groupId>log4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- This dependency provides the ability to implement your
                 business logic in an interpreted manner during development on
                 your local machine -->
			<!--
            <dependency>
                <groupId>org.andromda</groupId>
                <artifactId>andromda-script-wrappers</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
            </dependency>
            -->

			<!--
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-annotations</artifactId>
                <version>${hibernate.annotations.version}</version>
            </dependency>
            -->

			<!--dependency>
                <groupId>taglibs</groupId>
                <artifactId>standard</artifactId>
                <version>1.1.2</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jsp-api</artifactId>
                <version>2.0</version>
                <scope>provided</scope>
            </dependency-->

			<!--dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.18</version>
                <scope>test</scope>
            </dependency-->
		</dependencies>
	</dependencyManagement>
	<build>
		<!--<defaultGoal>install</defaultGoal>-->
		<plugins>
			<!--
	      Maven filter properties are	ony visible to resources and can not be
	      accessed from the POM. This	is where the Properties	Maven Plugin makes
	      our	life a little easier when dealing with properties that we need to
	      access inside our POM. It provides goals to	read and write properties
	      from and to	files, and also	to set system properties. It's main use-case
	      is loading properties from files instead of	declaring them in pom.xml,
	      something that comes in handy when dealing with different environments.
	      The	plugin is configured to	read properties	during the "validate" phase
	      and	the properties are then	accessible from	the pom.
	    -->
			<!-- TODO DO NOT USE filter for portability purpose -->
			<!--
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>properties-maven-plugin</artifactId>
	      <executions>
	      -->
			<!--
	        <execution>
	    	<id>p-show-properties</id>
	    	<phase>generate-resources</phase>
	    	<goals>
	    	  <goal>write-active-profile-properties</goal>
	    	</goals>
	    	<configuration>
	    	  <outputFile>
	    	    ${project.build.outputDirectory}/project-${environment}.properties
	    	  </outputFile>
	    	</configuration>
	        </execution>
	        -->
			<!--
	        <execution>
	    		<configuration>
	    		  <files>
	    		    -->
			<!--<file>${home.dir}/filters/project-${environment}.properties</file>-->
			<!--
	    		    <file>${home.dir}/build-tools/src/main/resources/project/project-development.properties</file>
	    		  </files>
	    		</configuration>
	        </execution>
	      </executions>
	    </plugin>
	    -->
			<!--
            <plugin>
                <groupId>com.ctp.seam.maven</groupId>
                <artifactId>maven-hotdeploy-plugin</artifactId>
                <extensions>true</extensions>
            </plugin>
            -->
			<plugin>
				<!-- run with 'mvn cli:execute-phase' -->
				<groupId>org.twdata.maven</groupId>
				<artifactId>maven-cli-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>hibernate-3</id>
			<activation>
				<property>
					<name>profile.activation</name>
				</property>
			</activation>
			<!-- compatibility https://hibernate.onjira.com/browse/HVAL-75 -->
			<properties>
				<!--NOK error in MovieTest <spring3.version>3.2.4.RELEASE</spring3.version>-->
				<!--NOK error in MovieTest <spring3.version>3.2.9.RELEASE</spring3.version>-->

				<!-- ehcache -->
				<hibernate.cache.region.factory.class>net.sf.ehcache.hibernate.EhCacheRegionFactory</hibernate.cache.region.factory.class>

				<hibernate.core.version>${hibernate.legacy.core.version}</hibernate.core.version>
				<hibernate.entitymanager.version>${hibernate.legacy.entitymanager.version}</hibernate.entitymanager.version>
				<hibernate.infinispan.version>3.6.8.Final</hibernate.infinispan.version>
				<hibernate.legacy.entitymanager.version>3.4.0.GA</hibernate.legacy.entitymanager.version>
				<hibernate.legacy.search.version>${hibernate.search.version}</hibernate.legacy.search.version>
				<!--OK <hibernate.core.version>3.3.2.GA</hibernate.core.version>-->
				<!--OK <hibernate.annotations.version>3.4.0.GA</hibernate.annotations.version>-->
				<!--<hibernate.commons.annotations.version>3.3.0.ga</hibernate.commons.annotations.version> instead 3.4.0.GA (add antlr)-->
				<!--OK <hibernate.commons.annotations.version>3.2.0.Final</hibernate.commons.annotations.version>-->
				<!--OK <hibernate.entitymanager.version>3.4.0.GA</hibernate.entitymanager.version>-->
				<!--OK <hibernate.validator.version>3.1.0.GA</hibernate.validator.version>-->
				<!--<seam.version>2.3.0.Final</seam.version>-->
				<!--<hibernate.validator.version>4.3.1.Final</hibernate.validator.version> -->
				<!--<hibernate.search.version>3.0.0.GA</hibernate.search.version> does not works-->
				<hibernate.search.version>3.1.1.GA</hibernate.search.version>
				<!--OK <hibernate.legacy.validator.version>3.1.0.GA</hibernate.legacy.validator.version>-->
				<!--OK <hibernate.legacy.validator.version>4.1.0.Final</hibernate.legacy.validator.version>-->
				<hibernate.validator.version>${hibernate.legacy.validator.version}</hibernate.validator.version>
				<!--NOK error in MovieTest <spring3.version>3.2.7.RELEASE</spring3.version>-->
				<spring3.version>3.2.3.RELEASE</spring3.version>
			</properties>
		</profile>
		<profile>
			<!-- https://spring.io/blog/2012/04/06/migrating-to-spring-3-1-and-hibernate-4-1 -->
			<id>hibernate-3-6-NOK</id>
			<!--
    		<activation>
    			<property>
    				<name>!profile.activation</name>
    			</property>
    		</activation>
    		-->
			<properties>
				<!--NOK error in MovieTest <spring3.version>3.2.4.RELEASE</spring3.version>-->
				<!--NOK error in MovieTest <spring3.version>3.2.9.RELEASE</spring3.version>-->

				<ehcache.version>2.6.2</ehcache.version>
				<!-- ehcache -->
				<hibernate.cache.region.factory.class>net.sf.ehcache.hibernate.EhCacheRegionFactory</hibernate.cache.region.factory.class>

				<!--<hibernate.validator.version>4.0.2.GA</hibernate.validator.version>-->
				<!-- works with hibernate.core.version 3.6.8.GA -->
				<!--
        		<hibernate.core.version>3.6.7.Final</hibernate.core.version>
        		<hibernate.commons.annotations.version>3.2.0.Final</hibernate.commons.annotations.version>
        		<hibernate.entitymanager.version>3.6.7.Final</hibernate.entitymanager.version>
        		<hibernate.search.version>4.2.0.Beta1</hibernate.search.version>
        		<hibernate.validator.version>4.3.1.Final</hibernate.validator.version>
        		-->

				<!--<hibernate.core.version>4.3.5.Final</hibernate.core.version>-->
				<hibernate.core.version>4.1.9.Final</hibernate.core.version>
				<hibernate.entitymanager.version>${hibernate.legacy.entitymanager.version}</hibernate.entitymanager.version>
				<hibernate.infinispan.version>3.6.8.Final</hibernate.infinispan.version>

				<!--<hibernate.jpamodelgen.version>1.3.0.Final</hibernate.jpamodelgen.version>-->
				<hibernate.jpamodelgen.version>4.3.5.Final</hibernate.jpamodelgen.version>

				<!--
        		<hibernate.legacy.core.version>3.3.2.GA</hibernate.legacy.core.version>
        		<hibernate.core.version>${hibernate.legacy.core.version}</hibernate.core.version>
        		-->
				<hibernate.legacy.entitymanager.version>4.1.9.Final</hibernate.legacy.entitymanager.version>
				<hibernate.legacy.search.version>${hibernate.search.version}</hibernate.legacy.search.version>
				<hibernate.legacy.validator.version>4.1.0.Final</hibernate.legacy.validator.version>

				<hibernate.search.version>3.1.1.GA</hibernate.search.version>
				<!--<hibernate.validator.version>${hibernate.legacy.validator.version}</hibernate.validator.version>-->
				<hibernate.validator.version>4.2.0.Final</hibernate.validator.version>
				<javax.servlet.api.version>3.1.0</javax.servlet.api.version>

				<openejb.core.version>4.6.0.2</openejb.core.version>
				<openejb.javaee.api.version>6.0-6</openejb.javaee.api.version>
				<!-- NOK <javassist.version>3.17.1-GA</javassist.version>-->
				<org.javassist.version>3.15.0-GA</org.javassist.version>
				<!-- http://docs.jboss.org/seam/latest/reference/html/migration23.html -->
				<seam.version>2.3.1.Final</seam.version>

				<servlet.api.version>3.0-alpha-1</servlet.api.version>
				<slf4j.version>1.6.2</slf4j.version>
				<!--NOK error in MovieTest <spring3.version>3.2.7.RELEASE</spring3.version>-->
				<spring3.version>3.2.3.RELEASE</spring3.version>
			</properties>
		</profile>
		<profile>
			<id>hibernate-4</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<!--
			<dependencies>
				<dependency>
				    <groupId>org.jboss.as</groupId>
				    <artifactId>jboss-as-arquillian-container-managed</artifactId>
				    <version>${version.org.jboss.as.arquillian.container}</version>
				    <scope>test</scope>
				</dependency>
			</dependencies>
			-->
			<properties>
				<antlr.version>2.7.6</antlr.version>
				<!-- TODO http://www.mastertheboss.com/jsf/installing-jsf-22-on-jboss-as-7 -->
				<aspectj.version>1.8.1</aspectj.version>
				<!-- OK see http://central.maven.org/maven2/org/jboss/bom/jboss-bom-parent/1.0.7.Final/jboss-bom-parent-1.0.7.Final.pom -->
				<!--<cxf.version>2.7.1</cxf.version>-->
				<cxf.version>2.7.14</cxf.version>
				<dom4j.version>1.6.1-brew</dom4j.version>
				<!--<ehcache.version>${hibernate.core.version}</ehcache.version>-->
				<!--<ehcache.core.version>2.6.9</ehcache.core.version>-->
				<ehcache.core.version>${ehcache.version}</ehcache.core.version>
				<ehcache.jar.version>${ehcache.version}</ehcache.jar.version>
				<ehcache.version>2.8.3</ehcache.version>
				<!--<el.api.version>1.0</el.api.version>-->
				<el.api.version>1.0</el.api.version>
				<!-- ehcache -->
				<!-- For Hibernate 4, use org.hibernate.cache.ehcache.EhCacheRegionFactory instead of net.sf.ehcache.hibernate.EhCacheRegionFactory and org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory instead of net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory -->
				<hibernate.cache.region.factory.class>org.hibernate.cache.ehcache.EhCacheRegionFactory</hibernate.cache.region.factory.class>
				<hibernate.common.commons.annotations.version>4.0.1.Final</hibernate.common.commons.annotations.version>
				<!--<jsf.version>1.2_15</jsf.version>-->
				<!--<hibernate.core.version>4.3.0.Final</hibernate.core.version>-->
				<hibernate.core.version>4.0.1.Final</hibernate.core.version>
				<!-- OK http://central.maven.org/maven2/org/jboss/bom/jboss-bom-parent/1.0.7.Final/jboss-bom-parent-1.0.7.Final.pom -->
				<!-- OK <hibernate.entitymanager.version>4.3.0.Final</hibernate.entitymanager.version>-->
				<hibernate.entitymanager.version>4.0.1.Final</hibernate.entitymanager.version>
				<!--<infinispan.version>5.1.3.FINAL</infinispan.version>-->
				<hibernate.infinispan.version>${hibernate.core.version}</hibernate.infinispan.version>
				<hibernate.search.version>4.5.0.Alpha2</hibernate.search.version>
				<!--<hibernate.validator.version>5.1.1.Final</hibernate.validator.version>-->
				<hibernate.validator.version>4.2.0.Final</hibernate.validator.version>
				<javax.persistence.version>1.0</javax.persistence.version>
				<javax.servlet.api.version>3.1.0</javax.servlet.api.version>
				<jboss.logging.version>3.1.0.GA</jboss.logging.version>
				<org.apache.myfaces.trinidad.version>2.0.1</org.apache.myfaces.trinidad.version>
				<!-- TODO use <property name="hibernate.cache.region.factory_class">${hibernate.cache.region.factory.class}</property> in hibernate.cfg.xml -->
				<!-- NOK <javassist.version>3.17.1-GA</javassist.version>-->
				<org.javassist.version>3.15.0-GA</org.javassist.version>
				<!--<org.jboss.arquillian.version>1.0.0.CR7</org.jboss.arquillian.version>-->
				<!--<org.jboss.arquillian.version>1.1.0.Final</org.jboss.arquillian.version>-->
				<!--1.1.5.Final-->
				<!--<org.jboss.arquillian.bom.version>1.1.0.Final</org.jboss.arquillian.bom.version>-->
				<org.jboss.arquillian.bom.version>${org.jboss.arquillian.version}</org.jboss.arquillian.bom.version>
				<richfaces.version>4.3.3.Final</richfaces.version>
				<!--<seam.version>2.3.1.Final</seam.version>-->
				<!--<seam.bom.version>3.2.0-SNAPSHOT</seam.bom.version>-->
				<seam.bom.version>3.1.0.Final</seam.bom.version>
				<!--<openejb.javaee.api.version>6.0-5</openejb.javaee.api.version>-->
				<!--<openejb.core.version>4.6.0.2</openejb.core.version>-->
				<!--<ejb3.persistence.version>3.3.2.Beta1</ejb3.persistence.version>-->
				<!--<hibernate.commons.annotations.version>4.0.1.Final</hibernate.commons.annotations.version> NOK-->
				<!--<hibernate.annotations.version>3.4.0.GA</hibernate.annotations.version>-->

				<!-- TO TEST
				<hibernate.core.version>4.0.1.Final</hibernate.core.version>
				<hibernate.entitymanager.version>${hibernate.core.version}</hibernate.entitymanager.version>
				<hibernate.commons.annotations.version>${hibernate.core.version}</hibernate.commons.annotations.version>
				<hibernate.validator.version>4.2.0.Final</hibernate.validator.version>
				-->
				<servlet.api.version>3.0-alpha-1</servlet.api.version>
				<!--<spring3.version>4.0.0.RELEASE</spring3.version>-->
				<spring3.version>${spring4.version}</spring3.version>
				<!--<org.jboss.shrinkwrap.resolver.version>2.0.0-alpha-1</org.jboss.shrinkwrap.resolver.version>-->
				<!--<org.jboss.shrinkwrap.bom.version>2.1.1</org.jboss.shrinkwrap.bom.version>-->

				<sun.jsf.version>2.1.7</sun.jsf.version>
				<!--<validation.api.version>1.1.0.Beta2</validation.api.version>-->
				<validation.api.version>1.0.0.GA</validation.api.version>
			</properties>
			<dependencyManagement>
				<!--
    		    <dependencies>
    				<dependency>
    		               <groupId>org.jboss.seam</groupId>
    		               <artifactId>bom</artifactId>
    		               <version>${seam.version}</version>
    		               <type>pom</type>
    		               <scope>import</scope>
    		           </dependency>
    		    </dependencies>
    		    -->
			</dependencyManagement>
		</profile>
	</profiles>
</project>
