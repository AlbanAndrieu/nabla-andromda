// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by DaoBase.vsl in andromda-ejb3-cartridge on 04/04/2012 15:12:35.
//
package org.andromda.timetracker.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.Local;
import javax.ejb.SessionContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserVO;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.hibernate.Session;
import org.jboss.seam.annotations.In;

/**
 * <p>
 * Base EJB3 DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>User</code>.
 * </p>
 * 
 * @see UserDao
 */
@TransactionAttribute(TransactionAttributeType.REQUIRED)
@Local(
{ UserDao.class })
public abstract class UserDaoBase implements UserDao
{
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(UserDaoBase.class);

    /** Session Context Injection */
    @Resource
    protected SessionContext                     context;

    /**
     * Inject persistence context timetracker-ejb3
     */
    // @PersistenceContext(unitName = "timetracker-ejb3")
    @In
    protected EntityManager                      entityManager;

    /**
     * Inject Hibernate Session
     */
    // @PersistenceContext(unitName = "timetracker-ejb3")
    @In
    protected Session                            hibernateSession;

    // ------ DAO Injections ------

    /**
     * Inject DAO UserRoleDao
     */
    // @EJB
    // protected UserRoleDao userRoleDao;

    /**
     * Gets the reference to <code>userRoleDao</code>.
     */
    // protected UserRoleDao getUserRoleDao()
    // {
    // return this.userRoleDao;
    // }

    /**
     * @see UserDao#load(int,)
     */
    @Override
    public Object load(final int transform, final Long id) throws UserDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException("User.load - 'id' can not be null");
        }
        try
        {
            final Object entity = this.entityManager.find(User.class, id);
            return this.transformEntity(transform, (User) entity);
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#load()
     */
    @Override
    public User load(final Long id) throws UserDaoException
    {
        return (User) this.load(UserDao.TRANSFORM_NONE, id);
    }

    /**
     * @see UserDao#loadAll()
     */
    @Override
    // @SuppressWarnings({"unchecked"})
    public Collection<User> loadAll() throws UserDaoException
    {
        return this.loadAll(UserDao.TRANSFORM_NONE);
    }

    /**
     * @see UserDao#loadAll(int)
     */
    @Override
    public Collection loadAll(final int transform) throws UserDaoException
    {
        try
        {
            final Query query = this.entityManager.createNamedQuery("User.findAll");
            final List<User> results = query.getResultList();
            this.transformEntities(transform, results);
            return results;
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#create(User)
     */
    @Override
    public User create(final User user) throws UserDaoException
    {
        return (User) this.create(UserDao.TRANSFORM_NONE, user);
    }

    /**
     * @see UserDao#create(int, User)
     */
    @Override
    public Object create(final int transform, final User user) throws UserDaoException
    {
        if (user == null)
        {
            throw new IllegalArgumentException("User.create - 'user' can not be null");
        }

        try
        {
            this.entityManager.persist(user);
            this.entityManager.flush();
            return this.transformEntity(transform, user);
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#create(Collection<User>)
     */
    @Override
    // @SuppressWarnings({"unchecked"})
    public Collection<User> create(final Collection<User> entities) throws UserDaoException
    {
        return this.create(UserDao.TRANSFORM_NONE, entities);
    }

    /**
     * @see UserDao#create(int, Collection)
     */
    @Override
    @SuppressWarnings(
    { "unchecked" })
    public Collection create(final int transform, final Collection<User> entities) throws UserDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException("User.create - 'entities' can not be null");
        }
        final Collection results = new ArrayList();
        try
        {
            for (final User entity : entities)
            {
                results.add(this.create(transform, entity));
            }
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
        return results;
    }

    /**
     * @see UserDao#create(String, String, String, String, String, boolean, Date, String)
     */
    @Override
    public User create(final String username, final String password, final String firstName, final String lastName, final String email, final boolean isActive, final Date creationDate, final String comment)
            throws UserDaoException
    {
        return (User) this.create(UserDao.TRANSFORM_NONE, username, password, firstName, lastName, email, isActive, creationDate, comment);
    }

    /**
     * @see UserDao#create(int, String, String, String, String, String, boolean, Date, String)
     */
    @Override
    public Object create(final int transform, final String username, final String password, final String firstName, final String lastName, final String email, final boolean isActive, final Date creationDate,
            final String comment) throws UserDaoException
    {
        final User entity = new User();
        entity.setUsername(username);
        entity.setPassword(password);
        entity.setFirstName(firstName);
        entity.setLastName(lastName);
        // entity.setEmail(email);
        // entity.setIsActive(isActive);
        // entity.setCreationDate(creationDate);
        // entity.setComment(comment);
        return this.create(transform, entity);
    }

    /**
     * @see UserDao#update(User)
     */
    @Override
    public void update(final User user) throws UserDaoException
    {
        if (user == null)
        {
            throw new IllegalArgumentException("User.update - 'user' can not be null");
        }
        try
        {
            this.entityManager.merge(user);
            this.entityManager.flush();
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#update(Collection<User>)
     */
    @Override
    public void update(final Collection<User> entities) throws UserDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException("User.update - 'entities' can not be null");
        }
        try
        {
            for (final User entity : entities)
            {
                this.update(entity);
            }
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#remove(User)
     */
    @Override
    public void remove(final User user) throws UserDaoException
    {
        if (user == null)
        {
            throw new IllegalArgumentException("User.remove - 'user' can not be null");
        }
        try
        {
            this.entityManager.remove(user);
            this.entityManager.flush();
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#remove(Long)
     */
    @Override
    public void remove(final Long id) throws UserDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException("User.remove - 'id' can not be null");
        }
        try
        {
            final User entity = this.load(id);
            if (entity != null)
            {
                this.remove(entity);
            }
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#remove(Collection<User>)
     */
    @Override
    public void remove(final Collection<User> entities) throws UserDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException("User.remove - 'entities' can not be null");
        }
        try
        {
            for (final User entity : entities)
            {
                this.remove(entity);
            }
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#findByEmail(String)
     */
    @Override
    public User findByEmail(final String email) throws UserDaoException
    {
        return (User) this.findByEmail(UserDao.TRANSFORM_NONE, email);
    }

    /**
     * @see UserDao#findByEmail(String, String)
     */
    @Override
    public User findByEmail(final String queryString, final String email) throws UserDaoException
    {
        return (User) this.findByEmail(UserDao.TRANSFORM_NONE, queryString, email);
    }

    /**
     * @see UserDao#findByEmail(int, String)
     */
    @Override
    public Object findByEmail(final int transform, final String email) throws UserDaoException
    {
        try
        {
            final Query queryObject = this.entityManager.createNamedQuery("User.findByEmail");
            queryObject.setParameter("email", email);
            Object result = queryObject.getSingleResult();
            result = this.transformEntity(transform, (User) result);
            return result;
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#findByEmail(int, String, String)
     */
    @Override
    public Object findByEmail(final int transform, final String queryString, final String email) throws UserDaoException
    {
        try
        {
            final Query queryObject = this.entityManager.createQuery(queryString);
            queryObject.setParameter("email", email);
            Object result = queryObject.getSingleResult();
            result = this.transformEntity(transform, (User) result);
            return result;
        } catch (final Exception ex)
        {
            throw new UserDaoException(ex);
        }
    }

    /**
     * @see UserDao#getUserDetails(String)
     */
    @Override
    public User getUserDetails(final String username)
    {
        if (username == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.domain.UserDao.getUserDetails(String username) - 'username' can not be null");
        }
        try
        {
            return this.handleGetUserDetails(username);
        } catch (final Throwable th)
        {
            UserDaoBase.logger.debug("Error performing 'UserDao.getUserDetails(String username)' --> " + th);
            throw new RuntimeException("Error performing 'UserDao.getUserDetails(String username)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getUserDetails(String)}
     */
    protected abstract User handleGetUserDetails(String username) throws Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>UserDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p/>
     * This method will return instances of these types:
     * <ul>
     * <li>{@link User} - {@link #TRANSFORM_NONE}</li>
     * <li>{@link UserVO} - {@link TRANSFORM_USERVO}</li>
     * <li>{@link UserDetailsVO} - {@link TRANSFORM_USERDETAILSVO}</li>
     * </ul>
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     * 
     * @param transform one of the constants declared in {@link UserDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    protected Object transformEntity(final int transform, final User entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case UserDao.TRANSFORM_USERVO:
                    target = this.toUserVO(entity);
                    break;
                case UserDao.TRANSFORM_USERDETAILSVO:
                    target = this.toUserDetailsVO(entity);
                    break;
                case TRANSFORM_NONE: // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the {@link #transformEntity(int, User)} method. This method does not instantiate a new collection.
     * <p/>
     * Transforms into the same collection as the argument, but this time containing the transformed entities
     * This method is to be used internally only.
     * 
     * @param transform one of the constants declared in <code>UserDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int, User)
     */
    protected void transformEntities(final int transform, final Collection<User> entities)
    {
        switch (transform)
        {
            case UserDao.TRANSFORM_USERVO:
                this.toUserVOCollection(entities);
                break;
            case UserDao.TRANSFORM_USERDETAILSVO:
                this.toUserDetailsVOCollection(entities);
                break;
            case TRANSFORM_NONE: // fall-through
            default:
                // do nothing;
        }
    }

    /**
     * @see UserDao#toUserVOCollection(Collection)
     */
    @Override
    public final void toUserVOCollection(final Collection entities)
    {
        if (entities != null)
        {
            CollectionUtils.transform(entities, this.USERVO_TRANSFORMER);
        }
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the {@link UserDaoImpl} class if you intend to use reporting queries.
     * 
     * @see UserDao#toUserVO(User)
     */
    protected UserVO toUserVO(final Object[] row)
    {
        UserVO target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof User)
                {
                    target = this.toUserVO((User) object);
                    break;
                }
            }
        }
        return target;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link UserVO} using the Jakarta Commons-Collections Transformation API.
     */
    private final Transformer USERVO_TRANSFORMER = new Transformer()
                                                 {
                                                     @Override
                                                     public Object transform(final Object input)
                                                     {
                                                         Object result = null;
                                                         if (input instanceof User)
                                                         {
                                                             result = UserDaoBase.this.toUserVO((User) input);
                                                         } else if (input instanceof Object[])
                                                         {
                                                             result = UserDaoBase.this.toUserVO((Object[]) input);
                                                         }
                                                         return result;
                                                     }
                                                 };

    /**
     * @see UserDao#userVOToEntityCollection(Collection)
     */
    @Override
    public final void userVOToEntityCollection(final Collection instances)
    {
        if (instances != null)
        {
            for (final Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof UserVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.UserVOToEntityTransformer);
        }
    }

    private final Transformer UserVOToEntityTransformer = new Transformer()
                                                        {
                                                            @Override
                                                            public Object transform(final Object input)
                                                            {
                                                                return UserDaoBase.this.userVOToEntity((UserVO) input);
                                                            }
                                                        };

    /**
     * @see UserDao#toUserVO(User, UserVO)
     */
    @Override
    public void toUserVO(final User source, final UserVO target)
    {
        target.setId(source.getId());
        target.setUsername(source.getUsername());
        target.setFirstName(source.getFirstName());
        target.setLastName(source.getLastName());
    }

    /**
     * @see UserDao#toUserVO(User)
     */
    @Override
    public UserVO toUserVO(final User entity)
    {
        final UserVO target = new UserVO();
        this.toUserVO(entity, target);
        return target;
    }

    /**
     * @see UserDao#userVOToEntity(UserVO, User)
     */
    @Override
    public void userVOToEntity(final UserVO source, final User target, final boolean copyIfNull)
    {
        if (copyIfNull || (source.getUsername() != null))
        {
            target.setUsername(source.getUsername());
        }
        if (copyIfNull || (source.getFirstName() != null))
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || (source.getLastName() != null))
        {
            target.setLastName(source.getLastName());
        }
    }

    /**
     * @see UserDao#toUserDetailsVOCollection(Collection)
     */
    @Override
    public final void toUserDetailsVOCollection(final Collection entities)
    {
        if (entities != null)
        {
            CollectionUtils.transform(entities, this.USERDETAILSVO_TRANSFORMER);
        }
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the {@link UserDaoImpl} class if you intend to use reporting queries.
     * 
     * @see UserDao#toUserDetailsVO(User)
     */
    protected UserDetailsVO toUserDetailsVO(final Object[] row)
    {
        UserDetailsVO target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof User)
                {
                    target = this.toUserDetailsVO((User) object);
                    break;
                }
            }
        }
        return target;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link UserDetailsVO} using the Jakarta Commons-Collections Transformation API.
     */
    private final Transformer USERDETAILSVO_TRANSFORMER = new Transformer()
                                                        {
                                                            @Override
                                                            public Object transform(final Object input)
                                                            {
                                                                Object result = null;
                                                                if (input instanceof User)
                                                                {
                                                                    result = UserDaoBase.this.toUserDetailsVO((User) input);
                                                                } else if (input instanceof Object[])
                                                                {
                                                                    result = UserDaoBase.this.toUserDetailsVO((Object[]) input);
                                                                }
                                                                return result;
                                                            }
                                                        };

    /**
     * @see UserDao#userDetailsVOToEntityCollection(Collection)
     */
    @Override
    public final void userDetailsVOToEntityCollection(final Collection instances)
    {
        if (instances != null)
        {
            for (final Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof UserDetailsVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.UserDetailsVOToEntityTransformer);
        }
    }

    private final Transformer UserDetailsVOToEntityTransformer = new Transformer()
                                                               {
                                                                   @Override
                                                                   public Object transform(final Object input)
                                                                   {
                                                                       return UserDaoBase.this.userDetailsVOToEntity((UserDetailsVO) input);
                                                                   }
                                                               };

    /**
     * @see UserDao#toUserDetailsVO(User, UserDetailsVO)
     */
    @Override
    public void toUserDetailsVO(final User source, final UserDetailsVO target)
    {
        target.setId(source.getId());
        target.setUsername(source.getUsername());
        target.setFirstName(source.getFirstName());
        target.setLastName(source.getLastName());
        target.setPassword(source.getPassword());
        // target.setEmail(source.getEmail());
        // target.setIsActive(source.isIsActive());
        // target.setCreationDate(source.getCreationDate());
        // target.setComment(source.getComment());
        // No conversion for target.roles (can't convert source.getRoles():org.andromda.timetracker.domain.UserRole to org.andromda.timetracker.vo.UserRoleVO[])
    }

    /**
     * @see UserDao#toUserDetailsVO(User)
     */
    @Override
    public UserDetailsVO toUserDetailsVO(final User entity)
    {
        final UserDetailsVO target = new UserDetailsVO();
        this.toUserDetailsVO(entity, target);
        return target;
    }

    /**
     * @see UserDao#userDetailsVOToEntity(UserDetailsVO, User)
     */
    @Override
    public void userDetailsVOToEntity(final UserDetailsVO source, final User target, final boolean copyIfNull)
    {
        if (copyIfNull || (source.getUsername() != null))
        {
            target.setUsername(source.getUsername());
        }
        if (copyIfNull || (source.getPassword() != null))
        {
            target.setPassword(source.getPassword());
        }
        if (copyIfNull || (source.getFirstName() != null))
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || (source.getLastName() != null))
        {
            target.setLastName(source.getLastName());
        }
        // if (copyIfNull || source.getEmail() != null)
        // {
        // target.setEmail(source.getEmail());
        // }
        // if (copyIfNull || source.isIsActive() != false)
        // {
        // target.setIsActive(source.isIsActive());
        // }
        // if (copyIfNull || source.getCreationDate() != null)
        // {
        // target.setCreationDate(source.getCreationDate());
        // }
        // if (copyIfNull || source.getComment() != null)
        // {
        // target.setComment(source.getComment());
        // }
    }

    // For unit testing outside of container - persistence context not injected
    /**
     * @return the context
     */
    public SessionContext getContext()
    {
        return this.context;
    }

    /**
     * @param contextIn the context to set
     */
    public void setContext(final SessionContext contextIn)
    {
        this.context = contextIn;
    }

    /**
     * @return the emanager
     */
    public EntityManager getEmanager()
    {
        return this.entityManager;
    }

    /**
     * @param emanagerIn the emanager to set
     */
    public void setEmanager(final EntityManager emanagerIn)
    {
        this.entityManager = emanagerIn;
    }

    /**
     * @return the hibernateSession
     */
    public Session getHibernateSession()
    {
        // return this.getHibernateSessionFromEntityManager();
        return this.hibernateSession;
    }

    protected Session getHibernateSessionFromEntityManager()
    {
        if (this.entityManager.getDelegate() instanceof org.hibernate.ejb.HibernateEntityManager)
        {
            return ((org.hibernate.ejb.HibernateEntityManager) this.entityManager.getDelegate()).getSession();
        } else
        {
            return (org.hibernate.Session) this.entityManager.getDelegate();
        }
    }

    /**
     * @param hibernateSessionIn the hibernateSession to set
     */
    public void setHibernateSession(final Session hibernateSessionIn)
    {
        this.hibernateSession = hibernateSessionIn;
    }

    /**
     * Remove lifecycle method
     */
    // @Override
    // @Remove
    // @Destroy
    // public void destroy()
    // {
    // }
}
