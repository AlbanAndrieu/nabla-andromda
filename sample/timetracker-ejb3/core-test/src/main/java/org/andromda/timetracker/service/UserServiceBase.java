// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SessionBeanBase.vsl in andromda-ejb3-cartridge on 04/04/2012 15:12:34.
//
package org.andromda.timetracker.service;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Remove;

import org.andromda.timetracker.domain.User;
import org.andromda.timetracker.domain.UserDao;
import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserVO;
import org.jboss.seam.annotations.Destroy;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.datamodel.DataModel;
import org.jboss.seam.annotations.datamodel.DataModelSelection;
import org.jboss.seam.log.Log;

/**
 * Autogenerated EJB3 session bean base class UserServiceBean which contains
 * method level annotations for the session bean. All method level annotations
 * are inherited by the extending session bean class.
 * UserServiceBean is a stateful session bean and implements Serializable to maintain
 * state when bean instance not in use.
 * This Seam component is defined through META-INF/components.xml rather than
 * class level annotations.
 */
public abstract class UserServiceBase implements UserServiceLocal
{

    // ------ Session Context Injection ------

    // @Resource
    // protected SessionContext context;

    // ------ Persistence Context Definitions --------

    /**
     * Inject persistence context timetracker-ejb3
     */
    // @PersistenceContext(unitName = "timetracker-ejb3")
    // @In
    // protected EntityManager entityManager;

    // ------ DAO Injection Definitions --------

    /**
     * Inject DAO UserDao
     */
    @EJB
    // @EJB if Dao is Sateful
    // @In cannot be added with EJB
    /* (create = true, required = true) */
    private UserDao      userDao;

    // --------- Attribute Definitions ------------

    /**
     * The logger property
     */
    @Logger
    protected Log        logger;

    /**
     * The user property
     */
    @DataModelSelection
    protected User       user;

    /**
     * The userList property
     */
    @DataModel
    protected List<User> userList;

    // --------------- Constructors ---------------

    public UserServiceBase()
    {
        super();
    }

    // ------- Accessors for Attributes ----------

    // ------ DAO Getters --------

    /**
     * Get the injected DAO UserDao
     */
    protected UserDao getUserDao()
    {
        return this.userDao;
    }

    // -------- Business Methods --------------

    /**
     *
     */
    @Factory
    @Override
    public UserVO[] getAllUsers() throws UserDoesNotExistException
    {
        try
        {
            return this.handleGetAllUsers();
        } catch (final UserDoesNotExistException ex)
        {
            throw ex;
        } catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getAllUsers()' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getAllUsers()}
     */
    protected abstract UserVO[] handleGetAllUsers() throws Exception;

    /**
     *
     */
    @Override
    public UserVO getUser(final String username) throws UserDoesNotExistException
    {
        if (username == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.getUser(String username) - 'username' can not be null");
        }
        try
        {
            return this.handleGetUser(username);
        } catch (final UserDoesNotExistException ex)
        {
            throw ex;
        } catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getUser(String username)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getUser(String)}
     */
    protected abstract UserVO handleGetUser(String username) throws Exception;

    /**
     *
     */
    @Override
    public UserDetailsVO registerUser(final UserDetailsVO userDetailVO) throws UserDoesNotExistException
    {
        if (userDetailVO == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.registerUser(UserDetailsVO userDetailVO) - 'userDetailVO' can not be null");
        }
        try
        {
            return this.handleRegisterUser(userDetailVO);
        } catch (final UserDoesNotExistException ex)
        {
            throw ex;
        } catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.registerUser(UserDetailsVO userDetailVO)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #registerUser(UserDetailsVO)}
     */
    protected abstract UserDetailsVO handleRegisterUser(UserDetailsVO userDetailVO) throws Exception;

    /**
     *
     */
    @Override
    public void removeUser(final UserVO userVO) throws UserDoesNotExistException
    {
        if (userVO == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.removeUser(UserVO userVO) - 'userVO' can not be null");
        }
        try
        {
            this.handleRemoveUser(userVO);
        } catch (final UserDoesNotExistException ex)
        {
            throw ex;
        } catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.removeUser(UserVO userVO)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #removeUser(UserVO)}
     */
    protected abstract void handleRemoveUser(UserVO userVO) throws Exception;

    // -------- Lifecycle Callbacks --------------

    // ------------ Destroy Method ------------

    /**
     * Remove lifecycle method
     */
    @Override
    @Remove
    @Destroy
    public void destroy()
    {
    }
}
