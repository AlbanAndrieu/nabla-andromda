// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by ServiceDelegate.vsl in andromda-ejb3-cartridge.
//
package org.andromda.timetracker.service;

import java.util.Properties;
import javax.naming.NamingException;
import org.andromda.timetracker.ServiceDelegateBase;
import org.andromda.timetracker.ServiceLocator;
import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserVO;

/**
 * Web service delegator for {@link org.andromda.timetracker.service.UserServiceBean}.
 *
 * @see org.andromda.timetracker.service.UserServiceBean
 */
public class UserServiceDelegate
    extends ServiceDelegateBase
{
    /**
     * Default constructor
     */
    public UserServiceDelegate()
    {
        super();
    }

    /**
     * Constructor setting the envirinment properties.
     *
     * @param properties
     */
    public UserServiceDelegate(Properties properties)
    {
        super(properties);
    }

    /**
     * Gets an instance of {@link UserServiceRemote}
     */
    private UserServiceRemote getUserServiceRemote()
        throws NamingException
    {
        return ServiceLocator.getInstance().get_org_andromda_timetracker_service_UserServiceBean_Remote(getProperties());
    }

    /**
     * Gets an instance of {@link UserServiceLocal}
     */
    private UserServiceLocal getUserServiceLocal()
        throws NamingException
    {
        return ServiceLocator.getInstance().get_org_andromda_timetracker_service_UserServiceBean_Local(getProperties());
    }

    /**
     * Call the session bean operation using appropriate view type
     * @see org.andromda.timetracker.service.UserServiceBean#getAllUsers()
     *
     * @return UserVO[]
     * @throws UserDoesNotExistException
     */
    public UserVO[] getAllUsers()
        throws UserDoesNotExistException
    {
        try
        {
            return getUserServiceRemote().getAllUsers();
        }
        catch (UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (NamingException ex)
        {
            throw new UserServiceException(
                "Error performing 'org.andromda.timetracker.service.UserService.getAllUsers()' --> " + ex, ex);
        }
    }

    /**
     * Call the session bean operation using appropriate view type
     * @see org.andromda.timetracker.service.UserServiceBean#getUser(String)
     *
     * @param username
     * @return UserVO
     * @throws UserDoesNotExistException
     */
    public UserVO getUser(String username)
        throws UserDoesNotExistException
    {
        try
        {
            return getUserServiceRemote().getUser(username);
        }
        catch (UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (NamingException ex)
        {
            throw new UserServiceException(
                "Error performing 'org.andromda.timetracker.service.UserService.getUser(String username)' --> " + ex, ex);
        }
    }

    /**
     * Call the session bean operation using appropriate view type
     * @see org.andromda.timetracker.service.UserServiceBean#registerUser(UserDetailsVO)
     *
     * @param userDetailVO
     * @return UserDetailsVO
     * @throws UserDoesNotExistException
     */
    public UserDetailsVO registerUser(UserDetailsVO userDetailVO)
        throws UserDoesNotExistException
    {
        try
        {
            return getUserServiceRemote().registerUser(userDetailVO);
        }
        catch (UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (NamingException ex)
        {
            throw new UserServiceException(
                "Error performing 'org.andromda.timetracker.service.UserService.registerUser(UserDetailsVO userDetailVO)' --> " + ex, ex);
        }
    }

    /**
     * Call the session bean operation using appropriate view type
     * @see org.andromda.timetracker.service.UserServiceBean#removeUser(UserVO)
     *
     * @param userVO
     * @throws UserDoesNotExistException
     */
    public void removeUser(UserVO userVO)
        throws UserDoesNotExistException
    {
        try
        {
            getUserServiceRemote().removeUser(userVO);
        }
        catch (UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (NamingException ex)
        {
            throw new UserServiceException(
                "Error performing 'org.andromda.timetracker.service.UserService.removeUser(UserVO userVO)' --> " + ex, ex);
        }
    }

}
