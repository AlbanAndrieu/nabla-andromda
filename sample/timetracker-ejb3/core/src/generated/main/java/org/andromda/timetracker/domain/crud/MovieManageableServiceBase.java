// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by crud/ManageableServiceBase.vsl in andromda-ejb3-cartridge.
//
package org.andromda.timetracker.domain.crud;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Resource;
import javax.ejb.Remote;
import javax.ejb.SessionContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import org.andromda.timetracker.domain.Movie;

/**
 * Autogenerated EJB manageable session bean class MovieManageableService.
 */
/**
 * Do not specify the javax.ejb.${manageable.type} annotation
 * Instead, define the session bean in the ejb-jar.xml descriptor
 * javax.ejb.${manageable.type}
 */
@TransactionAttribute(TransactionAttributeType.REQUIRED)
@Remote({MovieManageableService.class})
public final class MovieManageableServiceBase
    implements MovieManageableService
{
    // ------ Session Context Injection ------

    @Resource
    protected SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context timetracker-ejb3
     */
    @PersistenceContext(unitName = "timetracker-ejb3")
    protected EntityManager emanager;

    // ------------ CRUD Operations -------------

    /**
     * Create operations
     *
     * @return MovieVO
     * @throws MovieCreateManageableException
     */
    public MovieVO create(String title, Integer year, Integer version, String director, String plot, Long id)
        throws MovieCreateManageableException
    {
        if (title == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.create(String title, Integer year, Integer version, String director, String plot, Long id) - 'title' can not be null");
        }

        if (director == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.create(String title, Integer year, Integer version, String director, String plot, Long id) - 'director' can not be null");
        }

        if (plot == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.create(String title, Integer year, Integer version, String director, String plot, Long id) - 'plot' can not be null");
        }

        final Movie entity = new Movie();
        entity.setTitle(title);
        entity.setYear(year);
        entity.setDirector(director);
        entity.setPlot(plot);
        entity.setId(id);

        try
        {

            emanager.persist(entity);
            emanager.flush();
            return toValueObject(entity);
        }
        catch (Exception ex)
        {
            throw new MovieCreateManageableException(ex);
        }
    }


     /**
     * Entity read operation
     *
     * @return MovieVO
     * @throws MovieReadManageableException
     */
    public MovieVO readById(Long id)
        throws MovieReadManageableException
    {
        try{
            return toValueObject((Movie)emanager.find(Movie.class, id));
        }
        catch (Exception ex)
        {
            throw new MovieReadManageableException(ex);
        }
    }

    /**
     * Read operation
     *
     * @return List
     * @throws MovieReadManageableException
     */
    public List<MovieVO> read(String title, Integer year, Integer version, String director, String plot, Long id)
        throws MovieReadManageableException
    {
        String logicalOperator = "";
        StringBuilder buf = new StringBuilder("from Movie as entity");
        buf.append(" where ");
        if (title != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.title like :title");
            logicalOperator = " and ";
        }
        if (year != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.year = :year");
            logicalOperator = " and ";
        }
        if (version != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.version = :version");
            logicalOperator = " and ";
        }
        if (director != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.director like :director");
            logicalOperator = " and ";
        }
        if (plot != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.plot like :plot");
            logicalOperator = " and ";
        }
        if (id != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.id = :id");
            logicalOperator = " and ";
        }

        try
        {
            final Query query = emanager.createQuery(buf.toString());
            query.setMaxResults(250);
            return query.getResultList();
        }
        catch (Exception ex)
        {
            throw new MovieReadManageableException(ex);
        }
    }

    /**
     * Read all operation
     *
     * @return List
     * @throws MovieReadManageableException
     */
    public List<MovieVO> readAll()
        throws MovieReadManageableException
    {
        try
        {
            Query query = emanager.createQuery("select entity from Movie as entity");
            query.setMaxResults(250);
            List<Movie> entities = query.getResultList();
            return toValueObjects(entities);
        }
        catch (Exception ex)
        {
            throw new MovieReadManageableException(ex);
        }
    }

    /**
     * Update Operation
     *
     * @return MovieVO
     * @throws MovieUpdateManageableException
     */
    public MovieVO update(String title, Integer year, Integer version, String director, String plot, Long id)
        throws MovieUpdateManageableException
    {
        if (title == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.update(String title, Integer year, Integer version, String director, String plot, Long id) - 'title' can not be null");
        }

        if (director == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.update(String title, Integer year, Integer version, String director, String plot, Long id) - 'director' can not be null");
        }

        if (plot == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.update(String title, Integer year, Integer version, String director, String plot, Long id) - 'plot' can not be null");
        }

        final Movie entity = (Movie)emanager.find(Movie.class, id);
        entity.setTitle(title);
        entity.setYear(year);
        entity.setDirector(director);
        entity.setPlot(plot);

        try
        {

            emanager.merge(entity);
            emanager.flush();
            return toValueObject(entity);
        }
        catch (Exception ex)
        {
            throw new MovieUpdateManageableException(ex);
        }
    }

    /**
     * Delete operation
     *
     * @throws MovieDeleteManageableException
     */
    public void delete(Long[] ids)
        throws MovieDeleteManageableException
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.timetracker.domain.crud.MovieManageableService.delete(Long[] ids) - 'ids' can not be null");
        }

        try
        {
            final Query queryObject = emanager.createQuery("delete from Movie where id in (:ids)");
            queryObject.setParameter("ids", Arrays.asList(ids));
            queryObject.executeUpdate();
        }
        catch (Exception ex)
        {
            throw new MovieDeleteManageableException(ex);
        }
    }

    private static List<MovieVO> toValueObjects(Collection<Movie> entities)
    {
        final List<MovieVO> list = new ArrayList<MovieVO>();

        for (Iterator<Movie> iterator = entities.iterator(); iterator.hasNext();)
        {
            list.add(toValueObject(iterator.next()));
        }

        return list;
    }

    private static MovieVO toValueObject(Movie entity)
    {
        final MovieVO valueObject = new MovieVO();

        valueObject.setTitle(entity.getTitle());
        valueObject.setYear(entity.getYear());
        valueObject.setVersion(entity.getVersion());
        valueObject.setDirector(entity.getDirector());
        valueObject.setPlot(entity.getPlot());
        valueObject.setId(entity.getId());

        return valueObject;
    }
}