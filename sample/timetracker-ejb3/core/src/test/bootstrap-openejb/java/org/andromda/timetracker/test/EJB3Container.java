// license-header java merge-point
//
// Generated by test/EJB3Container.vsl in andromda-ejb3-cartridge on 03/29/2012 12:08:36.
//
package org.andromda.timetracker.test;

import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory; //import org.jboss.ejb3.embedded.EJB3StandaloneBootstrap;
//import org.jboss.ejb3.embedded.EJB3StandaloneDeployer;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;

/**
 * Boots the JBoss Microcontainer with an EJB3 configuration.
 *
 * You can also use this class to lookup managed beans from JNDI.
 *
 * <p><b>Note</b>. code was copied from christian.bauer@jboss.com
 * example on Hibernate's CaveatEmptor application
 * </p>
 */
public class EJB3Container
{
    private static final Log      logger                = LogFactory.getLog(EJB3Container.class);

    // a boolean to test if the container is running or not
    private static boolean        containerRunning      = false;

    //    private static EJB3StandaloneDeployer deployer;

    //    @BeforeTest
    //    public void startup() throws Exception
    //    {
    //        EJB3Container.startupEmbeddedContainer();
    //    }

    /**
     * The method starts the container and creates a deployer
     * using the persistence.xml file
     *
     * @throws Exception
     */
    /*
    public static void startupEmbeddedContainer() throws Exception
    {
        if (!EJB3Container.containerRunning)
        {

            try
            {
                EJB3Container.logger.info("==>Bootstrapping EJB3 container...");

                // Boot the JBoss Microcontainer with EJB3 settings, loads ejb3-interceptors-aop.xml
                EJB3StandaloneBootstrap.boot(null);
                // EJB3StandaloneBootstrap.boot("target/test-classes");

                // Uncomment the following to enable security
                // logger.info("==>Deploying security-beans");
                // EJB3StandaloneBootstrap.deployXmlResource("security-beans.xml");
                // logger.info("==>Deployed security-beans");

                // logger.info("==>Deploying jboss-jms-beans - init JBoss MQ core services");
                // EJB3StandaloneBootstrap.deployXmlResource("jboss-jms-beans.xml");
                // logger.info("==>Deployed jboss-jms-beans");

                // logger.info("==>Configure test queue and topic");
                // EJB3StandaloneBootstrap.deployXmlResource("testjms.xml");
                // logger.info("==>Configured test queues and topics");

                EJB3Container.logger.info("==>Deploying ejb3");
                try
                {
                    // Still works after java.lang.IllegalArgumentException: Null name
                    EJB3StandaloneBootstrap.scanClasspath();
                    // EJB3StandaloneBootstrap.scanClasspath("target/test-classes");
                }
                catch (final Exception e)
                {
                    e.printStackTrace();
                    EJB3Container.logger.error(e);
                }

                // Add all EJBs found in the archive that has this file
                // EJB3Container.deployer = new EJB3StandaloneDeployer();
                EJB3Container.deployer = EJB3StandaloneBootstrap.createDeployer();
                // EJB3Container.deployer.getArchivesByResource().add("META-INF/persistence.xml");

                // Deploy everything we got
                EJB3Container.deployer.setKernel(EJB3StandaloneBootstrap.getKernel());
                EJB3Container.deployer.create();
                EJB3Container.logger.info("==>Deployer created");
                EJB3Container.deployer.start();
                EJB3Container.logger.info("==>Deployer started");
                EJB3Container.logger.info("==>End of bootstrapping EJB3 container");
            }
            catch (final Exception ex)
            {
                EJB3Container.logger.error(ex.getMessage(), ex);
                throw new RuntimeException(ex);
            }
        }
    }
     */

    //    @AfterTest
    //    public void shutdown() throws Exception
    //    {
    //        EJB3Container.stopEmbeddedContainer();
    //    }

    /**
     * The method stop the container
     *
     * @throws Exception
     */
    //    public static void stopEmbeddedContainer() throws Exception
    //    {
    //        if (EJB3Container.containerRunning)
    //        {
    //            try
    //            {
    //                EJB3Container.logger.info("==>Invoking EJB3.shutdown...");
    //                EJB3Container.deployer.stop();
    //                EJB3Container.deployer.destroy();
    //                EJB3StandaloneBootstrap.shutdown();
    //            }
    //            catch (final Exception ex)
    //            {
    //                throw new RuntimeException(ex);
    //            }
    //            finally
    //            {
    //                EJB3Container.containerRunning = false;
    //            }
    //        }
    //    }

    private static InitialContext initialContext        = null;
    private static InitialContext securedInitialContext = null;

    /**
     * Return a new InitialContext based on org.jnp.interfaces.LocalOnlyContextFactory,
     * setting the the default context.
     *
     * @return InitialContext
     * @throws Exception
     */
    public static InitialContext newInitialContext() throws Exception
    {
        final Hashtable<String, String> props = EJB3Container.getInitialContextProperties();
        EJB3Container.initialContext = new InitialContext(props);
        return EJB3Container.initialContext;
    }

    /**
     * Return a new InitialContext based on org.jboss.security.jndi.JndiLoginInitialContextFactory,
     * setting the default context. Use the specified username and password to set the security context.
     *
     * @param principal
     * @param credential
     * @return InitialContext
     * @throws Exception
     */
    public static InitialContext newInitialContext(final String principal, final String credential) throws Exception
    {
        final Hashtable<String, String> props = EJB3Container.getInitialContextProperties(principal, credential);
        EJB3Container.securedInitialContext = new InitialContext(props);
        return EJB3Container.securedInitialContext;
    }

    /**
     * Return the default InitialContext based on org.jnp.interfaces.LocalOnlyContextFactory
     * if one is already instantiated, otherwise create a new InitialContext and set as the default.
     *
     * @return InitialContext
     * @throws Exception
     */
    public static InitialContext getInitialContext() throws Exception
    {
        if (EJB3Container.initialContext == null)
        {
            final Hashtable<String, String> props = EJB3Container.getInitialContextProperties();
            EJB3Container.initialContext = new InitialContext(props);
        }
        return EJB3Container.initialContext;
    }

    /**
     * Return the default InitialContext based on org.jboss.security.jndi.JndiLoginInitialContextFactory
     * if one is already instantiated, otherwise create a new InitialContext and set as the default.
     * Use the specified username and password to set the security context.
     *
     * @param principal
     * @param credential
     * @return InitialContext
     * @throws Exception
     */
    public static InitialContext getInitialContext(final String principal, final String credential) throws Exception
    {
        if (EJB3Container.securedInitialContext == null)
        {
            final Hashtable<String, String> props = EJB3Container.getInitialContextProperties(principal, credential);
            EJB3Container.securedInitialContext = new InitialContext(props);
        }
        return EJB3Container.securedInitialContext;
    }

    public static Hashtable<String, String> getInitialContextProperties()
    {
        final Hashtable<String, String> props = new Hashtable<String, String>();
        props.put(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.LocalOnlyContextFactory");
        props.put(Context.URL_PKG_PREFIXES, "org.jboss.naming:org.jnp.interfaces");
        return props;
    }

    public static Hashtable<String, String> getInitialContextProperties(final String principal, final String credential)
    {
        final Hashtable<String, String> props = new Hashtable<String, String>();
        props.put(Context.INITIAL_CONTEXT_FACTORY, "org.jboss.security.jndi.JndiLoginInitialContextFactory");
        props.put(Context.SECURITY_PRINCIPAL, principal);
        props.put(Context.SECURITY_CREDENTIALS, credential);
        return props;
    }
}
