// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * Generated by DaoImpl.vsl in andromda-ejb3-cartridge on 03/29/2012 12:08:35.
 * You can (and have to!) safely modify it by hand.
 */
package org.andromda.timetracker.domain;

import javax.ejb.Local;
import javax.ejb.Stateless;

import org.andromda.timetracker.vo.UserRoleVO;
import org.apache.log4j.Logger;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.AutoCreate;
import org.jboss.seam.annotations.JndiName;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

/**
 * @see UserRole
 */
@Stateless
// @Stateful if stateful uncomment the destroy method
@Name("userRoleDao")
@Scope(ScopeType.EVENT)
@AutoCreate
@Local(
{ UserRoleDao.class })
@JndiName("java:app:core/UserRoleDaoImpl")
public class UserRoleDaoImpl extends UserRoleDaoBase
{
    private static final Logger logger = Logger.getLogger(UserRoleDaoImpl.class);

    /**
     * @see org.andromda.timetracker.domain.UserRoleDao#toUserRoleVO(UserRole, UserRoleVO)
     */
    @Override
    public void toUserRoleVO(final UserRole sourceEntity, final UserRoleVO targetVO)
    {
        // TODO verify behavior of toUserRoleVO
        super.toUserRoleVO(sourceEntity, targetVO);
    }

    /**
     * @see org.andromda.timetracker.domain.UserRoleDao#toUserRoleVO(UserRole)
     */
    @Override
    public UserRoleVO toUserRoleVO(final UserRole entity)
    {
        // TODO verify behavior of toUserRoleVO
        return super.toUserRoleVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private UserRole loadUserRoleFromUserRoleVO(final UserRoleVO userRoleVO)
    {
        org.andromda.timetracker.domain.UserRole userRole = null;
        if ((userRoleVO != null) && (userRoleVO.getId() != null))
        {
            try
            {
                userRole = this.load(userRoleVO.getId());
            } catch (final UserRoleDaoException e)
            {
                UserRoleDaoImpl.logger.debug("UserRoleDaoException" + e);
            }
        }
        if (userRole == null)
        {
            userRole = new UserRole();
        }
        return userRole;
    }

    /**
     * @see org.andromda.timetracker.domain.UserRoleDao#userRoleVOToEntity(UserRoleVO)
     */
    @Override
    public UserRole userRoleVOToEntity(final UserRoleVO userRoleVO)
    {
        // TODO verify behavior of userRoleVOToEntity
        final UserRole entity = this.loadUserRoleFromUserRoleVO(userRoleVO);
        this.userRoleVOToEntity(userRoleVO, entity, true);
        return entity;
    }

    /**
     * @see org.andromda.timetracker.domain.UserRoleDao#userRoleVOToEntity(UserRoleVO, UserRole)
     */
    @Override
    public void userRoleVOToEntity(final UserRoleVO sourceVO, final UserRole targetEntity, final boolean copyIfNull)
    {
        // TODO verify behavior of userRoleVOToEntity
        super.userRoleVOToEntity(sourceVO, targetEntity, copyIfNull);
    }

}
