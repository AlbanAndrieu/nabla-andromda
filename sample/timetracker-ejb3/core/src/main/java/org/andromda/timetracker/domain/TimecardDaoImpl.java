// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * Generated by DaoImpl.vsl in andromda-ejb3-cartridge on 03/29/2012 12:08:35.
 * You can (and have to!) safely modify it by hand.
 */
package org.andromda.timetracker.domain;

import java.util.List;

import org.andromda.timetracker.vo.TimecardSearchCriteriaVO;
import org.andromda.timetracker.vo.TimecardSummaryVO;
import org.andromda.timetracker.vo.TimecardVO;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.criterion.Restrictions;

/**
 * @see Timecard
 */
/*
 * @Stateless
 * // @Stateful if stateful uncomment the destroy method
 * @Name("timecardDao")
 * @Scope(ScopeType.EVENT)
 * @AutoCreate
 * @JndiName("java:app/core/TimecardDaoImpl")
 */
public class TimecardDaoImpl extends TimecardDaoBase
{
    private final Logger logger = Logger.getLogger(TimecardDaoImpl.class);

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#findByCriteria(TimecardSearchCriteriaVO)
     */
    @Override
    protected List handleFindByCriteria(final TimecardSearchCriteriaVO criteria)
    {
        // Create the timecard criteria
        final Criteria timecardCriteria = this.hibernateSession.createCriteria(Timecard.class);
        timecardCriteria.setFetchMode("submitter", FetchMode.JOIN);
        timecardCriteria.setFetchMode("approver", FetchMode.JOIN);

        // Add sumitter criteria
        if (criteria.getSubmitterId() != null)
        {
            timecardCriteria.createCriteria("submitter").add(Restrictions.idEq(criteria.getSubmitterId()));
        }

        // Add approver criteria
        if (criteria.getApproverId() != null)
        {
            timecardCriteria.createCriteria("approver").add(Restrictions.idEq(criteria.getApproverId()));
        }

        // Add status criteria
        if (criteria.getStatus() != null)
        {
            timecardCriteria.add(Restrictions.eq("status", criteria.getStatus()));
        }

        // Add startDateMin criteria
        if (criteria.getStartDateMin() != null)
        {
            timecardCriteria.add(Restrictions.ge("startDate", criteria.getStartDateMin()));
        }

        // Add startDateMax criteria
        if (criteria.getStartDateMax() != null)
        {
            timecardCriteria.add(Restrictions.le("startDate", criteria.getStartDateMax()));
        }

        final List timecards = timecardCriteria.list();
        if (this.logger.isDebugEnabled())
        {
            this.logger.debug(timecards.size() + " timecards found");
        }
        return timecards;
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#toTimecardSummaryVO(Timecard, TimecardSummaryVO)
     */
    @Override
    public void toTimecardSummaryVO(final Timecard sourceEntity, final TimecardSummaryVO targetVO)
    {
        // TODO verify behavior of toTimecardSummaryVO
        super.toTimecardSummaryVO(sourceEntity, targetVO);

        // add the related entities
        if (sourceEntity.getSubmitter() != null)
        {
            targetVO.setSubmitterName(sourceEntity.getSubmitter().getUsername());
        }

        if (sourceEntity.getApprover() != null)
        {
            targetVO.setApproverName(sourceEntity.getApprover().getUsername());
        }
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#toTimecardSummaryVO(Timecard)
     */
    @Override
    public TimecardSummaryVO toTimecardSummaryVO(final Timecard entity)
    {
        // TODO verify behavior of toTimecardSummaryVO
        return super.toTimecardSummaryVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Timecard loadTimecardFromTimecardSummaryVO(final TimecardSummaryVO timecardSummaryVO)
    {
        // TODO implement loadTimecardFromTimecardSummaryVO
        throw new UnsupportedOperationException("org.andromda.timetracker.domain.loadTimecardFromTimecardSummaryVO(TimecardSummaryVO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * Timecard timecard = this.load(timecardSummaryVO.getId());
         * if (timecard == null)
         * {
         * timecard = Timecard.Factory.newInstance();
         * }
         * return timecard;
         */
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#timecardSummaryVOToEntity(TimecardSummaryVO)
     */
    @Override
    public Timecard timecardSummaryVOToEntity(final TimecardSummaryVO timecardSummaryVO)
    {
        // TODO verify behavior of timecardSummaryVOToEntity
        final Timecard entity = this.loadTimecardFromTimecardSummaryVO(timecardSummaryVO);
        this.timecardSummaryVOToEntity(timecardSummaryVO, entity, true);
        return entity;
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#timecardSummaryVOToEntity(TimecardSummaryVO, Timecard)
     */
    @Override
    public void timecardSummaryVOToEntity(final TimecardSummaryVO sourceVO, final Timecard targetEntity, final boolean copyIfNull)
    {
        // TODO verify behavior of timecardSummaryVOToEntity
        super.timecardSummaryVOToEntity(sourceVO, targetEntity, copyIfNull);
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#toTimecardVO(Timecard, TimecardVO)
     */
    @Override
    public void toTimecardVO(final Timecard sourceEntity, final TimecardVO targetVO)
    {
        // TODO verify behavior of toTimecardVO
        super.toTimecardVO(sourceEntity, targetVO);
        // WARNING! No conversion for targetVO.allocations (can't convert sourceEntity.getAllocations():org.andromda.timetracker.domain.TimeAllocation to org.andromda.timetracker.vo.TimeAllocationVO[]
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#toTimecardVO(Timecard)
     */
    @Override
    public TimecardVO toTimecardVO(final Timecard entity)
    {
        // TODO verify behavior of toTimecardVO
        return super.toTimecardVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Timecard loadTimecardFromTimecardVO(final TimecardVO timecardVO)
    {
        // TODO implement loadTimecardFromTimecardVO
        throw new UnsupportedOperationException("org.andromda.timetracker.domain.loadTimecardFromTimecardVO(TimecardVO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * Timecard timecard = this.load(timecardVO.getId());
         * if (timecard == null)
         * {
         * timecard = Timecard.Factory.newInstance();
         * }
         * return timecard;
         */
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#timecardVOToEntity(TimecardVO)
     */
    @Override
    public Timecard timecardVOToEntity(final TimecardVO timecardVO)
    {
        // TODO verify behavior of timecardVOToEntity
        final Timecard entity = this.loadTimecardFromTimecardVO(timecardVO);
        this.timecardVOToEntity(timecardVO, entity, true);
        return entity;
    }

    /**
     * @see org.andromda.timetracker.domain.TimecardDao#timecardVOToEntity(TimecardVO, Timecard)
     */
    @Override
    public void timecardVOToEntity(final TimecardVO sourceVO, final Timecard targetEntity, final boolean copyIfNull)
    {
        // TODO verify behavior of timecardVOToEntity
        super.timecardVOToEntity(sourceVO, targetEntity, copyIfNull);
    }

}
