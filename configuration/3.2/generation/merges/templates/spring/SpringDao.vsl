#if($entity.compositeIdentifier)
#set($primaryKeyType="${entity.fullyQualifiedEntityName}PK")
#set($primaryKeyName="$stringUtils.uncapitalize($entity.name)Pk")
#end

#set ($generatedFile = "${entity.packagePath}/${entity.daoName}.java")
#if ($enableTemplating)
#set ($entityCollectionType = "java.util.Collection<${entity.fullyQualifiedEntityName}>")
#else
#set ($entityCollectionType = "java.util.Collection")
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
//Generado por plantilla modificada para soportar claves compuestas en los entities
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#set ($superclass = $entity.generalization)
#set ($daoInheritance = $superclass && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#else
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#end
/**
 * @see $entity.fullyQualifiedEntityName
 */
public interface $entity.daoName
#if ($daoInheritance)
    extends $superclass.fullyQualifiedDaoName
#end
{
#if (!$daoInheritance)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes no transformation will occur.
     */
    public final static int $entity.daoNoTransformationConstantName = 0;

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * A transformation flag constant that denotes a transformation into a dom4j XML document tree should occur.
     */
    public final static int TRANSFORM_XML = 1;

#end
#end
##
## With dao inheritance disabled, each and every interface in the hierarchy must generate the complete set of
## transformation operators (except the "noTransformation" transformation constant which is already generated above).
##
## Note: 'valueObjectReferences' holds all of the VO references that the entity currently being processed has;
## In contrast, 'allValueObjectReference' holds all VO references including the "inherited" ones.
##
#if ($daoInheritance)
#set ($valueObjectReferences = $entity.valueObjectReferences)
#else
#set ($valueObjectReferences = $entity.allValueObjectReferences)
#end
#foreach ($valueObjectRef in $valueObjectReferences)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public final static int $valueObjectRef.transformationConstantName = $valueObjectRef.transformationConstantValue;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * ${valueObjectRef.transformationMethodName}(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName sourceEntity,
        $valueObjectRef.targetElement.fullyQualifiedName targetVO);


    /**
     * Converts this DAO's entity to an object of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection entities);
    
    /**
     * Copies the fields of {@link $valueObjectRef.targetElement.fullyQualifiedName} to the specified entity.
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName sourceVO,
        $entity.fullyQualifiedEntityName targetEntity,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this DAO's entity.
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name));

    /**
     * Converts a Collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this
     * DAO's entity.
     */
    public void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection instances);

#end
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
#if($entity.compositeIdentifier)
    public $rootEntityType load($primaryKeyType $primaryKeyName);
#else
    public $rootEntityType load($identifier.type.fullyQualifiedName $identifier.name);
#end

    /**
     * <p>
     * Does the same thing as {@link #load($identifier.type.fullyQualifiedName)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param $identifier.name the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
#if($entity.compositeIdentifier)
    public Object load(int transform, $primaryKeyType $primaryKeyName);
#else
    public Object load(int transform, $identifier.type.fullyQualifiedName $identifier.name);
#end

    /**
     * Loads all entities of type {@link ${entity.fullyQualifiedEntityName}}.
     *
     * @return the loaded entities.
     */
    public $entityCollectionType loadAll();

    /**
     * Loads all entities of type {@link ${entity.fullyQualifiedEntityName}}.
     *
     * @param max number of results returned
     * @return the loaded entities.
     */
    public $entityCollectionType loadAll(final int maxRowCount);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param max number of results returned
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int maxRowCount);
    
    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>orderByIdentifier</code>. If this flag is set to <code>true</code> then
     * the returned entities will be sorted by $entity.fullyQualifiedEntityName identifier.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param max number of results returned
     * @param oder by identifier flag     
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int maxRowCount, final boolean orderByIdentifier);

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName using XML defined in <code>$argumentName</code>
     * and adds it to the persistent store.
     */
    public $rootEntityType create(org.dom4j.Element $argumentName);

    /**
     * Creates an instance of $entity.fullyQualifiedEntityName using XML defined in <code>$argumentName</code>
     * and adds it to the persistent store.
     */
    public Object create(int transform, org.dom4j.Element $argumentName);

#end
    /**
     * <p>
     * Does the same thing as {@link #create($entity.fullyQualifiedEntityName)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, $entity.fullyQualifiedEntityName $argumentName);

    /**
     * Creates a new instance of $entity.fullyQualifiedEntityName and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of $entity.fullyQualifiedEntityName
     * instances to create.
     *
     * @return the created instances.
     */
    public $entityCollectionType create($entityCollectionType entities);

    /**
     * <p>
     * Does the same thing as {@link #create($entity.fullyQualifiedEntityName)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, $entityCollectionType entities);

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#if($entity.compositeIdentifier)
#set ($attributes = $entity.getAttributes(true, false))
#else
#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#end
#if (!$attributes.empty)
    /**
     * <p>
     * Creates a new <code>$entity.fullyQualifiedEntityName</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public $rootEntityType create(
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end

    /**
     * <p>
     * Does the same thing as {@link #create($entity.getAttributeTypeList(true,false))} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * <p>
     * Creates a new <code>$entity.fullyQualifiedEntityName</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     */
    public $rootEntityType create(
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else);#end

#end

    /**
     * <p>
     * Does the same thing as {@link #create($entity.getRequiredAttributeTypeList(true,false))} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * the returned entity will <strong>NOT</strong be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else);#end

#end
#end

#end
#end
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     */
    public void update($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     */
    public void update(org.dom4j.Element $argumentName);

#end
    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update($entityCollectionType entities);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName);

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * Removes the <code>$argumentName</code> instance in the persistent store.
     */
    public void remove(org.dom4j.Element $argumentName);

#end
    /**
     * Removes the instance of $entity.fullyQualifiedEntityName having the given
     * <code>identifier</code> from the persistent store.
     */
  
#if($entity.compositeIdentifier)
  public void remove($primaryKeyType $primaryKeyName);
#else
  public void remove($identifier.type.fullyQualifiedName $identifier.name);
#end

    /**
     * Removes all entities in the given <code>entities<code> collection.
     */
    public void remove($entityCollectionType entities);

#foreach ($operation in $entity.queryOperations)
#set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation(" * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#if(!$operation.criteriaFinder)
    /**
     * <p>
     * Does the same thing as {@link #${operation.getSignature(false)}} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #${operation.getSignature(false)}}.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.query && !$operation.returnType.collectionType)
#set ($returnType = "Object")
#end
    /**
     * <p>
     * Does the same thing as {@link #${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

    /**
     * <p>
     * Does the same thing as {@link #${operation.name}(boolean#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #${operation.name}(int#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)}.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#else
    /**
     * <p>
     * Does the same thing as {@link #${operation.getSignature(false)}} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>$entity.daoNoTransformationConstantName</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(final int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);
#end
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation(" * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#end
}
