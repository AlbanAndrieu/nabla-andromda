// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ValueObject.vsl in andromda-java-cartridge.
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#end

/**
$class.getDocumentation(" * ")
 */
public#if($class.abstract) abstract#end class $class.name
#if($class.generalization)
    extends $class.generalization.fullyQualifiedName
#end
#if ($serializable)
    implements java.io.Serializable
#end
{
#if ($serializable)
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${class.serialVersionUID}L;

#end
##
##  default constructor
##
#if ($class.requiredConstructorParameters.size() > 0 || $class.allRequiredConstructorParameters.size() > $class.requiredConstructorParameters.size())
    public ${class.name}()
    {
#if($class.generalization)
        super();
#end
#foreach ($property in $class.requiredConstructorParameters)
        this.${property.name} = ${property.type.javaNullString};
#end
    }

#end
##
##  constructor taking only required properties
##
#if ($class.properties.size() > $class.requiredConstructorParameters.size())
    public ${class.name}(## no newline
#set ($comma = "")
#foreach ($property in $class.allRequiredConstructorParameters)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
)
    {
#if($class.generalization)
        super(## no newline
#set ($comma = "")
#foreach ($property in $class.generalization.allRequiredConstructorParameters)
${comma}${property.name}## no newline
#set ($comma = ", ")
#end
);
#end
#foreach ($property in $class.requiredConstructorParameters)
        this.${property.name} = ${property.name};
#end
    }

#end
    public ${class.name}(## no newline
#set ($comma = "")
#foreach ($property in $class.allProperties)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
)
    {
#if($class.generalization)
        super(## no newline
#set ($comma = "")
#foreach ($property in $class.generalization.allProperties)
${comma}${property.name}## no newline
#set ($comma = ", ")
#end
);
#end
#foreach ($property in $class.properties)
        this.${property.name} = ${property.name};
#end
    }

    /**
     * Copies constructor from other ${class.name}
     *
     * @param otherBean, cannot be <code>null</code>
     * @throws java.lang.NullPointerException if the argument is <code>null</code>
     */
    public ${class.name}(${class.name} otherBean)
    {
        this(## no newline
#set ($comma = "")
#foreach ($property in $class.allProperties)
${comma}otherBean.${property.getterName}()## no newline
#set ($comma = ", ")
#end
);
    }

    /**
     * Copies all properties from the argument value object into this value object.
     */
    public void copy(${class.name} otherBean)
    {
        if (otherBean != null)
        {
#foreach ($property in $class.allProperties)
        this.${property.setterName}(otherBean.${property.getterName}());
#end
    }
    }

#foreach ($attribute in $class.attributes)
    private $attribute.getterSetterTypeName $attribute.name#if ($attribute.defaultValuePresent) = $attribute.defaultValue#end;

    /**
$attribute.getDocumentation("     * ")
     */
    public $attribute.getterSetterTypeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

## - always have as public, having read-only causes too many issues when attempting to 
##   use in other cartridges
    public void ${attribute.setterName}($attribute.getterSetterTypeName $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end
## Generate the relation methods.
#foreach ($associationEnd in $class.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
    private $target.getterSetterTypeName $target.name;

    /**
     * Get the $target.name
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

## - always have as public, having read-only causes too many issues when attempting to 
##   use in other cartridges
    /**
     * Sets the $target.name
     */
    public void ${target.setterName}($target.getterSetterTypeName $target.name)
    {
        this.${target.name} = ${target.name};
    }

#end
#end

    public java.lang.String toString()
    {
      return 
##Searching with ShortName
#set ($found = 0)
#foreach ($attribute in $class.allRequiredConstructorParameters)
#if ($attribute.name.toUpperCase().indexOf("SHORTNAME") >= 0 && ($found == 0))
#set ($found = 1)
	       this.${attribute.getterName}();
#end 
#end

##Searching with Name
#if ($found == 0)
#foreach ($attribute in $class.allRequiredConstructorParameters)
#if ($attribute.name.toUpperCase().indexOf("NAME") >= 0 && ($found == 0))
#set ($found = 1)
	       this.${attribute.getterName}();
#end 
#end
#end

##Searching with Id
#if ($found == 0)
#foreach ($attribute in $class.allRequiredConstructorParameters)
#if ($attribute.name.toUpperCase().indexOf("ID") >= 0 && ($found == 0) && $attribute.type.name.equals("int"))
#set ($found = 1)
	       String.valueOf(this.${attribute.getterName}());
#end 
#end
#end

#if ($found == 0)
	    "";
#end
	  }
}