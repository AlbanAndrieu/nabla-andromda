#if($entity.compositeIdentifier)
#set ($primaryKeyType="${entity.fullyQualifiedEntityName}PK")
#set ($primaryKeyName="$stringUtils.uncapitalize($entity.name)Pk")
#else
#set ($identifier = $entity.identifiers.iterator().next())
#set ($primaryKeyType="$identifier.type.fullyQualifiedName")
#set ($primaryKeyName="$identifier.name")
#end

#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
#if ($enableTemplating)
#set ($entityCollectionType = "java.util.Collection<${entity.fullyQualifiedEntityName}>")
#else
#set ($entityCollectionType = "java.util.Collection")
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl overrided come from andromda-spring-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.root.fullyQualifiedDaoName)
#else
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.fullyQualifiedDaoName)
#end

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
public abstract class $entity.daoBaseName
#if ($daoInheritance)
    extends $entity.generalization.fullyQualifiedDaoImplementationName
#else
    extends ${hibernateUtils.springHibernatePackage}.support.HibernateDaoSupport
#end
    implements $entity.fullyQualifiedDaoName
{

#foreach($entityRef in $entity.entityReferences)
    private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

    /**
     * Sets the reference to <code>$entityRef.daoName</code>.
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName)
    {
        this.$entityRef.daoName = $entityRef.daoName;
    }

    /**
     * Gets the reference to <code>$entityRef.daoName</code>.
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))

    /**
     * @see ${entity.fullyQualifiedDaoName}#load(int, $identifier.type.fullyQualifiedName)
     */
    public java.lang.Object load(final int transform, final $primaryKeyType $primaryKeyName)
    {
#set ($argument = $primaryKeyName)
#if($identifier.type.primitive && !$entity.compositeIdentifier)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$argument' can not be null");
        }
#end

#if ($hibernateUtils.xmlPersistenceActive)
#set ($xmlIndent = "    ")
        if (transform == TRANSFORM_XML)
        {
            final java.lang.Object entity = this.getHibernateTemplate().execute(
                    new org.springframework.orm.hibernate3.HibernateCallback()
                    {
                        public java.lang.Object doInHibernate(org.hibernate.Session hibernateSession)
                            throws org.hibernate.HibernateException
                        {
                            org.hibernate.Session xmlSession = hibernateSession.getSession(org.hibernate.EntityMode.DOM4J);
                            return xmlSession.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
                        }
                    },
                    true);
            return entity;
        }
        else
        {
#else
#set ($xmlIndent = "")
#end
$xmlIndent        final java.lang.Object entity = this.getHibernateTemplate().get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
$xmlIndent        return transformEntity(transform, ($entity.fullyQualifiedName)entity);
#if ($hibernateUtils.xmlPersistenceActive)
        }
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#load($primaryKeyType)
     */
    public $rootEntityType load($primaryKeyType $primaryKeyName)
    {
        return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName, $primaryKeyName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int)
     */
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll()
    {
        return this.loadAll(250);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int)
     */
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll(final int maxRowCount)
    {
        return this.loadAll(TRANSFORM_NONE, maxRowCount);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int transform, final int maxRowCount)
    {
        return this.loadAll(transform, maxRowCount, true);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int, int, boolean)
     */
    public java.util.Collection loadAll(final int transform, final int maxRowCount, final boolean orderByIdentifier)
    {
        if ( maxRowCount > 0 ) {
	  this.getHibernateTemplate().setMaxResults(maxRowCount);
    	}

	java.util.Collection results = null;
        if (orderByIdentifier)
        {
          org.hibernate.criterion.DetachedCriteria criteria = org.hibernate.criterion.DetachedCriteria.forClass(${entity.fullyQualifiedEntityImplementationName}.class);
          criteria.addOrder(org.hibernate.criterion.Order.desc("${primaryKeyName}"));
          results = this.getHibernateTemplate().findByCriteria(criteria);
        } else {
          results = this.getHibernateTemplate().loadAll(${entity.fullyQualifiedEntityImplementationName}.class);
        }

        this.transformEntities(transform, results);
        return results;
    }

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)

    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
    {
        return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
#set ($identifier = $entity.identifiers.iterator().next())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(org.dom4j.Element)
     */
    public $rootEntityType create(org.dom4j.Element $argumentName)
    {
       return ($entity.fullyQualifiedEntityName)this.create(TRANSFORM_NONE, $argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, org.dom4j.Element)
     */
    public java.lang.Object create(int transform, final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        java.lang.Object newID = this.getHibernateTemplate().execute(
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(org.hibernate.Session hibernateSession)
                        throws org.hibernate.HibernateException
                    {
                        org.hibernate.Session xmlSession = hibernateSession.getSession(org.hibernate.EntityMode.DOM4J);
                        return xmlSession.save("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                    }
                },
                true);

        return this.load(transform, ($identifier.type.fullyQualifiedName)newID);

    }

#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, $entity.fullyQualifiedEntityName)
     */
    public java.lang.Object create(final int transform, final $entity.fullyQualifiedName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
#if ($hibernateUtils.xmlPersistenceActive)
#set ($identifierProperty = "identifier")
#if($identifier.type.primitive)
#set ($identifierProperty = "(($identifier.type.wrapperName)$identifierProperty).${identifier.type.fullyQualifiedName}Value()")
#else
#set ($identifierProperty = "($identifier.type.fullyQualifiedName)$identifierProperty")
#end
        java.lang.Object identifier = this.getHibernateTemplate().save($argumentName);
        if (transform == TRANSFORM_XML)
          return this.load(TRANSFORM_XML, (($identifierProperty)));
        else
          return this.transformEntity(transform, $argumentName);
#else
        this.getHibernateTemplate().save($argumentName);
        return this.transformEntity(transform, $argumentName);
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entityCollectionType)
     */
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType create(final $entityCollectionType entities)
    {
        return create($entity.daoNoTransformationConstantName, entities);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int, $entityCollectionType)
     */
    public java.util.Collection create(final int transform, final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback()
            {
                public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, ($entity.fullyQualifiedEntityName)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#if($entity.compositeIdentifier)
#set ($attributes = $entity.getAttributes(true, false))
#set ($attributeTypeList = $entity.getAttributeTypeList(true, false))
#set ($attributeNameList = $entity.getAttributeNameList(true, false))
#else
#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#set ($attributeTypeList = $entity.getAttributeTypeList(true, $entity.usingAssignedIdentifier))
#set ($attributeNameList = $entity.getAttributeNameList(true, $entity.usingAssignedIdentifier))
#end
#if (!$attributes.empty)
    /**
     * @see ${rootDaoType}#create(#if($entity.compositeIdentifier)$primaryKeyType,#end $attributeTypeList)
     */
    public $rootEntityType create(
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName,#if($entity.compositeIdentifier) $primaryKeyName,#end $attributeNameList);
    }

    /**
     * @see ${rootDaoType}#create(int,#if($entity.compositeIdentifier)$primaryKeyType,#end $attributeTypeList)
     */
    public java.lang.Object create(
        final int transform,
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#if($entity.compositeIdentifier)
        entity.set${entity.name}Pk($primaryKeyName);
#end
#foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#end
        return this.create(transform, entity);
    }
#end

#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(#if($entity.compositeIdentifier)$primaryKeyType,#end${entity.getRequiredPropertyTypeList(true, false)})
     */
    public $rootEntityType create(
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName,#if($entity.compositeIdentifier) $primaryKeyName,#end ${entity.getRequiredPropertyNameList(true,false)});
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int,#if($entity.compositeIdentifier)$primaryKeyType,#end ${entity.getRequiredPropertyTypeList(true, false)})
     */
    public java.lang.Object create(
        final int transform,
#if($entity.compositeIdentifier)
        $primaryKeyType $primaryKeyName,
#end
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#if($entity.compositeIdentifier)
        entity.set${entity.name}Pk($primaryKeyName);
#end
#foreach ($property in $requiredProperties)
        entity.${property.setterName}($property.name);
#end
        return this.create(transform, entity);
    }

#end
#end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().update($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * @see ${entity.fullyQualifiedDaoName}#update(org.dom4j.Element)
     */
    public void update(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().execute(
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(org.hibernate.Session hibernateSession)
                        throws org.hibernate.HibernateException
                    {
                        org.hibernate.Session xmlSession = hibernateSession.getSession(org.hibernate.EntityMode.DOM4J);
                        xmlSession.update("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                        return null;
                    }
                },
                true);
    }

#end
    /**
     * @see ${rootDaoType}#update($entityCollectionType)
     */
    public void update(final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback()
            {
                public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update(($entity.fullyQualifiedEntityName)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().delete($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(org.dom4j.Element)
     */
    public void remove(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().execute(
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(org.hibernate.Session hibernateSession)
                        throws org.hibernate.HibernateException
                    {
                        org.hibernate.Session xmlSession = hibernateSession.getSession(org.hibernate.EntityMode.DOM4J);
                        xmlSession.delete($argumentName);
                        return null;
                    }
                },
                true);
    }

#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($identifier.type.fullyQualifiedName)
     */
    public void remove($primaryKeyType $primaryKeyName)
    {
#set ($argument = $primaryKeyName)
#if($identifier.type.primitive && !$entity.compositeIdentifier)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$primaryKeyName can not be null");
        }
#end
#set ($loadCall = "this.load($primaryKeyName)")
#if ($entity.generalization && $daoInheritance)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        $entity.fullyQualifiedEntityName entity = $loadCall;
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see ${rootDaoType}#remove($entityCollectionType)
     */
    public void remove($entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
##
## With daoInheritance disabled, only generate the finder methods defined on this entity; i.e. do _not_
## include those defined on any of the super-entities.
##
#if ($daoInheritance)
#set ($queryOperations = $entity.getQueryOperations(true))
#else
#set ($queryOperations = $entity.queryOperations)
#end
##
#foreach ($finder in $queryOperations)
#set ($returnType = $finder.returnType.fullyQualifiedName)
    /**
     * @see ${entity.fullyQualifiedDaoName}#$finder.getSignature(false)
     */
    $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if(!$finder.criteriaFinder)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if (!$finder.returnType.collectionType)
#set ($returnType = "java.lang.Object")
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
    #set ($isOrderBy = false)
    #foreach($argument in $finder.arguments)
    #if ($argument.name.equals('orderBy'))
    #set ($isOrderBy = true)
    #end
    #end
    #if ($isOrderBy)
    	return this.${finder.name}(transform, "$finder.getQuery($entity)" + orderBy#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    #else
        return this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    #end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating)
    @SuppressWarnings("unchecked")
#end
    $finder.visibility $returnType ${finder.name}(final int transform, final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        try
        {
            ${hibernateUtils.basePackage}.Query queryObject = super.getSession(false).createQuery(queryString);
##            //TODO: remove the setMaxResults and add maximumListSize Parameter
##            queryObject.setMaxResults(250);
#if (!$finder.arguments.empty)
#foreach($argument in $finder.arguments)
#set ($argumentValue = $argument.name)
#if ($argument.hasStereotype('MaxResult'))
            if ($argument.name > 0)
            {
              queryObject.setMaxResults( ($argument.name));
            }
#elseif ($argument.name.equals('maximumListSize'))
            queryObject.setMaxResults($argument.value);
#end
#end
#end

#foreach($argument in $finder.arguments)
#if (!$argument.name.equals('maximumListSize'))
#set ($count = $velocityCount - 1)
#set ($argumentValue = $argument.name)
#if($argument.type.primitive)
##// $argument.type.name
#if ($argument.type.name.equals('int'))
#set ($argumentValue = "${argument.type.wrapperName}.valueOf($argument.name)")
#else
#set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
#end
#elseif ($argument.type.enumeration)
#set ($argumentValue = "${argument.name}.getValue()")
#end
#set ($setParameterOperation = "setParameter")
######if ($useNamedParametersInQueries && ($argument.type.collectionType || $argument.type.arrayType))
#if ($argument.type.collectionType || $argument.type.arrayType)
#set ($setParameterOperation = "${setParameterOperation}List")
            if ($argumentValue != null)
#end
##if($argument.name.equals("orderBy"))
##			if(orderBy.equals("dictdetail.numberofuse"))
##				queryObject.setMaxResults(6);
##elseif ($finder.useNamedParameters || $argument.type.collectionType || $argument.type.arrayType)
#if ($finder.useNamedParameters || $argument.type.collectionType || $argument.type.arrayType)
            queryObject.${setParameterOperation}("$argument.name", $argumentValue);
#else
            queryObject.${setParameterOperation}($count, $argumentValue);
#end
#end
#end
#if ($finder.returnType.setType || !$finder.returnType.collectionType)
            java.util.Set results = new java.util.LinkedHashSet(queryObject.list());
#else
            java.util.List results = queryObject.list();
#end
#if (!$finder.returnType.collectionType)
            java.lang.Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of '${finder.returnType.fullyQualifiedName}"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = results.iterator().next();
                }
            }
            result = transformEntity(transform, ($entity.fullyQualifiedName)result);
            return result;
#else
            transformEntities(transform, results);
            return results;
#end
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
#else
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set($criteriaArgument = $finder.criteriaArgument)
#set($criteriaArgumentName = $criteriaArgument.name)
        try
        {
            ${springTypesPackage}.${criteriaSearchBaseName} criteriaSearch = new ${springTypesPackage}.${criteriaSearchBaseName}(super.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class);
            criteriaSearch.getConfiguration().setFirstResult(${criteriaArgumentName}.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(${criteriaArgumentName}.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(${criteriaArgumentName}.getMaximumResultSize());
#set($criteriaClass = $criteriaArgument.type)
#foreach($criteriaAttribute in $criteriaClass.attributes)
#if($criteriaAttribute.matchModePresent)
#set($matchModeArgument = ", ${hibernateUtils.criterionPackage}.MatchMode.${criteriaAttribute.matchModeConstant}")
#else
#set($matchModeArgument = "")
#end
#if($criteriaAttribute.nullable)
#set($nullableArgument = ", true")
#else
#set($nullableArgument = "")
#end
#if($criteriaAttribute.comparatorPresent)
#set($comparatorArgument = ", ${springTypesPackage}.${criteriaSearchBaseName}Parameter.${criteriaAttribute.comparatorConstant}")
#else
#set($comparatorArgument = "")
#end
#set ($parameterName = "parameter${velocityCount}")
            ${springTypesPackage}.${criteriaSearchBaseName}Parameter $parameterName =
                new ${springTypesPackage}.${criteriaSearchBaseName}Parameter(
                    ${criteriaArgumentName}.${criteriaAttribute.getterName}(),
                    "${criteriaAttribute.attributeName}"${nullableArgument}${comparatorArgument}${matchModeArgument});
#if($criteriaAttribute.orderable)
            ${parameterName}.setOrderDirection(${springTypesPackage}.${criteriaSearchBaseName}Parameter.$criteriaAttribute.orderDirection);
            ${parameterName}.setOrderRelevance($criteriaAttribute.orderRelevance);
#end
            criteriaSearch.addParameter($parameterName);
#end
#if ($finder.returnType.setType)
            java.util.Set results = criteriaSearch.executeAsSet();
#else
            java.util.List results = criteriaSearch.executeAsList();
#end
            transformEntities(transform, results);
            return results;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
    $operation.visibility $returnType.fullyQualifiedName ${operation.name}(${operation.getTypedArgumentList('final')})
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
        }
#end
#end
#end
        try
        {
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing '${entity.fullyQualifiedDaoName}.${operation.signature}' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    protected abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature
        throws java.lang.Exception;

#end
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
     * that the {@link #$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$entity.valueObjectReferences.empty)
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link $entity.fullyQualifiedName} - {@link #$entity.daoNoTransformationConstantName}</li>
#foreach ($valueObjectRef in $entity.valueObjectReferences)
#set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${valueObjectRef.transformationConstantName}}</li>
#end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link #${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final $entity.fullyQualifiedName entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
##
## When not using daoInheritance, we _must_ refer to the TransformationConstantNames defined in our own interface (and
## not, as is the case for dao inheritance, to those defined in the super-dao's interface).
##
#if ($daoInheritance)
                case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
#else
                case ${valueObjectRef.transformationConstantName} :
#end
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,$entity.fullyQualifiedName)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>$entity.fullyQualifiedDaoName</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,$entity.fullyQualifiedName)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
##
## When not using daoInheritance, we _must_ refer to our TransformationConstantNames (see comment above).
##
#if ($daoInheritance)
            case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
#else
            case ${valueObjectRef.transformationConstantName} :
#end
                ${valueObjectRef.transformationToCollectionMethodName}(entities);
                break;
#end
            case $entity.daoNoTransformationConstantName : // fall-through
                default:
                // do nothing;
        }
    }

##
## When daoInheritance is disabled we need to generated the transformations for _all_ of our value object
## references (and not only "ours" as is the case when daoInheritance is enabled).
##
#if ($daoInheritance)
#set ($valueObjectReferences = $entity.valueObjectReferences)
#else
#set ($valueObjectReferences = $entity.allValueObjectReferences)
#end
##
#foreach ($valueObjectRef in $valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, ${valueObjectRef.transformationAnonymousName});
        }
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link $entity.daoImplementationName} class if you intend to use reporting queries.
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(java.lang.Object[] row)
    {
        $valueObjectRef.targetElement.fullyQualifiedName target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof $entity.fullyQualifiedEntityName)
                {
                    target = this.${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)object);
                    break;
                }
            }
        }
        return target;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer $valueObjectRef.transformationAnonymousName =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = ${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = ${valueObjectRef.transformationMethodName}((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof $valueObjectRef.targetElement.fullyQualifiedName))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, $valueObjectRef.valueObjectToEntityTransformerName);
        }
    }

    private final org.apache.commons.collections.Transformer $valueObjectRef.valueObjectToEntityTransformerName =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)input);
            }
        };

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
#if($entity.compositeIdentifier)
#if(!$entity.identifierAssociationEnds.empty)
        //TODO: if any VO attribute maps with identifier association ends, map it in the impl class
#end
#set ($entityProperties = $entity.getAttributes(true, true))
#else
#set ($entityProperties = $entity.allProperties)
#end
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#* *##foreach ($entityProperty in $entityProperties)
#*    *##if ($property.name.equalsIgnoreCase($entityProperty.name))
#*        *##set ($entityPropertyGetterValue = false)
#*        *##if ($entityProperty.identifier && $entity.compositeIdentifier )
#*            *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.get${entity.name}Pk().${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##else
#*            *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##end
#*        *##if ($entityPropertyGetterValue)
#*        *##if ($entityProperty.identifier && $entity.compositeIdentifier )
        if(source.get${entity.name}Pk() != null)
        {
            target.${property.setterName}($entityPropertyGetterValue);
        }
#*        *##else
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##end
#*        *##else
#*        *##if ($entityProperty.type.fullyQualifiedName.equals('java.sql.Timestamp'))
#*        *##if ($entityProperty.identifier && $entity.compositeIdentifier )
#*            *##set ($entityPropertyGetterValue = "(source.get${entity.name}Pk().${entityProperty.getterName}() == null ? new ${property.type.fullyQualifiedName}() : new ${property.type.fullyQualifiedName}(source.get${entity.name}Pk().${entityProperty.getterName}()))")
#*        *##else
#*        *##set ($entityPropertyGetterValue = "(source.${entityProperty.getterName}() == null ? new ${property.type.fullyQualifiedName}() : new ${property.type.fullyQualifiedName}(source.${entityProperty.getterName}()))")
#*        *##end
#*        *##if ($entityProperty.identifier && $entity.compositeIdentifier )
        if(source.get${entity.name}Pk() != null)
        {
            target.${property.setterName}($entityPropertyGetterValue);
        }
#*        *##else
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##end
#*        *##else
        // No conversion for target.${property.name} (can't convert source.${entityProperty.getterName}():${entityProperty.type.fullyQualifiedName} to $property.type.fullyQualifiedName)
#*        *##end
#*        *##end
#*    *##end
#* *##end
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        final $valueObjectRef.targetElement.fullyQualifiedName target = new ${valueObjectRef.targetElement.fullyQualifiedName}();
        this.${valueObjectRef.transformationMethodName}(entity, target);
        return target;
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName)
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
#if($entity.compositeIdentifier)
#if(!$entity.identifierAssociationEnds.empty)
        //TODO: if any VO attribute maps with identifier association ends, map it in the impl class
#end
        if(target.get${entity.name}Pk() == null)
        {
            target.set${entity.name}Pk(new ${entity.entityName}PK());
        }
#set ($entityAttributes = $entity.getAttributes(true, true))
#else
  //$entity.usingAssignedIdentifier
#set ($entityAttributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
##set ($entityAttributes = $entity.allProperties)
#end
#foreach ($entityProperty in $entityAttributes)
        //$entityProperty $entityProperty.readOnly
#* *##if (!$entityProperty.readOnly)
#*    *##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*        *##if ($property.name.equalsIgnoreCase($entityProperty.name))
#*          *##if (!$property.name.equals($entityProperty.name))
        // Warning model is case sensitive we may miss some mapping $property.name $entityProperty.name
#*          *##end
#*            *##set ($propertyGetterValue = false)
#*            *##set ($propertyGetterValue = $converter.typeConvert($property.type.fullyQualifiedName, "source.${property.getterName}()", $entityProperty.type.fullyQualifiedName))
#*            *##if ($propertyGetterValue)
        if (copyIfNull || source.${property.getterName}() != $property.type.javaNullString)
        {
##         // $property.type.name $property.type.fullyQualifiedName source.${property.getterName}() $entityProperty.type.fullyQualifiedName)
#*            *##if ($property.type.name.equals('int'))
#*            *##set ($propertyGetterValue = "java.lang.Integer.valueOf(source.${property.getterName}())")
#*            *##end
#*            *##if ($entityProperty.identifier && $entity.compositeIdentifier )
          target.get${entity.name}Pk().${entityProperty.setterName}($propertyGetterValue);
#*            *##else
          target.${entityProperty.setterName}($propertyGetterValue);
#*            *##end
        }
#*            *##else
        //typeConvert unknown since BOTime and BODate type have been added in ValueObject !!! $property.type.fullyQualifiedName $entityProperty.type.fullyQualifiedName
#*        *##if ($property.type.name.equals('BOTime') || $property.type.name.equals('BODate'))
#*        *##set ($propertyGetterValue = "new ${entityProperty.type.fullyQualifiedName}(source.${property.getterName}().getTime())")
#*        *##if ($entityProperty.identifier && $entity.compositeIdentifier )
        target.get${entity.name}Pk().${entityProperty.setterName}($propertyGetterValue);
#*        *##else
        target.${entityProperty.setterName}($propertyGetterValue);
#*        *##end
#*        *##else
        // No conversion for target.${entityProperty.name} (can't convert source.${property.getterName}():${property.type.fullyQualifiedName} to $entityProperty.type.fullyQualifiedName)
#*        *##end
#*            *##end
#*        *##end
#*    *##end
##
##Generating mapping for Rules Associations (Cfg)
##
#if ($entityProperty.navigable)
##//Entity $entityProperty $entityProperty.navigable
#if ($entityProperty.name.indexOf('DictDetail_Id_') >= 0)
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#set ($value = $property.name.replaceAll('dictDetail', 'DictDetail_Id_'))
##// $value
#if ($value.equalsIgnoreCase($entityProperty.name))
        if ((getDictdetailDao() != null) && (source.${property.getterName}() != null)) {
          target.${entityProperty.setterName}(getDictdetailDao().load(Integer.valueOf(source.${property.getterName}().getDictDetailId())));
        }
## //ValueObject $property $property.name $property.type.name
#end
#end
#end
#end
#**##end
#end
    }

#end
}