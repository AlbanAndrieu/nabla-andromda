#set ($generatedFile = "${manageable.manageableDaoFullPath}.java")
// license-header java merge-point
// Generated by: crud/SpringCrudDao.vsl in andromda-spring-cartridge.
##
#set ($memberList = $manageable.listManageableMembers(true))
##
package $manageable.manageablePackageName;

/**
$manageable.getDocumentation(" * ")
 */
public interface $manageable.manageableDaoName
{
#if ($manageable.create)
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return $manageable.fullyQualifiedEntityName
     */
    public $manageable.fullyQualifiedEntityName create($memberList);
#end
#if ($manageable.read)

    /**
     * @param $manageable.identifierName
     * @return $manageable.fullyQualifiedEntityName
     */
    public $manageable.fullyQualifiedEntityName readById($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName);

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return List<$manageable.fullyQualifiedEntityName>
     */
    public java.util.List<$manageable.fullyQualifiedEntityName> read(${manageable.listManageableMembersWithWrapperTypes()});

    /**
     * @return List<$manageable.fullyQualifiedEntityName>
     */
    public java.util.List<$manageable.fullyQualifiedEntityName> readAll();
#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)

    /**
     * @param $manageable.identifierName
     * @return $member.type.fullyQualifiedName
     */
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName);
#end
#end
#if (!$manageable.manageableAssociationEnds.empty)

    /**
     * @return BackingLists Map<String,?>
     */
    public java.util.Map<String,?> readBackingLists();
#end
#end
#if ($manageable.update)

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return $manageable.fullyQualifiedEntityName
     */
    public $manageable.fullyQualifiedEntityName update($memberList);
#end
#if ($manageable.delete)

    /**
     * @param ids
     */
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids);
#end
}