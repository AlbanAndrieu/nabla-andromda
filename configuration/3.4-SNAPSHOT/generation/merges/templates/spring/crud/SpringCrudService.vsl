#set ($generatedFile = "${manageable.manageableServiceFullPath}.java")
// license-header java merge-point
// Generated by: crud/SpringCrudService.vsl in andromda-spring-cartridge.
##
#set ($memberList = $manageable.listManageableMembers(true))
##
package $manageable.manageablePackageName;

/**
$manageable.getDocumentation(" * ")
 */
public interface $manageable.manageableServiceName
{
#if ($manageable.create)
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return create
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $manageable.fullyQualifiedManageableValueObjectName create($memberList)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#if ($manageable.read)
    /**
     * @param $manageable.identifierName The manageable identifier name
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $manageable.fullyQualifiedManageableValueObjectName readById(${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public java.util.List<$manageable.fullyQualifiedManageableValueObjectName> read(${manageable.listManageableMembersWithWrapperTypes()})
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

    /**
     * @return all manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public java.util.List<$manageable.fullyQualifiedManageableValueObjectName> readAll()
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)
    /**
     * @return manageable
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#end
#if (!$manageable.manageableAssociationEnds.empty)
    /**
     * @return manageable backing lists
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public java.util.Map<String,?> readBackingLists()
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#end
#if ($manageable.update)
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return update
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public $manageable.fullyQualifiedManageableValueObjectName update($memberList)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
#if ($manageable.delete)
    /**
     * @param ids The array of IDs to be deleted
     * @throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
     * @throws java.rmi.RemoteException
#end
     */
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end;

#end
}
