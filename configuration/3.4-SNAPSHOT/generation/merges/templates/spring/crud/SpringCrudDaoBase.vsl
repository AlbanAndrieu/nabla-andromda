#set ($generatedFile = "${manageable.manageableDaoBaseFullPath}.java")
// license-header java merge-point
// Generated by: crud/SpringCrudDaoBase.vsl in andromda-spring-cartridge.
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
##
package $manageable.manageablePackageName;

#if ($manageable.read || $manageable.delete)
import ${hibernateUtils.basePackage}.Session;
import ${hibernateUtils.basePackage}.Criteria;
import ${hibernateUtils.criterionPackage}.MatchMode;
import ${hibernateUtils.criterionPackage}.Restrictions;

#end
/**
$manageable.getDocumentation(" * ")
 */
public final class $manageable.manageableDaoBaseName
    extends ${hibernateUtils.springHibernatePackage}.support.HibernateDaoSupport
    implements $manageable.manageableDaoName
{
    private $manageable.fullyQualifiedDaoName dao;

    /**
     * @param daoIn
     */
    public void setDao($manageable.fullyQualifiedDaoName daoIn)
    {
        this.dao = daoIn;
    }

    /**
     * @return dao
     */
    protected $manageable.fullyQualifiedDaoName getDao()
    {
        return this.dao;
    }

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($entity = $member.type)
    private $entity.fullyQualifiedDaoName $member.daoName = null;

    /**
     * @param ${member.daoName}In
     */
    public void ${member.daoSetterName}($entity.fullyQualifiedDaoName ${member.daoName}In)
    {
        this.$member.daoName = ${member.daoName}In;
    }

    /**
     * @return dao $entity.fullyQualifiedDaoName
     */
    protected $entity.fullyQualifiedDaoName ${member.daoGetterName}()
    {
        return this.$member.daoName;
    }

#end
#foreach ($associatedClass in $manageable.allAssociatedClasses)
    @SuppressWarnings({"unchecked"})
    private java.util.Set<$associatedClass.fullyQualifiedName> find${associatedClass.name}ByIds(${associatedClass.fullyQualifiedIdentifierTypeName}[] ids)
    {
        final Session session = this.getSession(false);
        try
        {
            final Criteria criteria = session.createCriteria(${associatedClass.fullyQualifiedEntityImplementationName}.class);
            criteria.add(Restrictions.in("$associatedClass.identifierName", ids));
            return new java.util.HashSet<$associatedClass.fullyQualifiedName>(criteria.list());
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#end
#if ($manageable.create)
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return entity
     * @see ${manageable.fullyQualifiedDaoName}${esc.hash}create(${manageable.fullyQualifiedEntityName})
     */
    @SuppressWarnings("cast")
    public $manageable.fullyQualifiedEntityName create($memberList)
    {
        final ${manageable.fullyQualifiedEntityName} entity = new ${manageable.fullyQualifiedEntityImplementationName}();

#if($manageable.compositeIdentifier)
#set($primaryKeyType="${manageable.fullyQualifiedEntityName}PK")
#set($primaryKeyName="$stringUtils.uncapitalize($manageable.name)Pk")
        final $primaryKeyType $primaryKeyName = new $primaryKeyType();

#foreach ($member in $manageable.manageableAttributes)
##//$member.identifier $manageable.compositeIdentifier
#if(($member.identifier) && ($manageable.compositeIdentifier))
#if($member.name == 'id')
        //TODO $primaryKeyName.${member.setterName}($member.name);
#else
        ##//entity.get${manageable.name}Pk().${member.setterName}($member.name);
        $primaryKeyName.${member.setterName}($member.name);
#end
#else
        ##//entity.${member.setterName}($member.name);
#end
#end
#foreach($associationEnd in $manageable.identifierAssociationEnds)
#if($associationEnd.many2One)
#set ($member = $associationEnd.otherEnd)
#set ($memberEntityName = "${member.name}EntityPk")
        ${member.type.fullyQualifiedName}Impl $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName}Impl)${member.daoGetterName}().load(#if($member.type.compositeIdentifier)(${member.type.fullyQualifiedName}PK)#end$member.name);
        }

        ##//$primaryKeyName.${associationEnd.otherEnd.setterName}($associationEnd.otherEnd.name);
        $primaryKeyName.${associationEnd.otherEnd.setterName}($memberEntityName);
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
#set ($memberEntityName = "${member.name}Entities")
        //1 $member.type.manageable
        @SuppressWarnings("unchecked")
        final java.util.Set<${member.type.fullyQualifiedName}> $memberEntityName = ($member.name != null && ${member.name}.length > 0)
            ? this.find${member.type.name}ByIds($member.name)
            : java.util.Collections.EMPTY_SET;
#else
##// manageableAssociationEnds ($member.identifier) ($manageable.compositeIdentifier)
#set ($memberEntityName = "${member.name}Entity")
        ${member.type.fullyQualifiedName}Impl $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName}Impl)${member.daoGetterName}().load(#if($member.type.compositeIdentifier)(${member.type.fullyQualifiedName}PK)#end$member.name);
        }
#end

        entity.${member.setterName}($memberEntityName);
        ##//$primaryKeyName.${member.setterName}($memberEntityName);
#end

#if ($member.many2many)
#if ($member.otherEnd.navigable)
        // set the other ends of the many2many association too
        for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
        {
            final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
            element.${member.otherEnd.getterName}().add(entity);
        }
#else
        // we ought to be setting the other end of the many2many association here
        // but the navigability on the other end has been disabled, therefore doing
        // the following would break compilation: element.${member.otherEnd.getterName}()
        // the result is that only one end of this association will be set
#end
#end
#end

        return (${manageable.fullyQualifiedEntityName})this.getDao().create(entity);
    }

#end
#if ($manageable.read)
    /**
     * @param $manageable.identifierName
     * @return entity
     * @see ${manageable.fullyQualifiedDaoName}${esc.hash}load(Long)
     */
    public $manageable.fullyQualifiedEntityName readById($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
    {
        return ($manageable.fullyQualifiedEntityName) getDao().load($manageable.identifierName);
    }

#if($manageableSearchMatchMode == 'anywhere')
#set($matchMode = 'MatchMode.ANYWHERE')
#else
#set($matchMode = 'MatchMode.START')
#end
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return List<$manageable.fullyQualifiedEntityName>
     */
    @SuppressWarnings("unchecked")
    public java.util.List<$manageable.fullyQualifiedEntityName> read(${manageable.listManageableMembersWithWrapperTypes()})
    {
        final Session session = getSession(false);

        try
        {
            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);

#foreach ($member in $manageable.manageableAttributes)
            if ($member.name != null)
#if ($member.type.stringType)
            {
                criteria.add(Restrictions.ilike("$member.name", $member.name, $matchMode));
            }
#elseif ($member.type.dateType)
            {
                // we check whether or not the user supplied time information within this particular date argument
                // if he/she didn't we assume he/she wishes to search in the scope of the entire day
                final java.util.Calendar calendar = new java.util.GregorianCalendar();
                calendar.setTime($member.name);
                if ( calendar.get(java.util.Calendar.HOUR) != 0
                     || calendar.get(java.util.Calendar.MINUTE) != 0
                     || calendar.get(java.util.Calendar.SECOND) != 0
                     || calendar.get(java.util.Calendar.MILLISECOND) != 0 )
                {
                    criteria.add(Restrictions.eq("$member.name", $member.name));
                }
                else
                {
                    calendar.add(java.util.Calendar.DATE, 1);
                    calendar.add(java.util.Calendar.MILLISECOND, -1);
                    criteria.add(Restrictions.between("$member.name", $member.name, calendar.getTime()));
                }
            }
#elseif ($member.type.booleanType)
            {
                criteria.add(Restrictions.eq("$member.name", ${member.name}.booleanValue()));
            }
#else
            {
                criteria.add(Restrictions.eq("$member.name", $member.name));
            }
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
            if ($member.name != null && ${member.name}.length > 0)
            {
                criteria.createCriteria("$member.name").add(Restrictions.in("$member.type.identifierName", $member.name));
            }
#else
            if ($member.name != null)
            {
                criteria.createCriteria("$member.name").add(Restrictions.eq("$member.type.identifierName", $member.name));
            }
#end
#end
#if ($manageable.maximumListSize > 0)
            criteria.setMaxResults($manageable.maximumListSize);

#end
            return criteria.list();
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @return criteria.list()
     */
    @SuppressWarnings("unchecked")
    public java.util.List<$manageable.fullyQualifiedEntityName> readAll()
    {
        final Session session = getSession(false);

        try
        {
            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);
#if ($manageable.maximumListSize > 0)
            criteria.setMaxResults($manageable.maximumListSize);
#end
            return criteria.list();
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
    {
        try
        {
            $member.type.fullyQualifiedName value = $member.type.javaNullString;

            final ${hibernateUtils.basePackage}.Query queryObject = super.getSession(false).createQuery("select entity.${member.name} from $manageable.fullyQualifiedEntityImplementationName as entity where entity.${manageable.identifierName} = :$manageable.identifierName");
            queryObject.setParameter("$manageable.identifierName", $manageable.identifierName);
            final java.util.Iterator iterator = queryObject.iterate();
            if (iterator.hasNext())
            {
                value = ($member.type.fullyQualifiedName)iterator.next();
            }

            return value;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#end
#end
#if (!$manageable.manageableAssociationEnds.empty)
    /**
     * @return backingLists Map<String,Object>
     */
    public java.util.Map<String,Object> readBackingLists()
    {
        final java.util.Map<String,Object> lists = new java.util.HashMap<String,Object>();
        final Session session = this.getSession();

        try
        {
            // Put the manageableAssociationEnds in the session query
#foreach ($member in $manageable.manageableAssociationEnds)
##            // member.name=$member.name member=$member
##            // manageable.identifierName=$manageable.identifierName identifier=$identifier
##            // member.type.name=$member.type.name member.type=$member.type
##            // displayAttribute.name=$member.type.displayAttribute.name displayAttribute=$member.type.displayAttribute
#if($member.type.manageable)
            lists.put("${member.name}", session.createQuery("select item.$member.type.identifierName, item.$member.type.displayAttribute.name from $member.type.fullyQualifiedEntityImplementationName item order by item.$member.type.displayAttribute.name").list());
#end
#end
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
        return lists;
    }

#end
#end
#if ($manageable.update)
    /**
#foreach($attribute in $manageable.manageableAttributes)
     * @param $attribute.name $attribute.getDocumentation("")
#end
#foreach($associationEnd in $manageable.manageableAssociationEnds)
     * @param $associationEnd.name $associationEnd.getDocumentation("")
#end
     * @return getDao().update(entity)
     * @see ${manageable.fullyQualifiedDaoName}${esc.hash}update($manageable.fullyQualifiedEntityName)
     */
    public $manageable.fullyQualifiedEntityName update($memberList)
    {
#set ($identifier = $manageable.manageableIdentifier)
##// final ${manageable.fullyQualifiedEntityName} entity = new ${manageable.fullyQualifiedEntityImplementationName}();
#if($manageable.compositeIdentifier)
#set($primaryKeyType="${manageable.fullyQualifiedEntityName}PK")
#set($primaryKeyName="$stringUtils.uncapitalize($manageable.name)Pk")
        final $primaryKeyType $primaryKeyName = new $primaryKeyType();

#foreach ($member in $manageable.manageableAttributes)
##//$member.identifier $manageable.compositeIdentifier
#if(($member.identifier) && ($manageable.compositeIdentifier))
#if($member.name == 'id')
        //TODO $primaryKeyName.${member.setterName}($member.name);
#else
##//entity.get${manageable.name}Pk().${member.setterName}($member.name);
        $primaryKeyName.${member.setterName}($member.name);
#end
#else
##//entity.${member.setterName}($member.name);
#end
#end
#foreach($associationEnd in $manageable.identifierAssociationEnds)
#if($associationEnd.many2One)
#set ($member = $associationEnd.otherEnd)
#set ($memberEntityName = "${member.name}EntityPk")
        ${member.type.fullyQualifiedName}Impl $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName}Impl)${member.daoGetterName}().load(#if($member.type.compositeIdentifier)(${member.type.fullyQualifiedName}PK)#end$member.name);
        }

##//$primaryKeyName.${associationEnd.otherEnd.setterName}($associationEnd.otherEnd.name);
        $primaryKeyName.${associationEnd.otherEnd.setterName}($memberEntityName);
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
#set ($memberEntityName = "${member.name}Entities")
        //2 $manageable.compositeIdentifier $member.type.manageable
        final java.util.Set $memberEntityName = ($member.name != null && ${member.name}.length > 0)
            ? this.find${member.type.name}ByIds($member.name)
            : java.util.Collections.EMPTY_SET;
#else
#set ($memberEntityName = "${member.name}Entity")
##// manageableAssociationEnds ($member.identifier) ($manageable.compositeIdentifier)
#if(($member.identifier) && ($manageable.compositeIdentifier))
        ${member.type.fullyQualifiedName}Impl $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName}Impl)${member.daoGetterName}().load(#if($member.type.compositeIdentifier)(${member.type.fullyQualifiedName}PK)#end$member.name);
        }
        $primaryKeyName.${member.setterName}($memberEntityName);
#end
#end
#end
        final $manageable.fullyQualifiedEntityName entity =#if($manageable.fullyQualifiedName != $manageable.generalizationRoot.fullyQualifiedName) (${manageable.fullyQualifiedName})#end this.getDao().load($primaryKeyName);
        //TODO or final $manageable.fullyQualifiedEntityName entity = = this.readById(dealLeg, Event);
#else
        final $manageable.fullyQualifiedEntityName entity =#if($manageable.fullyQualifiedName != $manageable.generalizationRoot.fullyQualifiedName) (${manageable.fullyQualifiedName})#end this.getDao().load($identifier.name);
#end

#foreach ($member in $manageable.manageableAttributes)
#if (!$member.equals($identifier))## the identifier is already present since we loaded the entity
#if($member.name == 'id')
        //TODO entity.${member.setterName}(${member.name});
#else
#if(!$member.identifier)
        entity.${member.setterName}(${member.name});
#end
#end
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
#set ($memberEntityName = "${member.name}Entities")
        //3 $manageable.compositeIdentifier $member.otherEnd.type $member.otherEnd.type.manageable
        // $member.otherEnd.navigable $member.manageable
#if ($member.manageable)
        @SuppressWarnings("unchecked")
        final java.util.Set<${member.type.fullyQualifiedName}> $memberEntityName = ($member.name != null && ${member.name}.length > 0)
            ? this.find${member.type.name}ByIds($member.name)
            : java.util.Collections.EMPTY_SET;
        entity.${member.setterName}($memberEntityName);
#else
        // ${member.type.name} must be manageable
#end
#else
#set ($memberEntityName = "${member.name}Entity")
        ${member.type.fullyQualifiedName}Impl $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName}Impl)#if($member.type.fullyQualifiedName != $member.type.generalizationRoot.fullyQualifiedName) (${member.type.fullyQualifiedName})#end ${member.daoGetterName}().load(#if($member.type.compositeIdentifier)(${member.type.fullyQualifiedName}PK)#end$member.name);
        }
        entity.${member.setterName}($memberEntityName);
#end

#if ($member.many2many)
#if ($member.otherEnd.navigable)
        // set the other ends of the many2many association too
        for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
        {
            final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
            element.${member.otherEnd.getterName}().add(entity);
        }
#else
        // we ought to be setting the other end of the many2many association here
        // but the navigability on the other end has been disabled, therefore doing
        // the following would break compilation: element.${member.otherEnd.getterName}()
        // the result is that only one end of this association will be set
#end
#end
#end

        this.getDao().update(entity);
        return entity;
    }

#end
#if ($manageable.delete && $manageable.identifiersPresent)

    /**
     * @param ids
     */
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids)
    {
        final Session session = getSession(false);
        try
        {
#if ($hibernateUtils.version3)
            final ${hibernateUtils.basePackage}.Query queryObject =
                session.createQuery("delete $manageable.fullyQualifiedEntityImplementationName where $manageable.identifierName in (:ids)");
            queryObject.setParameterList("ids", ids);
            queryObject.executeUpdate();
#else
##            // manageable.name=$manageable.name manageable=$manageable
##            // generalizationRoot.name=$manageable.generalizationRoot.name generalizationRoot=$manageable.generalizationRoot.name
##            // fullyQualifiedEntityImplementationName=$manageable.generalizationRoot.fullyQualifiedEntityImplementationName
            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);
            criteria.add(Restrictions.in("$manageable.identifierName", ids));
            final java.util.List list = criteria.list();
            getHibernateTemplate().deleteAll(list);
#end
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
#end
}